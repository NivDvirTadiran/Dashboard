/* soapH.h
   Generated by gSOAP 2.8.52 for emisweb.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_short(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_short(struct soap *soap, short *p)
{
	if (soap_read_short(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StatReturnType_DEFINED
#define SOAP_TYPE_ns1__StatReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StatReturnType(struct soap*, const char*, int, const ns1__StatReturnType *, const char*);
SOAP_FMAC3 ns1__StatReturnType * SOAP_FMAC4 soap_in_ns1__StatReturnType(struct soap*, const char*, ns1__StatReturnType *, const char*);
SOAP_FMAC1 ns1__StatReturnType * SOAP_FMAC2 soap_instantiate_ns1__StatReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StatReturnType * soap_new_ns1__StatReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StatReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__StatReturnType * soap_new_req_ns1__StatReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader)
{
	ns1__StatReturnType *_p = soap_new_ns1__StatReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatReturnType::responseInfoHeader = responseInfoHeader;
	}
	return _p;
}

inline ns1__StatReturnType * soap_new_set_ns1__StatReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__StatItemType *> & returnStatArray)
{
	ns1__StatReturnType *_p = soap_new_ns1__StatReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__StatReturnType::returnStatArray = returnStatArray;
	}
	return _p;
}

inline int soap_write_ns1__StatReturnType(struct soap *soap, ns1__StatReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatReturnType", p->soap_type() == SOAP_TYPE_ns1__StatReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StatReturnType(struct soap *soap, const char *URL, ns1__StatReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatReturnType", p->soap_type() == SOAP_TYPE_ns1__StatReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StatReturnType(struct soap *soap, const char *URL, ns1__StatReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatReturnType", p->soap_type() == SOAP_TYPE_ns1__StatReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StatReturnType * SOAP_FMAC4 soap_get_ns1__StatReturnType(struct soap*, ns1__StatReturnType *, const char*, const char*);

inline int soap_read_ns1__StatReturnType(struct soap *soap, ns1__StatReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StatReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StatReturnType(struct soap *soap, const char *URL, ns1__StatReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StatReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StatReturnType(struct soap *soap, ns1__StatReturnType *p)
{
	if (soap_read_ns1__StatReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StatItemType_DEFINED
#define SOAP_TYPE_ns1__StatItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StatItemType(struct soap*, const char*, int, const ns1__StatItemType *, const char*);
SOAP_FMAC3 ns1__StatItemType * SOAP_FMAC4 soap_in_ns1__StatItemType(struct soap*, const char*, ns1__StatItemType *, const char*);
SOAP_FMAC1 ns1__StatItemType * SOAP_FMAC2 soap_instantiate_ns1__StatItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StatItemType * soap_new_ns1__StatItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StatItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__StatItemType * soap_new_req_ns1__StatItemType(
	struct soap *soap,
	const std::string& ipAddress,
	const std::string& applicationId,
	unsigned int lastKeepAliveSecAgo,
	unsigned int numOfVisors,
	unsigned int numOfMonitors,
	unsigned int numOfWebVisors,
	unsigned int totalNumberOfSoapConnections,
	unsigned int numberOfSoapConnectionsSinceLastStatRequest,
	unsigned int CurrentNumberOfSoapConnections,
	unsigned int LastError)
{
	ns1__StatItemType *_p = soap_new_ns1__StatItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatItemType::ipAddress = ipAddress;
		_p->ns1__StatItemType::applicationId = applicationId;
		_p->ns1__StatItemType::lastKeepAliveSecAgo = lastKeepAliveSecAgo;
		_p->ns1__StatItemType::numOfVisors = numOfVisors;
		_p->ns1__StatItemType::numOfMonitors = numOfMonitors;
		_p->ns1__StatItemType::numOfWebVisors = numOfWebVisors;
		_p->ns1__StatItemType::totalNumberOfSoapConnections = totalNumberOfSoapConnections;
		_p->ns1__StatItemType::numberOfSoapConnectionsSinceLastStatRequest = numberOfSoapConnectionsSinceLastStatRequest;
		_p->ns1__StatItemType::CurrentNumberOfSoapConnections = CurrentNumberOfSoapConnections;
		_p->ns1__StatItemType::LastError = LastError;
	}
	return _p;
}

inline ns1__StatItemType * soap_new_set_ns1__StatItemType(
	struct soap *soap,
	const std::string& ipAddress,
	const std::string& applicationId,
	unsigned int lastKeepAliveSecAgo,
	unsigned int numOfVisors,
	unsigned int numOfMonitors,
	unsigned int numOfWebVisors,
	unsigned int totalNumberOfSoapConnections,
	unsigned int numberOfSoapConnectionsSinceLastStatRequest,
	unsigned int CurrentNumberOfSoapConnections,
	unsigned int LastError)
{
	ns1__StatItemType *_p = soap_new_ns1__StatItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatItemType::ipAddress = ipAddress;
		_p->ns1__StatItemType::applicationId = applicationId;
		_p->ns1__StatItemType::lastKeepAliveSecAgo = lastKeepAliveSecAgo;
		_p->ns1__StatItemType::numOfVisors = numOfVisors;
		_p->ns1__StatItemType::numOfMonitors = numOfMonitors;
		_p->ns1__StatItemType::numOfWebVisors = numOfWebVisors;
		_p->ns1__StatItemType::totalNumberOfSoapConnections = totalNumberOfSoapConnections;
		_p->ns1__StatItemType::numberOfSoapConnectionsSinceLastStatRequest = numberOfSoapConnectionsSinceLastStatRequest;
		_p->ns1__StatItemType::CurrentNumberOfSoapConnections = CurrentNumberOfSoapConnections;
		_p->ns1__StatItemType::LastError = LastError;
	}
	return _p;
}

inline int soap_write_ns1__StatItemType(struct soap *soap, ns1__StatItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatItemType", p->soap_type() == SOAP_TYPE_ns1__StatItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StatItemType(struct soap *soap, const char *URL, ns1__StatItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatItemType", p->soap_type() == SOAP_TYPE_ns1__StatItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StatItemType(struct soap *soap, const char *URL, ns1__StatItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatItemType", p->soap_type() == SOAP_TYPE_ns1__StatItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StatItemType * SOAP_FMAC4 soap_get_ns1__StatItemType(struct soap*, ns1__StatItemType *, const char*, const char*);

inline int soap_read_ns1__StatItemType(struct soap *soap, ns1__StatItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StatItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StatItemType(struct soap *soap, const char *URL, ns1__StatItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StatItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StatItemType(struct soap *soap, ns1__StatItemType *p)
{
	if (soap_read_ns1__StatItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StatRequestType_DEFINED
#define SOAP_TYPE_ns1__StatRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StatRequestType(struct soap*, const char*, int, const ns1__StatRequestType *, const char*);
SOAP_FMAC3 ns1__StatRequestType * SOAP_FMAC4 soap_in_ns1__StatRequestType(struct soap*, const char*, ns1__StatRequestType *, const char*);
SOAP_FMAC1 ns1__StatRequestType * SOAP_FMAC2 soap_instantiate_ns1__StatRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StatRequestType * soap_new_ns1__StatRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StatRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__StatRequestType * soap_new_req_ns1__StatRequestType(
	struct soap *soap,
	unsigned int serviceReqId)
{
	ns1__StatRequestType *_p = soap_new_ns1__StatRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatRequestType::serviceReqId = serviceReqId;
	}
	return _p;
}

inline ns1__StatRequestType * soap_new_set_ns1__StatRequestType(
	struct soap *soap,
	unsigned int serviceReqId)
{
	ns1__StatRequestType *_p = soap_new_ns1__StatRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatRequestType::serviceReqId = serviceReqId;
	}
	return _p;
}

inline int soap_write_ns1__StatRequestType(struct soap *soap, ns1__StatRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatRequestType", p->soap_type() == SOAP_TYPE_ns1__StatRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StatRequestType(struct soap *soap, const char *URL, ns1__StatRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatRequestType", p->soap_type() == SOAP_TYPE_ns1__StatRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StatRequestType(struct soap *soap, const char *URL, ns1__StatRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatRequestType", p->soap_type() == SOAP_TYPE_ns1__StatRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StatRequestType * SOAP_FMAC4 soap_get_ns1__StatRequestType(struct soap*, ns1__StatRequestType *, const char*, const char*);

inline int soap_read_ns1__StatRequestType(struct soap *soap, ns1__StatRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StatRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StatRequestType(struct soap *soap, const char *URL, ns1__StatRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StatRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StatRequestType(struct soap *soap, ns1__StatRequestType *p)
{
	if (soap_read_ns1__StatRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ApplicationReturnType_DEFINED
#define SOAP_TYPE_ns1__ApplicationReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApplicationReturnType(struct soap*, const char*, int, const ns1__ApplicationReturnType *, const char*);
SOAP_FMAC3 ns1__ApplicationReturnType * SOAP_FMAC4 soap_in_ns1__ApplicationReturnType(struct soap*, const char*, ns1__ApplicationReturnType *, const char*);
SOAP_FMAC1 ns1__ApplicationReturnType * SOAP_FMAC2 soap_instantiate_ns1__ApplicationReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApplicationReturnType * soap_new_ns1__ApplicationReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApplicationReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__ApplicationReturnType * soap_new_req_ns1__ApplicationReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader)
{
	ns1__ApplicationReturnType *_p = soap_new_ns1__ApplicationReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApplicationReturnType::responseInfoHeader = responseInfoHeader;
	}
	return _p;
}

inline ns1__ApplicationReturnType * soap_new_set_ns1__ApplicationReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader)
{
	ns1__ApplicationReturnType *_p = soap_new_ns1__ApplicationReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApplicationReturnType::responseInfoHeader = responseInfoHeader;
	}
	return _p;
}

inline int soap_write_ns1__ApplicationReturnType(struct soap *soap, ns1__ApplicationReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationReturnType", p->soap_type() == SOAP_TYPE_ns1__ApplicationReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApplicationReturnType(struct soap *soap, const char *URL, ns1__ApplicationReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationReturnType", p->soap_type() == SOAP_TYPE_ns1__ApplicationReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApplicationReturnType(struct soap *soap, const char *URL, ns1__ApplicationReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationReturnType", p->soap_type() == SOAP_TYPE_ns1__ApplicationReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApplicationReturnType * SOAP_FMAC4 soap_get_ns1__ApplicationReturnType(struct soap*, ns1__ApplicationReturnType *, const char*, const char*);

inline int soap_read_ns1__ApplicationReturnType(struct soap *soap, ns1__ApplicationReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ApplicationReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApplicationReturnType(struct soap *soap, const char *URL, ns1__ApplicationReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ApplicationReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ApplicationReturnType(struct soap *soap, ns1__ApplicationReturnType *p)
{
	if (soap_read_ns1__ApplicationReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ApplicationKeepAliveRequestType_DEFINED
#define SOAP_TYPE_ns1__ApplicationKeepAliveRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApplicationKeepAliveRequestType(struct soap*, const char*, int, const ns1__ApplicationKeepAliveRequestType *, const char*);
SOAP_FMAC3 ns1__ApplicationKeepAliveRequestType * SOAP_FMAC4 soap_in_ns1__ApplicationKeepAliveRequestType(struct soap*, const char*, ns1__ApplicationKeepAliveRequestType *, const char*);
SOAP_FMAC1 ns1__ApplicationKeepAliveRequestType * SOAP_FMAC2 soap_instantiate_ns1__ApplicationKeepAliveRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApplicationKeepAliveRequestType * soap_new_ns1__ApplicationKeepAliveRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApplicationKeepAliveRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ApplicationKeepAliveRequestType * soap_new_req_ns1__ApplicationKeepAliveRequestType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& applicationId)
{
	ns1__ApplicationKeepAliveRequestType *_p = soap_new_ns1__ApplicationKeepAliveRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApplicationKeepAliveRequestType::serviceReqId = serviceReqId;
		_p->ns1__ApplicationKeepAliveRequestType::applicationId = applicationId;
	}
	return _p;
}

inline ns1__ApplicationKeepAliveRequestType * soap_new_set_ns1__ApplicationKeepAliveRequestType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& applicationId)
{
	ns1__ApplicationKeepAliveRequestType *_p = soap_new_ns1__ApplicationKeepAliveRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApplicationKeepAliveRequestType::serviceReqId = serviceReqId;
		_p->ns1__ApplicationKeepAliveRequestType::applicationId = applicationId;
	}
	return _p;
}

inline int soap_write_ns1__ApplicationKeepAliveRequestType(struct soap *soap, ns1__ApplicationKeepAliveRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationKeepAliveRequestType", p->soap_type() == SOAP_TYPE_ns1__ApplicationKeepAliveRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApplicationKeepAliveRequestType(struct soap *soap, const char *URL, ns1__ApplicationKeepAliveRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationKeepAliveRequestType", p->soap_type() == SOAP_TYPE_ns1__ApplicationKeepAliveRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApplicationKeepAliveRequestType(struct soap *soap, const char *URL, ns1__ApplicationKeepAliveRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationKeepAliveRequestType", p->soap_type() == SOAP_TYPE_ns1__ApplicationKeepAliveRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApplicationKeepAliveRequestType * SOAP_FMAC4 soap_get_ns1__ApplicationKeepAliveRequestType(struct soap*, ns1__ApplicationKeepAliveRequestType *, const char*, const char*);

inline int soap_read_ns1__ApplicationKeepAliveRequestType(struct soap *soap, ns1__ApplicationKeepAliveRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ApplicationKeepAliveRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApplicationKeepAliveRequestType(struct soap *soap, const char *URL, ns1__ApplicationKeepAliveRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ApplicationKeepAliveRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ApplicationKeepAliveRequestType(struct soap *soap, ns1__ApplicationKeepAliveRequestType *p)
{
	if (soap_read_ns1__ApplicationKeepAliveRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ApplicationRegisterRequestType_DEFINED
#define SOAP_TYPE_ns1__ApplicationRegisterRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApplicationRegisterRequestType(struct soap*, const char*, int, const ns1__ApplicationRegisterRequestType *, const char*);
SOAP_FMAC3 ns1__ApplicationRegisterRequestType * SOAP_FMAC4 soap_in_ns1__ApplicationRegisterRequestType(struct soap*, const char*, ns1__ApplicationRegisterRequestType *, const char*);
SOAP_FMAC1 ns1__ApplicationRegisterRequestType * SOAP_FMAC2 soap_instantiate_ns1__ApplicationRegisterRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApplicationRegisterRequestType * soap_new_ns1__ApplicationRegisterRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApplicationRegisterRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ApplicationRegisterRequestType * soap_new_req_ns1__ApplicationRegisterRequestType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& applicationId)
{
	ns1__ApplicationRegisterRequestType *_p = soap_new_ns1__ApplicationRegisterRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApplicationRegisterRequestType::serviceReqId = serviceReqId;
		_p->ns1__ApplicationRegisterRequestType::applicationId = applicationId;
	}
	return _p;
}

inline ns1__ApplicationRegisterRequestType * soap_new_set_ns1__ApplicationRegisterRequestType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& applicationId)
{
	ns1__ApplicationRegisterRequestType *_p = soap_new_ns1__ApplicationRegisterRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApplicationRegisterRequestType::serviceReqId = serviceReqId;
		_p->ns1__ApplicationRegisterRequestType::applicationId = applicationId;
	}
	return _p;
}

inline int soap_write_ns1__ApplicationRegisterRequestType(struct soap *soap, ns1__ApplicationRegisterRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationRegisterRequestType", p->soap_type() == SOAP_TYPE_ns1__ApplicationRegisterRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApplicationRegisterRequestType(struct soap *soap, const char *URL, ns1__ApplicationRegisterRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationRegisterRequestType", p->soap_type() == SOAP_TYPE_ns1__ApplicationRegisterRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApplicationRegisterRequestType(struct soap *soap, const char *URL, ns1__ApplicationRegisterRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApplicationRegisterRequestType", p->soap_type() == SOAP_TYPE_ns1__ApplicationRegisterRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApplicationRegisterRequestType * SOAP_FMAC4 soap_get_ns1__ApplicationRegisterRequestType(struct soap*, ns1__ApplicationRegisterRequestType *, const char*, const char*);

inline int soap_read_ns1__ApplicationRegisterRequestType(struct soap *soap, ns1__ApplicationRegisterRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ApplicationRegisterRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApplicationRegisterRequestType(struct soap *soap, const char *URL, ns1__ApplicationRegisterRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ApplicationRegisterRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ApplicationRegisterRequestType(struct soap *soap, ns1__ApplicationRegisterRequestType *p)
{
	if (soap_read_ns1__ApplicationRegisterRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LoginManagerRequestType_DEFINED
#define SOAP_TYPE_ns1__LoginManagerRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LoginManagerRequestType(struct soap*, const char*, int, const ns1__LoginManagerRequestType *, const char*);
SOAP_FMAC3 ns1__LoginManagerRequestType * SOAP_FMAC4 soap_in_ns1__LoginManagerRequestType(struct soap*, const char*, ns1__LoginManagerRequestType *, const char*);
SOAP_FMAC1 ns1__LoginManagerRequestType * SOAP_FMAC2 soap_instantiate_ns1__LoginManagerRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LoginManagerRequestType * soap_new_ns1__LoginManagerRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LoginManagerRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__LoginManagerRequestType * soap_new_req_ns1__LoginManagerRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int Id)
{
	ns1__LoginManagerRequestType *_p = soap_new_ns1__LoginManagerRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginManagerRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__LoginManagerRequestType::Id = Id;
	}
	return _p;
}

inline ns1__LoginManagerRequestType * soap_new_set_ns1__LoginManagerRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int Id)
{
	ns1__LoginManagerRequestType *_p = soap_new_ns1__LoginManagerRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginManagerRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__LoginManagerRequestType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns1__LoginManagerRequestType(struct soap *soap, ns1__LoginManagerRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginManagerRequestType", p->soap_type() == SOAP_TYPE_ns1__LoginManagerRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LoginManagerRequestType(struct soap *soap, const char *URL, ns1__LoginManagerRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginManagerRequestType", p->soap_type() == SOAP_TYPE_ns1__LoginManagerRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LoginManagerRequestType(struct soap *soap, const char *URL, ns1__LoginManagerRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginManagerRequestType", p->soap_type() == SOAP_TYPE_ns1__LoginManagerRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LoginManagerRequestType * SOAP_FMAC4 soap_get_ns1__LoginManagerRequestType(struct soap*, ns1__LoginManagerRequestType *, const char*, const char*);

inline int soap_read_ns1__LoginManagerRequestType(struct soap *soap, ns1__LoginManagerRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LoginManagerRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LoginManagerRequestType(struct soap *soap, const char *URL, ns1__LoginManagerRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LoginManagerRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LoginManagerRequestType(struct soap *soap, ns1__LoginManagerRequestType *p)
{
	if (soap_read_ns1__LoginManagerRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RequestDeleteReportType_DEFINED
#define SOAP_TYPE_ns1__RequestDeleteReportType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestDeleteReportType(struct soap*, const char*, int, const ns1__RequestDeleteReportType *, const char*);
SOAP_FMAC3 ns1__RequestDeleteReportType * SOAP_FMAC4 soap_in_ns1__RequestDeleteReportType(struct soap*, const char*, ns1__RequestDeleteReportType *, const char*);
SOAP_FMAC1 ns1__RequestDeleteReportType * SOAP_FMAC2 soap_instantiate_ns1__RequestDeleteReportType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RequestDeleteReportType * soap_new_ns1__RequestDeleteReportType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RequestDeleteReportType(soap, n, NULL, NULL, NULL);
}

inline ns1__RequestDeleteReportType * soap_new_req_ns1__RequestDeleteReportType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int reportId)
{
	ns1__RequestDeleteReportType *_p = soap_new_ns1__RequestDeleteReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RequestDeleteReportType::requestInfoHeader = requestInfoHeader;
		_p->ns1__RequestDeleteReportType::reportId = reportId;
	}
	return _p;
}

inline ns1__RequestDeleteReportType * soap_new_set_ns1__RequestDeleteReportType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int reportId)
{
	ns1__RequestDeleteReportType *_p = soap_new_ns1__RequestDeleteReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RequestDeleteReportType::requestInfoHeader = requestInfoHeader;
		_p->ns1__RequestDeleteReportType::reportId = reportId;
	}
	return _p;
}

inline int soap_write_ns1__RequestDeleteReportType(struct soap *soap, ns1__RequestDeleteReportType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestDeleteReportType", p->soap_type() == SOAP_TYPE_ns1__RequestDeleteReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RequestDeleteReportType(struct soap *soap, const char *URL, ns1__RequestDeleteReportType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestDeleteReportType", p->soap_type() == SOAP_TYPE_ns1__RequestDeleteReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RequestDeleteReportType(struct soap *soap, const char *URL, ns1__RequestDeleteReportType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestDeleteReportType", p->soap_type() == SOAP_TYPE_ns1__RequestDeleteReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RequestDeleteReportType * SOAP_FMAC4 soap_get_ns1__RequestDeleteReportType(struct soap*, ns1__RequestDeleteReportType *, const char*, const char*);

inline int soap_read_ns1__RequestDeleteReportType(struct soap *soap, ns1__RequestDeleteReportType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RequestDeleteReportType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RequestDeleteReportType(struct soap *soap, const char *URL, ns1__RequestDeleteReportType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RequestDeleteReportType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RequestDeleteReportType(struct soap *soap, ns1__RequestDeleteReportType *p)
{
	if (soap_read_ns1__RequestDeleteReportType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RequestSaveReportType_DEFINED
#define SOAP_TYPE_ns1__RequestSaveReportType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestSaveReportType(struct soap*, const char*, int, const ns1__RequestSaveReportType *, const char*);
SOAP_FMAC3 ns1__RequestSaveReportType * SOAP_FMAC4 soap_in_ns1__RequestSaveReportType(struct soap*, const char*, ns1__RequestSaveReportType *, const char*);
SOAP_FMAC1 ns1__RequestSaveReportType * SOAP_FMAC2 soap_instantiate_ns1__RequestSaveReportType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RequestSaveReportType * soap_new_ns1__RequestSaveReportType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RequestSaveReportType(soap, n, NULL, NULL, NULL);
}

inline ns1__RequestSaveReportType * soap_new_req_ns1__RequestSaveReportType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	ns1__ReportListDataItemType *RequestItem)
{
	ns1__RequestSaveReportType *_p = soap_new_ns1__RequestSaveReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RequestSaveReportType::requestInfoHeader = requestInfoHeader;
		_p->ns1__RequestSaveReportType::RequestItem = RequestItem;
	}
	return _p;
}

inline ns1__RequestSaveReportType * soap_new_set_ns1__RequestSaveReportType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	ns1__ReportListDataItemType *RequestItem)
{
	ns1__RequestSaveReportType *_p = soap_new_ns1__RequestSaveReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RequestSaveReportType::requestInfoHeader = requestInfoHeader;
		_p->ns1__RequestSaveReportType::RequestItem = RequestItem;
	}
	return _p;
}

inline int soap_write_ns1__RequestSaveReportType(struct soap *soap, ns1__RequestSaveReportType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestSaveReportType", p->soap_type() == SOAP_TYPE_ns1__RequestSaveReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RequestSaveReportType(struct soap *soap, const char *URL, ns1__RequestSaveReportType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestSaveReportType", p->soap_type() == SOAP_TYPE_ns1__RequestSaveReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RequestSaveReportType(struct soap *soap, const char *URL, ns1__RequestSaveReportType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestSaveReportType", p->soap_type() == SOAP_TYPE_ns1__RequestSaveReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RequestSaveReportType * SOAP_FMAC4 soap_get_ns1__RequestSaveReportType(struct soap*, ns1__RequestSaveReportType *, const char*, const char*);

inline int soap_read_ns1__RequestSaveReportType(struct soap *soap, ns1__RequestSaveReportType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RequestSaveReportType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RequestSaveReportType(struct soap *soap, const char *URL, ns1__RequestSaveReportType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RequestSaveReportType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RequestSaveReportType(struct soap *soap, ns1__RequestSaveReportType *p)
{
	if (soap_read_ns1__RequestSaveReportType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SaveWorkspaseRequestType_DEFINED
#define SOAP_TYPE_ns1__SaveWorkspaseRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SaveWorkspaseRequestType(struct soap*, const char*, int, const ns1__SaveWorkspaseRequestType *, const char*);
SOAP_FMAC3 ns1__SaveWorkspaseRequestType * SOAP_FMAC4 soap_in_ns1__SaveWorkspaseRequestType(struct soap*, const char*, ns1__SaveWorkspaseRequestType *, const char*);
SOAP_FMAC1 ns1__SaveWorkspaseRequestType * SOAP_FMAC2 soap_instantiate_ns1__SaveWorkspaseRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SaveWorkspaseRequestType * soap_new_ns1__SaveWorkspaseRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SaveWorkspaseRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SaveWorkspaseRequestType * soap_new_req_ns1__SaveWorkspaseRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	const std::string& fontSize,
	const std::string& language)
{
	ns1__SaveWorkspaseRequestType *_p = soap_new_ns1__SaveWorkspaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SaveWorkspaseRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__SaveWorkspaseRequestType::fontSize = fontSize;
		_p->ns1__SaveWorkspaseRequestType::language = language;
	}
	return _p;
}

inline ns1__SaveWorkspaseRequestType * soap_new_set_ns1__SaveWorkspaseRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	const std::vector<ns1__DefaultWorkspaceItemType *> & RequestArray,
   	const std::string& fontSize,
   	const std::string& language)
{
	ns1__SaveWorkspaseRequestType *_p = soap_new_ns1__SaveWorkspaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SaveWorkspaseRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__SaveWorkspaseRequestType::RequestArray = RequestArray;
		_p->ns1__SaveWorkspaseRequestType::fontSize = fontSize;
		_p->ns1__SaveWorkspaseRequestType::language = language;
	}
	return _p;
}

inline int soap_write_ns1__SaveWorkspaseRequestType(struct soap *soap, ns1__SaveWorkspaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveWorkspaseRequestType", p->soap_type() == SOAP_TYPE_ns1__SaveWorkspaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SaveWorkspaseRequestType(struct soap *soap, const char *URL, ns1__SaveWorkspaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveWorkspaseRequestType", p->soap_type() == SOAP_TYPE_ns1__SaveWorkspaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SaveWorkspaseRequestType(struct soap *soap, const char *URL, ns1__SaveWorkspaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveWorkspaseRequestType", p->soap_type() == SOAP_TYPE_ns1__SaveWorkspaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SaveWorkspaseRequestType * SOAP_FMAC4 soap_get_ns1__SaveWorkspaseRequestType(struct soap*, ns1__SaveWorkspaseRequestType *, const char*, const char*);

inline int soap_read_ns1__SaveWorkspaseRequestType(struct soap *soap, ns1__SaveWorkspaseRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SaveWorkspaseRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SaveWorkspaseRequestType(struct soap *soap, const char *URL, ns1__SaveWorkspaseRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SaveWorkspaseRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SaveWorkspaseRequestType(struct soap *soap, ns1__SaveWorkspaseRequestType *p)
{
	if (soap_read_ns1__SaveWorkspaseRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SuperGroupListReturnType_DEFINED
#define SOAP_TYPE_ns1__SuperGroupListReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SuperGroupListReturnType(struct soap*, const char*, int, const ns1__SuperGroupListReturnType *, const char*);
SOAP_FMAC3 ns1__SuperGroupListReturnType * SOAP_FMAC4 soap_in_ns1__SuperGroupListReturnType(struct soap*, const char*, ns1__SuperGroupListReturnType *, const char*);
SOAP_FMAC1 ns1__SuperGroupListReturnType * SOAP_FMAC2 soap_instantiate_ns1__SuperGroupListReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SuperGroupListReturnType * soap_new_ns1__SuperGroupListReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SuperGroupListReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__SuperGroupListReturnType * soap_new_req_ns1__SuperGroupListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__SuperGroupListDataItemType *> & returnArray)
{
	ns1__SuperGroupListReturnType *_p = soap_new_ns1__SuperGroupListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SuperGroupListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__SuperGroupListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline ns1__SuperGroupListReturnType * soap_new_set_ns1__SuperGroupListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__SuperGroupListDataItemType *> & returnArray)
{
	ns1__SuperGroupListReturnType *_p = soap_new_ns1__SuperGroupListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SuperGroupListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__SuperGroupListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__SuperGroupListReturnType(struct soap *soap, ns1__SuperGroupListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SuperGroupListReturnType", p->soap_type() == SOAP_TYPE_ns1__SuperGroupListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SuperGroupListReturnType(struct soap *soap, const char *URL, ns1__SuperGroupListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SuperGroupListReturnType", p->soap_type() == SOAP_TYPE_ns1__SuperGroupListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SuperGroupListReturnType(struct soap *soap, const char *URL, ns1__SuperGroupListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SuperGroupListReturnType", p->soap_type() == SOAP_TYPE_ns1__SuperGroupListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SuperGroupListReturnType * SOAP_FMAC4 soap_get_ns1__SuperGroupListReturnType(struct soap*, ns1__SuperGroupListReturnType *, const char*, const char*);

inline int soap_read_ns1__SuperGroupListReturnType(struct soap *soap, ns1__SuperGroupListReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SuperGroupListReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SuperGroupListReturnType(struct soap *soap, const char *URL, ns1__SuperGroupListReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SuperGroupListReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SuperGroupListReturnType(struct soap *soap, ns1__SuperGroupListReturnType *p)
{
	if (soap_read_ns1__SuperGroupListReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SuperGroupListDataItemType_DEFINED
#define SOAP_TYPE_ns1__SuperGroupListDataItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SuperGroupListDataItemType(struct soap*, const char*, int, const ns1__SuperGroupListDataItemType *, const char*);
SOAP_FMAC3 ns1__SuperGroupListDataItemType * SOAP_FMAC4 soap_in_ns1__SuperGroupListDataItemType(struct soap*, const char*, ns1__SuperGroupListDataItemType *, const char*);
SOAP_FMAC1 ns1__SuperGroupListDataItemType * SOAP_FMAC2 soap_instantiate_ns1__SuperGroupListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SuperGroupListDataItemType * soap_new_ns1__SuperGroupListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SuperGroupListDataItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__SuperGroupListDataItemType * soap_new_req_ns1__SuperGroupListDataItemType(
	struct soap *soap,
	unsigned int superGroupId,
	const std::string& superGroupName)
{
	ns1__SuperGroupListDataItemType *_p = soap_new_ns1__SuperGroupListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SuperGroupListDataItemType::superGroupId = superGroupId;
		_p->ns1__SuperGroupListDataItemType::superGroupName = superGroupName;
	}
	return _p;
}

inline ns1__SuperGroupListDataItemType * soap_new_set_ns1__SuperGroupListDataItemType(
	struct soap *soap,
	unsigned int superGroupId,
	const std::string& superGroupName,
	const std::vector<ns1__GroupListDataItemType *> & returnArray)
{
	ns1__SuperGroupListDataItemType *_p = soap_new_ns1__SuperGroupListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SuperGroupListDataItemType::superGroupId = superGroupId;
		_p->ns1__SuperGroupListDataItemType::superGroupName = superGroupName;
		_p->ns1__SuperGroupListDataItemType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__SuperGroupListDataItemType(struct soap *soap, ns1__SuperGroupListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SuperGroupListDataItemType", p->soap_type() == SOAP_TYPE_ns1__SuperGroupListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SuperGroupListDataItemType(struct soap *soap, const char *URL, ns1__SuperGroupListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SuperGroupListDataItemType", p->soap_type() == SOAP_TYPE_ns1__SuperGroupListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SuperGroupListDataItemType(struct soap *soap, const char *URL, ns1__SuperGroupListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SuperGroupListDataItemType", p->soap_type() == SOAP_TYPE_ns1__SuperGroupListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SuperGroupListDataItemType * SOAP_FMAC4 soap_get_ns1__SuperGroupListDataItemType(struct soap*, ns1__SuperGroupListDataItemType *, const char*, const char*);

inline int soap_read_ns1__SuperGroupListDataItemType(struct soap *soap, ns1__SuperGroupListDataItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SuperGroupListDataItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SuperGroupListDataItemType(struct soap *soap, const char *URL, ns1__SuperGroupListDataItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SuperGroupListDataItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SuperGroupListDataItemType(struct soap *soap, ns1__SuperGroupListDataItemType *p)
{
	if (soap_read_ns1__SuperGroupListDataItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BriefDNISInfoRequestType_DEFINED
#define SOAP_TYPE_ns1__BriefDNISInfoRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BriefDNISInfoRequestType(struct soap*, const char*, int, const ns1__BriefDNISInfoRequestType *, const char*);
SOAP_FMAC3 ns1__BriefDNISInfoRequestType * SOAP_FMAC4 soap_in_ns1__BriefDNISInfoRequestType(struct soap*, const char*, ns1__BriefDNISInfoRequestType *, const char*);
SOAP_FMAC1 ns1__BriefDNISInfoRequestType * SOAP_FMAC2 soap_instantiate_ns1__BriefDNISInfoRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BriefDNISInfoRequestType * soap_new_ns1__BriefDNISInfoRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BriefDNISInfoRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BriefDNISInfoRequestType * soap_new_req_ns1__BriefDNISInfoRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__BriefDNISInfoRequestType *_p = soap_new_ns1__BriefDNISInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BriefDNISInfoRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline ns1__BriefDNISInfoRequestType * soap_new_set_ns1__BriefDNISInfoRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__BriefDNISInfoRequestType *_p = soap_new_ns1__BriefDNISInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BriefDNISInfoRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline int soap_write_ns1__BriefDNISInfoRequestType(struct soap *soap, ns1__BriefDNISInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BriefDNISInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__BriefDNISInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BriefDNISInfoRequestType(struct soap *soap, const char *URL, ns1__BriefDNISInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BriefDNISInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__BriefDNISInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BriefDNISInfoRequestType(struct soap *soap, const char *URL, ns1__BriefDNISInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BriefDNISInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__BriefDNISInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BriefDNISInfoRequestType * SOAP_FMAC4 soap_get_ns1__BriefDNISInfoRequestType(struct soap*, ns1__BriefDNISInfoRequestType *, const char*, const char*);

inline int soap_read_ns1__BriefDNISInfoRequestType(struct soap *soap, ns1__BriefDNISInfoRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BriefDNISInfoRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BriefDNISInfoRequestType(struct soap *soap, const char *URL, ns1__BriefDNISInfoRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BriefDNISInfoRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BriefDNISInfoRequestType(struct soap *soap, ns1__BriefDNISInfoRequestType *p)
{
	if (soap_read_ns1__BriefDNISInfoRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DNISListReturnType_DEFINED
#define SOAP_TYPE_ns1__DNISListReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DNISListReturnType(struct soap*, const char*, int, const ns1__DNISListReturnType *, const char*);
SOAP_FMAC3 ns1__DNISListReturnType * SOAP_FMAC4 soap_in_ns1__DNISListReturnType(struct soap*, const char*, ns1__DNISListReturnType *, const char*);
SOAP_FMAC1 ns1__DNISListReturnType * SOAP_FMAC2 soap_instantiate_ns1__DNISListReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DNISListReturnType * soap_new_ns1__DNISListReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DNISListReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__DNISListReturnType * soap_new_req_ns1__DNISListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__DNISListDataItemType *> & returnArray)
{
	ns1__DNISListReturnType *_p = soap_new_ns1__DNISListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DNISListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__DNISListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline ns1__DNISListReturnType * soap_new_set_ns1__DNISListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__DNISListDataItemType *> & returnArray)
{
	ns1__DNISListReturnType *_p = soap_new_ns1__DNISListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DNISListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__DNISListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__DNISListReturnType(struct soap *soap, ns1__DNISListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DNISListReturnType", p->soap_type() == SOAP_TYPE_ns1__DNISListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DNISListReturnType(struct soap *soap, const char *URL, ns1__DNISListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DNISListReturnType", p->soap_type() == SOAP_TYPE_ns1__DNISListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DNISListReturnType(struct soap *soap, const char *URL, ns1__DNISListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DNISListReturnType", p->soap_type() == SOAP_TYPE_ns1__DNISListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DNISListReturnType * SOAP_FMAC4 soap_get_ns1__DNISListReturnType(struct soap*, ns1__DNISListReturnType *, const char*, const char*);

inline int soap_read_ns1__DNISListReturnType(struct soap *soap, ns1__DNISListReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DNISListReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DNISListReturnType(struct soap *soap, const char *URL, ns1__DNISListReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DNISListReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DNISListReturnType(struct soap *soap, ns1__DNISListReturnType *p)
{
	if (soap_read_ns1__DNISListReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DNISListDataItemType_DEFINED
#define SOAP_TYPE_ns1__DNISListDataItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DNISListDataItemType(struct soap*, const char*, int, const ns1__DNISListDataItemType *, const char*);
SOAP_FMAC3 ns1__DNISListDataItemType * SOAP_FMAC4 soap_in_ns1__DNISListDataItemType(struct soap*, const char*, ns1__DNISListDataItemType *, const char*);
SOAP_FMAC1 ns1__DNISListDataItemType * SOAP_FMAC2 soap_instantiate_ns1__DNISListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DNISListDataItemType * soap_new_ns1__DNISListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DNISListDataItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__DNISListDataItemType * soap_new_req_ns1__DNISListDataItemType(
	struct soap *soap,
	unsigned int dnisId,
	const std::string& dnisName,
	const std::string& dnisNumber,
	unsigned int dnisType)
{
	ns1__DNISListDataItemType *_p = soap_new_ns1__DNISListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DNISListDataItemType::dnisId = dnisId;
		_p->ns1__DNISListDataItemType::dnisName = dnisName;
		_p->ns1__DNISListDataItemType::dnisNumber = dnisNumber;
		_p->ns1__DNISListDataItemType::dnisType = dnisType;
	}
	return _p;
}

inline ns1__DNISListDataItemType * soap_new_set_ns1__DNISListDataItemType(
	struct soap *soap,
	unsigned int dnisId,
	const std::string& dnisName,
	const std::string& dnisNumber,
	unsigned int dnisType)
{
	ns1__DNISListDataItemType *_p = soap_new_ns1__DNISListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DNISListDataItemType::dnisId = dnisId;
		_p->ns1__DNISListDataItemType::dnisName = dnisName;
		_p->ns1__DNISListDataItemType::dnisNumber = dnisNumber;
		_p->ns1__DNISListDataItemType::dnisType = dnisType;
	}
	return _p;
}

inline int soap_write_ns1__DNISListDataItemType(struct soap *soap, ns1__DNISListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DNISListDataItemType", p->soap_type() == SOAP_TYPE_ns1__DNISListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DNISListDataItemType(struct soap *soap, const char *URL, ns1__DNISListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DNISListDataItemType", p->soap_type() == SOAP_TYPE_ns1__DNISListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DNISListDataItemType(struct soap *soap, const char *URL, ns1__DNISListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DNISListDataItemType", p->soap_type() == SOAP_TYPE_ns1__DNISListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DNISListDataItemType * SOAP_FMAC4 soap_get_ns1__DNISListDataItemType(struct soap*, ns1__DNISListDataItemType *, const char*, const char*);

inline int soap_read_ns1__DNISListDataItemType(struct soap *soap, ns1__DNISListDataItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DNISListDataItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DNISListDataItemType(struct soap *soap, const char *URL, ns1__DNISListDataItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DNISListDataItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DNISListDataItemType(struct soap *soap, ns1__DNISListDataItemType *p)
{
	if (soap_read_ns1__DNISListDataItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReportListDataReturnType_DEFINED
#define SOAP_TYPE_ns1__ReportListDataReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReportListDataReturnType(struct soap*, const char*, int, const ns1__ReportListDataReturnType *, const char*);
SOAP_FMAC3 ns1__ReportListDataReturnType * SOAP_FMAC4 soap_in_ns1__ReportListDataReturnType(struct soap*, const char*, ns1__ReportListDataReturnType *, const char*);
SOAP_FMAC1 ns1__ReportListDataReturnType * SOAP_FMAC2 soap_instantiate_ns1__ReportListDataReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReportListDataReturnType * soap_new_ns1__ReportListDataReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReportListDataReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__ReportListDataReturnType * soap_new_req_ns1__ReportListDataReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader)
{
	ns1__ReportListDataReturnType *_p = soap_new_ns1__ReportListDataReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReportListDataReturnType::responseInfoHeader = responseInfoHeader;
	}
	return _p;
}

inline ns1__ReportListDataReturnType * soap_new_set_ns1__ReportListDataReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__ReportListDataItemType *> & returnArray)
{
	ns1__ReportListDataReturnType *_p = soap_new_ns1__ReportListDataReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReportListDataReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReportListDataReturnType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__ReportListDataReturnType(struct soap *soap, ns1__ReportListDataReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataReturnType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReportListDataReturnType(struct soap *soap, const char *URL, ns1__ReportListDataReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataReturnType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReportListDataReturnType(struct soap *soap, const char *URL, ns1__ReportListDataReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataReturnType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReportListDataReturnType * SOAP_FMAC4 soap_get_ns1__ReportListDataReturnType(struct soap*, ns1__ReportListDataReturnType *, const char*, const char*);

inline int soap_read_ns1__ReportListDataReturnType(struct soap *soap, ns1__ReportListDataReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReportListDataReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReportListDataReturnType(struct soap *soap, const char *URL, ns1__ReportListDataReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReportListDataReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReportListDataReturnType(struct soap *soap, ns1__ReportListDataReturnType *p)
{
	if (soap_read_ns1__ReportListDataReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReportListDataItemType_DEFINED
#define SOAP_TYPE_ns1__ReportListDataItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReportListDataItemType(struct soap*, const char*, int, const ns1__ReportListDataItemType *, const char*);
SOAP_FMAC3 ns1__ReportListDataItemType * SOAP_FMAC4 soap_in_ns1__ReportListDataItemType(struct soap*, const char*, ns1__ReportListDataItemType *, const char*);
SOAP_FMAC1 ns1__ReportListDataItemType * SOAP_FMAC2 soap_instantiate_ns1__ReportListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReportListDataItemType * soap_new_ns1__ReportListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReportListDataItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__ReportListDataItemType * soap_new_req_ns1__ReportListDataItemType(
	struct soap *soap,
	unsigned int reportId,
	unsigned int isPublic,
	const std::string& reportName,
	const std::string& renderName,
	const std::string& params)
{
	ns1__ReportListDataItemType *_p = soap_new_ns1__ReportListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReportListDataItemType::reportId = reportId;
		_p->ns1__ReportListDataItemType::isPublic = isPublic;
		_p->ns1__ReportListDataItemType::reportName = reportName;
		_p->ns1__ReportListDataItemType::renderName = renderName;
		_p->ns1__ReportListDataItemType::params = params;
	}
	return _p;
}

inline ns1__ReportListDataItemType * soap_new_set_ns1__ReportListDataItemType(
	struct soap *soap,
	unsigned int reportId,
	unsigned int isPublic,
	const std::string& reportName,
	const std::string& renderName,
	const std::string& params)
{
	ns1__ReportListDataItemType *_p = soap_new_ns1__ReportListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReportListDataItemType::reportId = reportId;
		_p->ns1__ReportListDataItemType::isPublic = isPublic;
		_p->ns1__ReportListDataItemType::reportName = reportName;
		_p->ns1__ReportListDataItemType::renderName = renderName;
		_p->ns1__ReportListDataItemType::params = params;
	}
	return _p;
}

inline int soap_write_ns1__ReportListDataItemType(struct soap *soap, ns1__ReportListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataItemType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReportListDataItemType(struct soap *soap, const char *URL, ns1__ReportListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataItemType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReportListDataItemType(struct soap *soap, const char *URL, ns1__ReportListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataItemType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReportListDataItemType * SOAP_FMAC4 soap_get_ns1__ReportListDataItemType(struct soap*, ns1__ReportListDataItemType *, const char*, const char*);

inline int soap_read_ns1__ReportListDataItemType(struct soap *soap, ns1__ReportListDataItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReportListDataItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReportListDataItemType(struct soap *soap, const char *URL, ns1__ReportListDataItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReportListDataItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReportListDataItemType(struct soap *soap, ns1__ReportListDataItemType *p)
{
	if (soap_read_ns1__ReportListDataItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReportListDataRequestType_DEFINED
#define SOAP_TYPE_ns1__ReportListDataRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReportListDataRequestType(struct soap*, const char*, int, const ns1__ReportListDataRequestType *, const char*);
SOAP_FMAC3 ns1__ReportListDataRequestType * SOAP_FMAC4 soap_in_ns1__ReportListDataRequestType(struct soap*, const char*, ns1__ReportListDataRequestType *, const char*);
SOAP_FMAC1 ns1__ReportListDataRequestType * SOAP_FMAC2 soap_instantiate_ns1__ReportListDataRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReportListDataRequestType * soap_new_ns1__ReportListDataRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReportListDataRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ReportListDataRequestType * soap_new_req_ns1__ReportListDataRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__ReportListDataRequestType *_p = soap_new_ns1__ReportListDataRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReportListDataRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline ns1__ReportListDataRequestType * soap_new_set_ns1__ReportListDataRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__ReportListDataRequestType *_p = soap_new_ns1__ReportListDataRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReportListDataRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline int soap_write_ns1__ReportListDataRequestType(struct soap *soap, ns1__ReportListDataRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataRequestType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReportListDataRequestType(struct soap *soap, const char *URL, ns1__ReportListDataRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataRequestType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReportListDataRequestType(struct soap *soap, const char *URL, ns1__ReportListDataRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportListDataRequestType", p->soap_type() == SOAP_TYPE_ns1__ReportListDataRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReportListDataRequestType * SOAP_FMAC4 soap_get_ns1__ReportListDataRequestType(struct soap*, ns1__ReportListDataRequestType *, const char*, const char*);

inline int soap_read_ns1__ReportListDataRequestType(struct soap *soap, ns1__ReportListDataRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReportListDataRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReportListDataRequestType(struct soap *soap, const char *URL, ns1__ReportListDataRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReportListDataRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReportListDataRequestType(struct soap *soap, ns1__ReportListDataRequestType *p)
{
	if (soap_read_ns1__ReportListDataRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DefaultWorkspaceReturnType_DEFINED
#define SOAP_TYPE_ns1__DefaultWorkspaceReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DefaultWorkspaceReturnType(struct soap*, const char*, int, const ns1__DefaultWorkspaceReturnType *, const char*);
SOAP_FMAC3 ns1__DefaultWorkspaceReturnType * SOAP_FMAC4 soap_in_ns1__DefaultWorkspaceReturnType(struct soap*, const char*, ns1__DefaultWorkspaceReturnType *, const char*);
SOAP_FMAC1 ns1__DefaultWorkspaceReturnType * SOAP_FMAC2 soap_instantiate_ns1__DefaultWorkspaceReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DefaultWorkspaceReturnType * soap_new_ns1__DefaultWorkspaceReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DefaultWorkspaceReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__DefaultWorkspaceReturnType * soap_new_req_ns1__DefaultWorkspaceReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::string& fontSize,
	const std::string& language)
{
	ns1__DefaultWorkspaceReturnType *_p = soap_new_ns1__DefaultWorkspaceReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DefaultWorkspaceReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__DefaultWorkspaceReturnType::fontSize = fontSize;
		_p->ns1__DefaultWorkspaceReturnType::language = language;
	}
	return _p;
}

inline ns1__DefaultWorkspaceReturnType * soap_new_set_ns1__DefaultWorkspaceReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__DefaultWorkspaceItemType *> & returnArray,
   	const std::string& fontSize,
   	const std::string& language)
{
	ns1__DefaultWorkspaceReturnType *_p = soap_new_ns1__DefaultWorkspaceReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DefaultWorkspaceReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__DefaultWorkspaceReturnType::returnArray = returnArray;
		_p->ns1__DefaultWorkspaceReturnType::fontSize = fontSize;
		_p->ns1__DefaultWorkspaceReturnType::language = language;
	}
	return _p;
}

inline int soap_write_ns1__DefaultWorkspaceReturnType(struct soap *soap, ns1__DefaultWorkspaceReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceReturnType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DefaultWorkspaceReturnType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceReturnType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DefaultWorkspaceReturnType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceReturnType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DefaultWorkspaceReturnType * SOAP_FMAC4 soap_get_ns1__DefaultWorkspaceReturnType(struct soap*, ns1__DefaultWorkspaceReturnType *, const char*, const char*);

inline int soap_read_ns1__DefaultWorkspaceReturnType(struct soap *soap, ns1__DefaultWorkspaceReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DefaultWorkspaceReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DefaultWorkspaceReturnType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DefaultWorkspaceReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DefaultWorkspaceReturnType(struct soap *soap, ns1__DefaultWorkspaceReturnType *p)
{
	if (soap_read_ns1__DefaultWorkspaceReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DefaultWorkspaceItemType_DEFINED
#define SOAP_TYPE_ns1__DefaultWorkspaceItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DefaultWorkspaceItemType(struct soap*, const char*, int, const ns1__DefaultWorkspaceItemType *, const char*);
SOAP_FMAC3 ns1__DefaultWorkspaceItemType * SOAP_FMAC4 soap_in_ns1__DefaultWorkspaceItemType(struct soap*, const char*, ns1__DefaultWorkspaceItemType *, const char*);
SOAP_FMAC1 ns1__DefaultWorkspaceItemType * SOAP_FMAC2 soap_instantiate_ns1__DefaultWorkspaceItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DefaultWorkspaceItemType * soap_new_ns1__DefaultWorkspaceItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DefaultWorkspaceItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__DefaultWorkspaceItemType * soap_new_req_ns1__DefaultWorkspaceItemType(
	struct soap *soap,
	unsigned int reportId,
	short x,
	short y,
	unsigned int width,
	unsigned int height)
{
	ns1__DefaultWorkspaceItemType *_p = soap_new_ns1__DefaultWorkspaceItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DefaultWorkspaceItemType::reportId = reportId;
		_p->ns1__DefaultWorkspaceItemType::x = x;
		_p->ns1__DefaultWorkspaceItemType::y = y;
		_p->ns1__DefaultWorkspaceItemType::width = width;
		_p->ns1__DefaultWorkspaceItemType::height = height;
	}
	return _p;
}

inline ns1__DefaultWorkspaceItemType * soap_new_set_ns1__DefaultWorkspaceItemType(
	struct soap *soap,
	unsigned int reportId,
	short x,
	short y,
	unsigned int width,
	unsigned int height)
{
	ns1__DefaultWorkspaceItemType *_p = soap_new_ns1__DefaultWorkspaceItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DefaultWorkspaceItemType::reportId = reportId;
		_p->ns1__DefaultWorkspaceItemType::x = x;
		_p->ns1__DefaultWorkspaceItemType::y = y;
		_p->ns1__DefaultWorkspaceItemType::width = width;
		_p->ns1__DefaultWorkspaceItemType::height = height;
	}
	return _p;
}

inline int soap_write_ns1__DefaultWorkspaceItemType(struct soap *soap, ns1__DefaultWorkspaceItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceItemType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DefaultWorkspaceItemType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceItemType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DefaultWorkspaceItemType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceItemType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DefaultWorkspaceItemType * SOAP_FMAC4 soap_get_ns1__DefaultWorkspaceItemType(struct soap*, ns1__DefaultWorkspaceItemType *, const char*, const char*);

inline int soap_read_ns1__DefaultWorkspaceItemType(struct soap *soap, ns1__DefaultWorkspaceItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DefaultWorkspaceItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DefaultWorkspaceItemType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DefaultWorkspaceItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DefaultWorkspaceItemType(struct soap *soap, ns1__DefaultWorkspaceItemType *p)
{
	if (soap_read_ns1__DefaultWorkspaceItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DefaultWorkspaceRequestType_DEFINED
#define SOAP_TYPE_ns1__DefaultWorkspaceRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DefaultWorkspaceRequestType(struct soap*, const char*, int, const ns1__DefaultWorkspaceRequestType *, const char*);
SOAP_FMAC3 ns1__DefaultWorkspaceRequestType * SOAP_FMAC4 soap_in_ns1__DefaultWorkspaceRequestType(struct soap*, const char*, ns1__DefaultWorkspaceRequestType *, const char*);
SOAP_FMAC1 ns1__DefaultWorkspaceRequestType * SOAP_FMAC2 soap_instantiate_ns1__DefaultWorkspaceRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DefaultWorkspaceRequestType * soap_new_ns1__DefaultWorkspaceRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DefaultWorkspaceRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DefaultWorkspaceRequestType * soap_new_req_ns1__DefaultWorkspaceRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__DefaultWorkspaceRequestType *_p = soap_new_ns1__DefaultWorkspaceRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DefaultWorkspaceRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline ns1__DefaultWorkspaceRequestType * soap_new_set_ns1__DefaultWorkspaceRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__DefaultWorkspaceRequestType *_p = soap_new_ns1__DefaultWorkspaceRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DefaultWorkspaceRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline int soap_write_ns1__DefaultWorkspaceRequestType(struct soap *soap, ns1__DefaultWorkspaceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceRequestType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DefaultWorkspaceRequestType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceRequestType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DefaultWorkspaceRequestType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefaultWorkspaceRequestType", p->soap_type() == SOAP_TYPE_ns1__DefaultWorkspaceRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DefaultWorkspaceRequestType * SOAP_FMAC4 soap_get_ns1__DefaultWorkspaceRequestType(struct soap*, ns1__DefaultWorkspaceRequestType *, const char*, const char*);

inline int soap_read_ns1__DefaultWorkspaceRequestType(struct soap *soap, ns1__DefaultWorkspaceRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DefaultWorkspaceRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DefaultWorkspaceRequestType(struct soap *soap, const char *URL, ns1__DefaultWorkspaceRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DefaultWorkspaceRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DefaultWorkspaceRequestType(struct soap *soap, ns1__DefaultWorkspaceRequestType *p)
{
	if (soap_read_ns1__DefaultWorkspaceRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BriefInfoRequestType_DEFINED
#define SOAP_TYPE_ns1__BriefInfoRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BriefInfoRequestType(struct soap*, const char*, int, const ns1__BriefInfoRequestType *, const char*);
SOAP_FMAC3 ns1__BriefInfoRequestType * SOAP_FMAC4 soap_in_ns1__BriefInfoRequestType(struct soap*, const char*, ns1__BriefInfoRequestType *, const char*);
SOAP_FMAC1 ns1__BriefInfoRequestType * SOAP_FMAC2 soap_instantiate_ns1__BriefInfoRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BriefInfoRequestType * soap_new_ns1__BriefInfoRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BriefInfoRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BriefInfoRequestType * soap_new_req_ns1__BriefInfoRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__BriefInfoRequestType *_p = soap_new_ns1__BriefInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BriefInfoRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline ns1__BriefInfoRequestType * soap_new_set_ns1__BriefInfoRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__BriefInfoRequestType *_p = soap_new_ns1__BriefInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BriefInfoRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline int soap_write_ns1__BriefInfoRequestType(struct soap *soap, ns1__BriefInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BriefInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__BriefInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BriefInfoRequestType(struct soap *soap, const char *URL, ns1__BriefInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BriefInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__BriefInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BriefInfoRequestType(struct soap *soap, const char *URL, ns1__BriefInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BriefInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__BriefInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BriefInfoRequestType * SOAP_FMAC4 soap_get_ns1__BriefInfoRequestType(struct soap*, ns1__BriefInfoRequestType *, const char*, const char*);

inline int soap_read_ns1__BriefInfoRequestType(struct soap *soap, ns1__BriefInfoRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BriefInfoRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BriefInfoRequestType(struct soap *soap, const char *URL, ns1__BriefInfoRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BriefInfoRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BriefInfoRequestType(struct soap *soap, ns1__BriefInfoRequestType *p)
{
	if (soap_read_ns1__BriefInfoRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AgentsListReturnType_DEFINED
#define SOAP_TYPE_ns1__AgentsListReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AgentsListReturnType(struct soap*, const char*, int, const ns1__AgentsListReturnType *, const char*);
SOAP_FMAC3 ns1__AgentsListReturnType * SOAP_FMAC4 soap_in_ns1__AgentsListReturnType(struct soap*, const char*, ns1__AgentsListReturnType *, const char*);
SOAP_FMAC1 ns1__AgentsListReturnType * SOAP_FMAC2 soap_instantiate_ns1__AgentsListReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AgentsListReturnType * soap_new_ns1__AgentsListReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AgentsListReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__AgentsListReturnType * soap_new_req_ns1__AgentsListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__AgentsListDataItemType *> & returnArray)
{
	ns1__AgentsListReturnType *_p = soap_new_ns1__AgentsListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AgentsListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__AgentsListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline ns1__AgentsListReturnType * soap_new_set_ns1__AgentsListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__AgentsListDataItemType *> & returnArray)
{
	ns1__AgentsListReturnType *_p = soap_new_ns1__AgentsListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AgentsListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__AgentsListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__AgentsListReturnType(struct soap *soap, ns1__AgentsListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgentsListReturnType", p->soap_type() == SOAP_TYPE_ns1__AgentsListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AgentsListReturnType(struct soap *soap, const char *URL, ns1__AgentsListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgentsListReturnType", p->soap_type() == SOAP_TYPE_ns1__AgentsListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AgentsListReturnType(struct soap *soap, const char *URL, ns1__AgentsListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgentsListReturnType", p->soap_type() == SOAP_TYPE_ns1__AgentsListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AgentsListReturnType * SOAP_FMAC4 soap_get_ns1__AgentsListReturnType(struct soap*, ns1__AgentsListReturnType *, const char*, const char*);

inline int soap_read_ns1__AgentsListReturnType(struct soap *soap, ns1__AgentsListReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AgentsListReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AgentsListReturnType(struct soap *soap, const char *URL, ns1__AgentsListReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AgentsListReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AgentsListReturnType(struct soap *soap, ns1__AgentsListReturnType *p)
{
	if (soap_read_ns1__AgentsListReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AgentsListDataItemType_DEFINED
#define SOAP_TYPE_ns1__AgentsListDataItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AgentsListDataItemType(struct soap*, const char*, int, const ns1__AgentsListDataItemType *, const char*);
SOAP_FMAC3 ns1__AgentsListDataItemType * SOAP_FMAC4 soap_in_ns1__AgentsListDataItemType(struct soap*, const char*, ns1__AgentsListDataItemType *, const char*);
SOAP_FMAC1 ns1__AgentsListDataItemType * SOAP_FMAC2 soap_instantiate_ns1__AgentsListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AgentsListDataItemType * soap_new_ns1__AgentsListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AgentsListDataItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__AgentsListDataItemType * soap_new_req_ns1__AgentsListDataItemType(
	struct soap *soap,
	unsigned int agentId,
	const std::string& agentName,
	const std::string& agentNumber)
{
	ns1__AgentsListDataItemType *_p = soap_new_ns1__AgentsListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AgentsListDataItemType::agentId = agentId;
		_p->ns1__AgentsListDataItemType::agentName = agentName;
		_p->ns1__AgentsListDataItemType::agentNumber = agentNumber;
	}
	return _p;
}

inline ns1__AgentsListDataItemType * soap_new_set_ns1__AgentsListDataItemType(
	struct soap *soap,
	unsigned int agentId,
	const std::string& agentName,
	const std::string& agentNumber)
{
	ns1__AgentsListDataItemType *_p = soap_new_ns1__AgentsListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AgentsListDataItemType::agentId = agentId;
		_p->ns1__AgentsListDataItemType::agentName = agentName;
		_p->ns1__AgentsListDataItemType::agentNumber = agentNumber;
	}
	return _p;
}

inline int soap_write_ns1__AgentsListDataItemType(struct soap *soap, ns1__AgentsListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgentsListDataItemType", p->soap_type() == SOAP_TYPE_ns1__AgentsListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AgentsListDataItemType(struct soap *soap, const char *URL, ns1__AgentsListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgentsListDataItemType", p->soap_type() == SOAP_TYPE_ns1__AgentsListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AgentsListDataItemType(struct soap *soap, const char *URL, ns1__AgentsListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgentsListDataItemType", p->soap_type() == SOAP_TYPE_ns1__AgentsListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AgentsListDataItemType * SOAP_FMAC4 soap_get_ns1__AgentsListDataItemType(struct soap*, ns1__AgentsListDataItemType *, const char*, const char*);

inline int soap_read_ns1__AgentsListDataItemType(struct soap *soap, ns1__AgentsListDataItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AgentsListDataItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AgentsListDataItemType(struct soap *soap, const char *URL, ns1__AgentsListDataItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AgentsListDataItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AgentsListDataItemType(struct soap *soap, ns1__AgentsListDataItemType *p)
{
	if (soap_read_ns1__AgentsListDataItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GenListReturnType_DEFINED
#define SOAP_TYPE_ns1__GenListReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenListReturnType(struct soap*, const char*, int, const ns1__GenListReturnType *, const char*);
SOAP_FMAC3 ns1__GenListReturnType * SOAP_FMAC4 soap_in_ns1__GenListReturnType(struct soap*, const char*, ns1__GenListReturnType *, const char*);
SOAP_FMAC1 ns1__GenListReturnType * SOAP_FMAC2 soap_instantiate_ns1__GenListReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenListReturnType * soap_new_ns1__GenListReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenListReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__GenListReturnType * soap_new_req_ns1__GenListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader)
{
	ns1__GenListReturnType *_p = soap_new_ns1__GenListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenListReturnType::responseInfoHeader = responseInfoHeader;
	}
	return _p;
}

inline ns1__GenListReturnType * soap_new_set_ns1__GenListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__GenListDataItemType *> & returnArray)
{
	ns1__GenListReturnType *_p = soap_new_ns1__GenListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__GenListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__GenListReturnType(struct soap *soap, ns1__GenListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenListReturnType", p->soap_type() == SOAP_TYPE_ns1__GenListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenListReturnType(struct soap *soap, const char *URL, ns1__GenListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenListReturnType", p->soap_type() == SOAP_TYPE_ns1__GenListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenListReturnType(struct soap *soap, const char *URL, ns1__GenListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenListReturnType", p->soap_type() == SOAP_TYPE_ns1__GenListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenListReturnType * SOAP_FMAC4 soap_get_ns1__GenListReturnType(struct soap*, ns1__GenListReturnType *, const char*, const char*);

inline int soap_read_ns1__GenListReturnType(struct soap *soap, ns1__GenListReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GenListReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenListReturnType(struct soap *soap, const char *URL, ns1__GenListReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GenListReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GenListReturnType(struct soap *soap, ns1__GenListReturnType *p)
{
	if (soap_read_ns1__GenListReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GenListDataItemType_DEFINED
#define SOAP_TYPE_ns1__GenListDataItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenListDataItemType(struct soap*, const char*, int, const ns1__GenListDataItemType *, const char*);
SOAP_FMAC3 ns1__GenListDataItemType * SOAP_FMAC4 soap_in_ns1__GenListDataItemType(struct soap*, const char*, ns1__GenListDataItemType *, const char*);
SOAP_FMAC1 ns1__GenListDataItemType * SOAP_FMAC2 soap_instantiate_ns1__GenListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenListDataItemType * soap_new_ns1__GenListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenListDataItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__GenListDataItemType * soap_new_req_ns1__GenListDataItemType(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name)
{
	ns1__GenListDataItemType *_p = soap_new_ns1__GenListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenListDataItemType::Id = Id;
		_p->ns1__GenListDataItemType::Name = Name;
	}
	return _p;
}

inline ns1__GenListDataItemType * soap_new_set_ns1__GenListDataItemType(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name)
{
	ns1__GenListDataItemType *_p = soap_new_ns1__GenListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenListDataItemType::Id = Id;
		_p->ns1__GenListDataItemType::Name = Name;
	}
	return _p;
}

inline int soap_write_ns1__GenListDataItemType(struct soap *soap, ns1__GenListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenListDataItemType", p->soap_type() == SOAP_TYPE_ns1__GenListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenListDataItemType(struct soap *soap, const char *URL, ns1__GenListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenListDataItemType", p->soap_type() == SOAP_TYPE_ns1__GenListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenListDataItemType(struct soap *soap, const char *URL, ns1__GenListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenListDataItemType", p->soap_type() == SOAP_TYPE_ns1__GenListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenListDataItemType * SOAP_FMAC4 soap_get_ns1__GenListDataItemType(struct soap*, ns1__GenListDataItemType *, const char*, const char*);

inline int soap_read_ns1__GenListDataItemType(struct soap *soap, ns1__GenListDataItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GenListDataItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenListDataItemType(struct soap *soap, const char *URL, ns1__GenListDataItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GenListDataItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GenListDataItemType(struct soap *soap, ns1__GenListDataItemType *p)
{
	if (soap_read_ns1__GenListDataItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GroupListReturnType_DEFINED
#define SOAP_TYPE_ns1__GroupListReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GroupListReturnType(struct soap*, const char*, int, const ns1__GroupListReturnType *, const char*);
SOAP_FMAC3 ns1__GroupListReturnType * SOAP_FMAC4 soap_in_ns1__GroupListReturnType(struct soap*, const char*, ns1__GroupListReturnType *, const char*);
SOAP_FMAC1 ns1__GroupListReturnType * SOAP_FMAC2 soap_instantiate_ns1__GroupListReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GroupListReturnType * soap_new_ns1__GroupListReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GroupListReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__GroupListReturnType * soap_new_req_ns1__GroupListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__GroupListDataItemType *> & returnArray)
{
	ns1__GroupListReturnType *_p = soap_new_ns1__GroupListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GroupListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__GroupListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline ns1__GroupListReturnType * soap_new_set_ns1__GroupListReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__GroupListDataItemType *> & returnArray)
{
	ns1__GroupListReturnType *_p = soap_new_ns1__GroupListReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GroupListReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__GroupListReturnType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__GroupListReturnType(struct soap *soap, ns1__GroupListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupListReturnType", p->soap_type() == SOAP_TYPE_ns1__GroupListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GroupListReturnType(struct soap *soap, const char *URL, ns1__GroupListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupListReturnType", p->soap_type() == SOAP_TYPE_ns1__GroupListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GroupListReturnType(struct soap *soap, const char *URL, ns1__GroupListReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupListReturnType", p->soap_type() == SOAP_TYPE_ns1__GroupListReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GroupListReturnType * SOAP_FMAC4 soap_get_ns1__GroupListReturnType(struct soap*, ns1__GroupListReturnType *, const char*, const char*);

inline int soap_read_ns1__GroupListReturnType(struct soap *soap, ns1__GroupListReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GroupListReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GroupListReturnType(struct soap *soap, const char *URL, ns1__GroupListReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GroupListReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GroupListReturnType(struct soap *soap, ns1__GroupListReturnType *p)
{
	if (soap_read_ns1__GroupListReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GroupListDataItemType_DEFINED
#define SOAP_TYPE_ns1__GroupListDataItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GroupListDataItemType(struct soap*, const char*, int, const ns1__GroupListDataItemType *, const char*);
SOAP_FMAC3 ns1__GroupListDataItemType * SOAP_FMAC4 soap_in_ns1__GroupListDataItemType(struct soap*, const char*, ns1__GroupListDataItemType *, const char*);
SOAP_FMAC1 ns1__GroupListDataItemType * SOAP_FMAC2 soap_instantiate_ns1__GroupListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GroupListDataItemType * soap_new_ns1__GroupListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GroupListDataItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__GroupListDataItemType * soap_new_req_ns1__GroupListDataItemType(
	struct soap *soap,
	unsigned int grpId,
	const std::string& grpName,
	const std::string& grpNumber,
	unsigned int grpEmailEnable)
{
	ns1__GroupListDataItemType *_p = soap_new_ns1__GroupListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GroupListDataItemType::grpId = grpId;
		_p->ns1__GroupListDataItemType::grpName = grpName;
		_p->ns1__GroupListDataItemType::grpNumber = grpNumber;
		_p->ns1__GroupListDataItemType::grpEmailEnable = grpEmailEnable;
	}
	return _p;
}

inline ns1__GroupListDataItemType * soap_new_set_ns1__GroupListDataItemType(
	struct soap *soap,
	unsigned int grpId,
	const std::string& grpName,
	const std::string& grpNumber,
	unsigned int grpEmailEnable)
{
	ns1__GroupListDataItemType *_p = soap_new_ns1__GroupListDataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GroupListDataItemType::grpId = grpId;
		_p->ns1__GroupListDataItemType::grpName = grpName;
		_p->ns1__GroupListDataItemType::grpNumber = grpNumber;
		_p->ns1__GroupListDataItemType::grpEmailEnable = grpEmailEnable;
	}
	return _p;
}

inline int soap_write_ns1__GroupListDataItemType(struct soap *soap, ns1__GroupListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupListDataItemType", p->soap_type() == SOAP_TYPE_ns1__GroupListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GroupListDataItemType(struct soap *soap, const char *URL, ns1__GroupListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupListDataItemType", p->soap_type() == SOAP_TYPE_ns1__GroupListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GroupListDataItemType(struct soap *soap, const char *URL, ns1__GroupListDataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupListDataItemType", p->soap_type() == SOAP_TYPE_ns1__GroupListDataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GroupListDataItemType * SOAP_FMAC4 soap_get_ns1__GroupListDataItemType(struct soap*, ns1__GroupListDataItemType *, const char*, const char*);

inline int soap_read_ns1__GroupListDataItemType(struct soap *soap, ns1__GroupListDataItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GroupListDataItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GroupListDataItemType(struct soap *soap, const char *URL, ns1__GroupListDataItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GroupListDataItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GroupListDataItemType(struct soap *soap, ns1__GroupListDataItemType *p)
{
	if (soap_read_ns1__GroupListDataItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GenRequestType_DEFINED
#define SOAP_TYPE_ns1__GenRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenRequestType(struct soap*, const char*, int, const ns1__GenRequestType *, const char*);
SOAP_FMAC3 ns1__GenRequestType * SOAP_FMAC4 soap_in_ns1__GenRequestType(struct soap*, const char*, ns1__GenRequestType *, const char*);
SOAP_FMAC1 ns1__GenRequestType * SOAP_FMAC2 soap_instantiate_ns1__GenRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenRequestType * soap_new_ns1__GenRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GenRequestType * soap_new_req_ns1__GenRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__GenRequestType *_p = soap_new_ns1__GenRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline ns1__GenRequestType * soap_new_set_ns1__GenRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader)
{
	ns1__GenRequestType *_p = soap_new_ns1__GenRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenRequestType::requestInfoHeader = requestInfoHeader;
	}
	return _p;
}

inline int soap_write_ns1__GenRequestType(struct soap *soap, ns1__GenRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenRequestType", p->soap_type() == SOAP_TYPE_ns1__GenRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenRequestType(struct soap *soap, const char *URL, ns1__GenRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenRequestType", p->soap_type() == SOAP_TYPE_ns1__GenRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenRequestType(struct soap *soap, const char *URL, ns1__GenRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenRequestType", p->soap_type() == SOAP_TYPE_ns1__GenRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenRequestType * SOAP_FMAC4 soap_get_ns1__GenRequestType(struct soap*, ns1__GenRequestType *, const char*, const char*);

inline int soap_read_ns1__GenRequestType(struct soap *soap, ns1__GenRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GenRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenRequestType(struct soap *soap, const char *URL, ns1__GenRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GenRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GenRequestType(struct soap *soap, ns1__GenRequestType *p)
{
	if (soap_read_ns1__GenRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LoginReturnType_DEFINED
#define SOAP_TYPE_ns1__LoginReturnType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LoginReturnType(struct soap*, const char*, int, const ns1__LoginReturnType *, const char*);
SOAP_FMAC3 ns1__LoginReturnType * SOAP_FMAC4 soap_in_ns1__LoginReturnType(struct soap*, const char*, ns1__LoginReturnType *, const char*);
SOAP_FMAC1 ns1__LoginReturnType * SOAP_FMAC2 soap_instantiate_ns1__LoginReturnType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LoginReturnType * soap_new_ns1__LoginReturnType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LoginReturnType(soap, n, NULL, NULL, NULL);
}

inline ns1__LoginReturnType * soap_new_req_ns1__LoginReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::string& ticket,
	unsigned int loginEnable,
	unsigned int supLevel)
{
	ns1__LoginReturnType *_p = soap_new_ns1__LoginReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__LoginReturnType::ticket = ticket;
		_p->ns1__LoginReturnType::loginEnable = loginEnable;
		_p->ns1__LoginReturnType::supLevel = supLevel;
	}
	return _p;
}

inline ns1__LoginReturnType * soap_new_set_ns1__LoginReturnType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::string& ticket,
	unsigned int loginEnable,
	unsigned int supLevel)
{
	ns1__LoginReturnType *_p = soap_new_ns1__LoginReturnType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginReturnType::responseInfoHeader = responseInfoHeader;
		_p->ns1__LoginReturnType::ticket = ticket;
		_p->ns1__LoginReturnType::loginEnable = loginEnable;
		_p->ns1__LoginReturnType::supLevel = supLevel;
	}
	return _p;
}

inline int soap_write_ns1__LoginReturnType(struct soap *soap, ns1__LoginReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginReturnType", p->soap_type() == SOAP_TYPE_ns1__LoginReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LoginReturnType(struct soap *soap, const char *URL, ns1__LoginReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginReturnType", p->soap_type() == SOAP_TYPE_ns1__LoginReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LoginReturnType(struct soap *soap, const char *URL, ns1__LoginReturnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginReturnType", p->soap_type() == SOAP_TYPE_ns1__LoginReturnType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LoginReturnType * SOAP_FMAC4 soap_get_ns1__LoginReturnType(struct soap*, ns1__LoginReturnType *, const char*, const char*);

inline int soap_read_ns1__LoginReturnType(struct soap *soap, ns1__LoginReturnType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LoginReturnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LoginReturnType(struct soap *soap, const char *URL, ns1__LoginReturnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LoginReturnType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LoginReturnType(struct soap *soap, ns1__LoginReturnType *p)
{
	if (soap_read_ns1__LoginReturnType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LoginRequestType_DEFINED
#define SOAP_TYPE_ns1__LoginRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LoginRequestType(struct soap*, const char*, int, const ns1__LoginRequestType *, const char*);
SOAP_FMAC3 ns1__LoginRequestType * SOAP_FMAC4 soap_in_ns1__LoginRequestType(struct soap*, const char*, ns1__LoginRequestType *, const char*);
SOAP_FMAC1 ns1__LoginRequestType * SOAP_FMAC2 soap_instantiate_ns1__LoginRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LoginRequestType * soap_new_ns1__LoginRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LoginRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__LoginRequestType * soap_new_req_ns1__LoginRequestType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& applicationId,
	const std::string& name,
	const std::string& pass,
	const std::string& session_id,
	const std::string& ip_address)
{
	ns1__LoginRequestType *_p = soap_new_ns1__LoginRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginRequestType::serviceReqId = serviceReqId;
		_p->ns1__LoginRequestType::applicationId = applicationId;
		_p->ns1__LoginRequestType::name = name;
		_p->ns1__LoginRequestType::pass = pass;
		_p->ns1__LoginRequestType::session_id = session_id;
		_p->ns1__LoginRequestType::ip_address = ip_address;
	}
	return _p;
}

inline ns1__LoginRequestType * soap_new_set_ns1__LoginRequestType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& applicationId,
	const std::string& name,
	const std::string& pass,
	const std::string& session_id,
	const std::string& ip_address)
{
	ns1__LoginRequestType *_p = soap_new_ns1__LoginRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginRequestType::serviceReqId = serviceReqId;
		_p->ns1__LoginRequestType::applicationId = applicationId;
		_p->ns1__LoginRequestType::name = name;
		_p->ns1__LoginRequestType::pass = pass;
		_p->ns1__LoginRequestType::session_id = session_id;
		_p->ns1__LoginRequestType::ip_address = ip_address;
	}
	return _p;
}

inline int soap_write_ns1__LoginRequestType(struct soap *soap, ns1__LoginRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginRequestType", p->soap_type() == SOAP_TYPE_ns1__LoginRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LoginRequestType(struct soap *soap, const char *URL, ns1__LoginRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginRequestType", p->soap_type() == SOAP_TYPE_ns1__LoginRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LoginRequestType(struct soap *soap, const char *URL, ns1__LoginRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginRequestType", p->soap_type() == SOAP_TYPE_ns1__LoginRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LoginRequestType * SOAP_FMAC4 soap_get_ns1__LoginRequestType(struct soap*, ns1__LoginRequestType *, const char*, const char*);

inline int soap_read_ns1__LoginRequestType(struct soap *soap, ns1__LoginRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LoginRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LoginRequestType(struct soap *soap, const char *URL, ns1__LoginRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LoginRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LoginRequestType(struct soap *soap, ns1__LoginRequestType *p)
{
	if (soap_read_ns1__LoginRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReturnMatrixDataTypeBG_DEFINED
#define SOAP_TYPE_ns1__ReturnMatrixDataTypeBG_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReturnMatrixDataTypeBG(struct soap*, const char*, int, const ns1__ReturnMatrixDataTypeBG *, const char*);
SOAP_FMAC3 ns1__ReturnMatrixDataTypeBG * SOAP_FMAC4 soap_in_ns1__ReturnMatrixDataTypeBG(struct soap*, const char*, ns1__ReturnMatrixDataTypeBG *, const char*);
SOAP_FMAC1 ns1__ReturnMatrixDataTypeBG * SOAP_FMAC2 soap_instantiate_ns1__ReturnMatrixDataTypeBG(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReturnMatrixDataTypeBG * soap_new_ns1__ReturnMatrixDataTypeBG(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReturnMatrixDataTypeBG(soap, n, NULL, NULL, NULL);
}

inline ns1__ReturnMatrixDataTypeBG * soap_new_req_ns1__ReturnMatrixDataTypeBG(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader)
{
	ns1__ReturnMatrixDataTypeBG *_p = soap_new_ns1__ReturnMatrixDataTypeBG(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnMatrixDataTypeBG::responseInfoHeader = responseInfoHeader;
	}
	return _p;
}

inline ns1__ReturnMatrixDataTypeBG * soap_new_set_ns1__ReturnMatrixDataTypeBG(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__DataItemRow *> & returnMatrix)
{
	ns1__ReturnMatrixDataTypeBG *_p = soap_new_ns1__ReturnMatrixDataTypeBG(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnMatrixDataTypeBG::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReturnMatrixDataTypeBG::returnMatrix = returnMatrix;
	}
	return _p;
}

inline int soap_write_ns1__ReturnMatrixDataTypeBG(struct soap *soap, ns1__ReturnMatrixDataTypeBG const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypeBG", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypeBG ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReturnMatrixDataTypeBG(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypeBG const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypeBG", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypeBG ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReturnMatrixDataTypeBG(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypeBG const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypeBG", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypeBG ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReturnMatrixDataTypeBG * SOAP_FMAC4 soap_get_ns1__ReturnMatrixDataTypeBG(struct soap*, ns1__ReturnMatrixDataTypeBG *, const char*, const char*);

inline int soap_read_ns1__ReturnMatrixDataTypeBG(struct soap *soap, ns1__ReturnMatrixDataTypeBG *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReturnMatrixDataTypeBG(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReturnMatrixDataTypeBG(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypeBG *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReturnMatrixDataTypeBG(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReturnMatrixDataTypeBG(struct soap *soap, ns1__ReturnMatrixDataTypeBG *p)
{
	if (soap_read_ns1__ReturnMatrixDataTypeBG(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReturnMatrixDataTypePerSuperGroup_DEFINED
#define SOAP_TYPE_ns1__ReturnMatrixDataTypePerSuperGroup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap*, const char*, int, const ns1__ReturnMatrixDataTypePerSuperGroup *, const char*);
SOAP_FMAC3 ns1__ReturnMatrixDataTypePerSuperGroup * SOAP_FMAC4 soap_in_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap*, const char*, ns1__ReturnMatrixDataTypePerSuperGroup *, const char*);
SOAP_FMAC1 ns1__ReturnMatrixDataTypePerSuperGroup * SOAP_FMAC2 soap_instantiate_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReturnMatrixDataTypePerSuperGroup * soap_new_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReturnMatrixDataTypePerSuperGroup(soap, n, NULL, NULL, NULL);
}

inline ns1__ReturnMatrixDataTypePerSuperGroup * soap_new_req_ns1__ReturnMatrixDataTypePerSuperGroup(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__returnDataRowsPerSuperGroup *> & returnDataRowsPerSuperGroup)
{
	ns1__ReturnMatrixDataTypePerSuperGroup *_p = soap_new_ns1__ReturnMatrixDataTypePerSuperGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnMatrixDataTypePerSuperGroup::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReturnMatrixDataTypePerSuperGroup::returnDataRowsPerSuperGroup = returnDataRowsPerSuperGroup;
	}
	return _p;
}

inline ns1__ReturnMatrixDataTypePerSuperGroup * soap_new_set_ns1__ReturnMatrixDataTypePerSuperGroup(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__returnDataRowsPerSuperGroup *> & returnDataRowsPerSuperGroup)
{
	ns1__ReturnMatrixDataTypePerSuperGroup *_p = soap_new_ns1__ReturnMatrixDataTypePerSuperGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnMatrixDataTypePerSuperGroup::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReturnMatrixDataTypePerSuperGroup::returnDataRowsPerSuperGroup = returnDataRowsPerSuperGroup;
	}
	return _p;
}

inline int soap_write_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap *soap, ns1__ReturnMatrixDataTypePerSuperGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypePerSuperGroup", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypePerSuperGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypePerSuperGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypePerSuperGroup", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypePerSuperGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypePerSuperGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypePerSuperGroup", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypePerSuperGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReturnMatrixDataTypePerSuperGroup * SOAP_FMAC4 soap_get_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap*, ns1__ReturnMatrixDataTypePerSuperGroup *, const char*, const char*);

inline int soap_read_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap *soap, ns1__ReturnMatrixDataTypePerSuperGroup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReturnMatrixDataTypePerSuperGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypePerSuperGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReturnMatrixDataTypePerSuperGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReturnMatrixDataTypePerSuperGroup(struct soap *soap, ns1__ReturnMatrixDataTypePerSuperGroup *p)
{
	if (soap_read_ns1__ReturnMatrixDataTypePerSuperGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__returnDataRowsPerSuperGroup_DEFINED
#define SOAP_TYPE_ns1__returnDataRowsPerSuperGroup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__returnDataRowsPerSuperGroup(struct soap*, const char*, int, const ns1__returnDataRowsPerSuperGroup *, const char*);
SOAP_FMAC3 ns1__returnDataRowsPerSuperGroup * SOAP_FMAC4 soap_in_ns1__returnDataRowsPerSuperGroup(struct soap*, const char*, ns1__returnDataRowsPerSuperGroup *, const char*);
SOAP_FMAC1 ns1__returnDataRowsPerSuperGroup * SOAP_FMAC2 soap_instantiate_ns1__returnDataRowsPerSuperGroup(struct soap*, int, const char*, const char*, size_t*);

inline ns1__returnDataRowsPerSuperGroup * soap_new_ns1__returnDataRowsPerSuperGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__returnDataRowsPerSuperGroup(soap, n, NULL, NULL, NULL);
}

inline ns1__returnDataRowsPerSuperGroup * soap_new_req_ns1__returnDataRowsPerSuperGroup(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name)
{
	ns1__returnDataRowsPerSuperGroup *_p = soap_new_ns1__returnDataRowsPerSuperGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__returnDataRowsPerSuperGroup::Id = Id;
		_p->ns1__returnDataRowsPerSuperGroup::Name = Name;
	}
	return _p;
}

inline ns1__returnDataRowsPerSuperGroup * soap_new_set_ns1__returnDataRowsPerSuperGroup(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name,
	const std::vector<ns1__DataItemRow *> & returnMatrix)
{
	ns1__returnDataRowsPerSuperGroup *_p = soap_new_ns1__returnDataRowsPerSuperGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__returnDataRowsPerSuperGroup::Id = Id;
		_p->ns1__returnDataRowsPerSuperGroup::Name = Name;
		_p->ns1__returnDataRowsPerSuperGroup::returnMatrix = returnMatrix;
	}
	return _p;
}

inline int soap_write_ns1__returnDataRowsPerSuperGroup(struct soap *soap, ns1__returnDataRowsPerSuperGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:returnDataRowsPerSuperGroup", p->soap_type() == SOAP_TYPE_ns1__returnDataRowsPerSuperGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__returnDataRowsPerSuperGroup(struct soap *soap, const char *URL, ns1__returnDataRowsPerSuperGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:returnDataRowsPerSuperGroup", p->soap_type() == SOAP_TYPE_ns1__returnDataRowsPerSuperGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__returnDataRowsPerSuperGroup(struct soap *soap, const char *URL, ns1__returnDataRowsPerSuperGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:returnDataRowsPerSuperGroup", p->soap_type() == SOAP_TYPE_ns1__returnDataRowsPerSuperGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__returnDataRowsPerSuperGroup * SOAP_FMAC4 soap_get_ns1__returnDataRowsPerSuperGroup(struct soap*, ns1__returnDataRowsPerSuperGroup *, const char*, const char*);

inline int soap_read_ns1__returnDataRowsPerSuperGroup(struct soap *soap, ns1__returnDataRowsPerSuperGroup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__returnDataRowsPerSuperGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__returnDataRowsPerSuperGroup(struct soap *soap, const char *URL, ns1__returnDataRowsPerSuperGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__returnDataRowsPerSuperGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__returnDataRowsPerSuperGroup(struct soap *soap, ns1__returnDataRowsPerSuperGroup *p)
{
	if (soap_read_ns1__returnDataRowsPerSuperGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReturnMatrixDataTypePerGroup_DEFINED
#define SOAP_TYPE_ns1__ReturnMatrixDataTypePerGroup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReturnMatrixDataTypePerGroup(struct soap*, const char*, int, const ns1__ReturnMatrixDataTypePerGroup *, const char*);
SOAP_FMAC3 ns1__ReturnMatrixDataTypePerGroup * SOAP_FMAC4 soap_in_ns1__ReturnMatrixDataTypePerGroup(struct soap*, const char*, ns1__ReturnMatrixDataTypePerGroup *, const char*);
SOAP_FMAC1 ns1__ReturnMatrixDataTypePerGroup * SOAP_FMAC2 soap_instantiate_ns1__ReturnMatrixDataTypePerGroup(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReturnMatrixDataTypePerGroup * soap_new_ns1__ReturnMatrixDataTypePerGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReturnMatrixDataTypePerGroup(soap, n, NULL, NULL, NULL);
}

inline ns1__ReturnMatrixDataTypePerGroup * soap_new_req_ns1__ReturnMatrixDataTypePerGroup(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__returnDataRowsPerGroup *> & returnDataRowsPerGroup)
{
	ns1__ReturnMatrixDataTypePerGroup *_p = soap_new_ns1__ReturnMatrixDataTypePerGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnMatrixDataTypePerGroup::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReturnMatrixDataTypePerGroup::returnDataRowsPerGroup = returnDataRowsPerGroup;
	}
	return _p;
}

inline ns1__ReturnMatrixDataTypePerGroup * soap_new_set_ns1__ReturnMatrixDataTypePerGroup(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__returnDataRowsPerGroup *> & returnDataRowsPerGroup)
{
	ns1__ReturnMatrixDataTypePerGroup *_p = soap_new_ns1__ReturnMatrixDataTypePerGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnMatrixDataTypePerGroup::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReturnMatrixDataTypePerGroup::returnDataRowsPerGroup = returnDataRowsPerGroup;
	}
	return _p;
}

inline int soap_write_ns1__ReturnMatrixDataTypePerGroup(struct soap *soap, ns1__ReturnMatrixDataTypePerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypePerGroup", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypePerGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReturnMatrixDataTypePerGroup(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypePerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypePerGroup", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypePerGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReturnMatrixDataTypePerGroup(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypePerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnMatrixDataTypePerGroup", p->soap_type() == SOAP_TYPE_ns1__ReturnMatrixDataTypePerGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReturnMatrixDataTypePerGroup * SOAP_FMAC4 soap_get_ns1__ReturnMatrixDataTypePerGroup(struct soap*, ns1__ReturnMatrixDataTypePerGroup *, const char*, const char*);

inline int soap_read_ns1__ReturnMatrixDataTypePerGroup(struct soap *soap, ns1__ReturnMatrixDataTypePerGroup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReturnMatrixDataTypePerGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReturnMatrixDataTypePerGroup(struct soap *soap, const char *URL, ns1__ReturnMatrixDataTypePerGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReturnMatrixDataTypePerGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReturnMatrixDataTypePerGroup(struct soap *soap, ns1__ReturnMatrixDataTypePerGroup *p)
{
	if (soap_read_ns1__ReturnMatrixDataTypePerGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__returnDataRowsPerGroup_DEFINED
#define SOAP_TYPE_ns1__returnDataRowsPerGroup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__returnDataRowsPerGroup(struct soap*, const char*, int, const ns1__returnDataRowsPerGroup *, const char*);
SOAP_FMAC3 ns1__returnDataRowsPerGroup * SOAP_FMAC4 soap_in_ns1__returnDataRowsPerGroup(struct soap*, const char*, ns1__returnDataRowsPerGroup *, const char*);
SOAP_FMAC1 ns1__returnDataRowsPerGroup * SOAP_FMAC2 soap_instantiate_ns1__returnDataRowsPerGroup(struct soap*, int, const char*, const char*, size_t*);

inline ns1__returnDataRowsPerGroup * soap_new_ns1__returnDataRowsPerGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__returnDataRowsPerGroup(soap, n, NULL, NULL, NULL);
}

inline ns1__returnDataRowsPerGroup * soap_new_req_ns1__returnDataRowsPerGroup(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name)
{
	ns1__returnDataRowsPerGroup *_p = soap_new_ns1__returnDataRowsPerGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__returnDataRowsPerGroup::Id = Id;
		_p->ns1__returnDataRowsPerGroup::Name = Name;
	}
	return _p;
}

inline ns1__returnDataRowsPerGroup * soap_new_set_ns1__returnDataRowsPerGroup(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name,
	const std::vector<ns1__DataItemRow *> & returnMatrix)
{
	ns1__returnDataRowsPerGroup *_p = soap_new_ns1__returnDataRowsPerGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__returnDataRowsPerGroup::Id = Id;
		_p->ns1__returnDataRowsPerGroup::Name = Name;
		_p->ns1__returnDataRowsPerGroup::returnMatrix = returnMatrix;
	}
	return _p;
}

inline int soap_write_ns1__returnDataRowsPerGroup(struct soap *soap, ns1__returnDataRowsPerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:returnDataRowsPerGroup", p->soap_type() == SOAP_TYPE_ns1__returnDataRowsPerGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__returnDataRowsPerGroup(struct soap *soap, const char *URL, ns1__returnDataRowsPerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:returnDataRowsPerGroup", p->soap_type() == SOAP_TYPE_ns1__returnDataRowsPerGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__returnDataRowsPerGroup(struct soap *soap, const char *URL, ns1__returnDataRowsPerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:returnDataRowsPerGroup", p->soap_type() == SOAP_TYPE_ns1__returnDataRowsPerGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__returnDataRowsPerGroup * SOAP_FMAC4 soap_get_ns1__returnDataRowsPerGroup(struct soap*, ns1__returnDataRowsPerGroup *, const char*, const char*);

inline int soap_read_ns1__returnDataRowsPerGroup(struct soap *soap, ns1__returnDataRowsPerGroup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__returnDataRowsPerGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__returnDataRowsPerGroup(struct soap *soap, const char *URL, ns1__returnDataRowsPerGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__returnDataRowsPerGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__returnDataRowsPerGroup(struct soap *soap, ns1__returnDataRowsPerGroup *p)
{
	if (soap_read_ns1__returnDataRowsPerGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReturnArrayDataType_DEFINED
#define SOAP_TYPE_ns1__ReturnArrayDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReturnArrayDataType(struct soap*, const char*, int, const ns1__ReturnArrayDataType *, const char*);
SOAP_FMAC3 ns1__ReturnArrayDataType * SOAP_FMAC4 soap_in_ns1__ReturnArrayDataType(struct soap*, const char*, ns1__ReturnArrayDataType *, const char*);
SOAP_FMAC1 ns1__ReturnArrayDataType * SOAP_FMAC2 soap_instantiate_ns1__ReturnArrayDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReturnArrayDataType * soap_new_ns1__ReturnArrayDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReturnArrayDataType(soap, n, NULL, NULL, NULL);
}

inline ns1__ReturnArrayDataType * soap_new_req_ns1__ReturnArrayDataType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__BlockItemType *> & returnArrayOfBlocks)
{
	ns1__ReturnArrayDataType *_p = soap_new_ns1__ReturnArrayDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnArrayDataType::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReturnArrayDataType::returnArrayOfBlocks = returnArrayOfBlocks;
	}
	return _p;
}

inline ns1__ReturnArrayDataType * soap_new_set_ns1__ReturnArrayDataType(
	struct soap *soap,
	ns1__ResponseInfoHeaderType *responseInfoHeader,
	const std::vector<ns1__BlockItemType *> & returnArrayOfBlocks)
{
	ns1__ReturnArrayDataType *_p = soap_new_ns1__ReturnArrayDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReturnArrayDataType::responseInfoHeader = responseInfoHeader;
		_p->ns1__ReturnArrayDataType::returnArrayOfBlocks = returnArrayOfBlocks;
	}
	return _p;
}

inline int soap_write_ns1__ReturnArrayDataType(struct soap *soap, ns1__ReturnArrayDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnArrayDataType", p->soap_type() == SOAP_TYPE_ns1__ReturnArrayDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReturnArrayDataType(struct soap *soap, const char *URL, ns1__ReturnArrayDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnArrayDataType", p->soap_type() == SOAP_TYPE_ns1__ReturnArrayDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReturnArrayDataType(struct soap *soap, const char *URL, ns1__ReturnArrayDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReturnArrayDataType", p->soap_type() == SOAP_TYPE_ns1__ReturnArrayDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReturnArrayDataType * SOAP_FMAC4 soap_get_ns1__ReturnArrayDataType(struct soap*, ns1__ReturnArrayDataType *, const char*, const char*);

inline int soap_read_ns1__ReturnArrayDataType(struct soap *soap, ns1__ReturnArrayDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReturnArrayDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReturnArrayDataType(struct soap *soap, const char *URL, ns1__ReturnArrayDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReturnArrayDataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReturnArrayDataType(struct soap *soap, ns1__ReturnArrayDataType *p)
{
	if (soap_read_ns1__ReturnArrayDataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BlockItemType_DEFINED
#define SOAP_TYPE_ns1__BlockItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BlockItemType(struct soap*, const char*, int, const ns1__BlockItemType *, const char*);
SOAP_FMAC3 ns1__BlockItemType * SOAP_FMAC4 soap_in_ns1__BlockItemType(struct soap*, const char*, ns1__BlockItemType *, const char*);
SOAP_FMAC1 ns1__BlockItemType * SOAP_FMAC2 soap_instantiate_ns1__BlockItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BlockItemType * soap_new_ns1__BlockItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BlockItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__BlockItemType * soap_new_req_ns1__BlockItemType(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name,
	const std::vector<ns1__DataItemType *> & returnArray)
{
	ns1__BlockItemType *_p = soap_new_ns1__BlockItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BlockItemType::Id = Id;
		_p->ns1__BlockItemType::Name = Name;
		_p->ns1__BlockItemType::returnArray = returnArray;
	}
	return _p;
}

inline ns1__BlockItemType * soap_new_set_ns1__BlockItemType(
	struct soap *soap,
	unsigned int Id,
	const std::string& Name,
	const std::vector<ns1__DataItemType *> & returnArray)
{
	ns1__BlockItemType *_p = soap_new_ns1__BlockItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BlockItemType::Id = Id;
		_p->ns1__BlockItemType::Name = Name;
		_p->ns1__BlockItemType::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__BlockItemType(struct soap *soap, ns1__BlockItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlockItemType", p->soap_type() == SOAP_TYPE_ns1__BlockItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BlockItemType(struct soap *soap, const char *URL, ns1__BlockItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlockItemType", p->soap_type() == SOAP_TYPE_ns1__BlockItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BlockItemType(struct soap *soap, const char *URL, ns1__BlockItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlockItemType", p->soap_type() == SOAP_TYPE_ns1__BlockItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BlockItemType * SOAP_FMAC4 soap_get_ns1__BlockItemType(struct soap*, ns1__BlockItemType *, const char*, const char*);

inline int soap_read_ns1__BlockItemType(struct soap *soap, ns1__BlockItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BlockItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BlockItemType(struct soap *soap, const char *URL, ns1__BlockItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BlockItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BlockItemType(struct soap *soap, ns1__BlockItemType *p)
{
	if (soap_read_ns1__BlockItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DataItemRow_DEFINED
#define SOAP_TYPE_ns1__DataItemRow_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataItemRow(struct soap*, const char*, int, const ns1__DataItemRow *, const char*);
SOAP_FMAC3 ns1__DataItemRow * SOAP_FMAC4 soap_in_ns1__DataItemRow(struct soap*, const char*, ns1__DataItemRow *, const char*);
SOAP_FMAC1 ns1__DataItemRow * SOAP_FMAC2 soap_instantiate_ns1__DataItemRow(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DataItemRow * soap_new_ns1__DataItemRow(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DataItemRow(soap, n, NULL, NULL, NULL);
}

inline ns1__DataItemRow * soap_new_req_ns1__DataItemRow(
	struct soap *soap,
	const std::vector<ns1__DataItemType *> & returnArray)
{
	ns1__DataItemRow *_p = soap_new_ns1__DataItemRow(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DataItemRow::returnArray = returnArray;
	}
	return _p;
}

inline ns1__DataItemRow * soap_new_set_ns1__DataItemRow(
	struct soap *soap,
	const std::vector<ns1__DataItemType *> & returnArray)
{
	ns1__DataItemRow *_p = soap_new_ns1__DataItemRow(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DataItemRow::returnArray = returnArray;
	}
	return _p;
}

inline int soap_write_ns1__DataItemRow(struct soap *soap, ns1__DataItemRow const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItemRow", p->soap_type() == SOAP_TYPE_ns1__DataItemRow ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DataItemRow(struct soap *soap, const char *URL, ns1__DataItemRow const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItemRow", p->soap_type() == SOAP_TYPE_ns1__DataItemRow ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DataItemRow(struct soap *soap, const char *URL, ns1__DataItemRow const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItemRow", p->soap_type() == SOAP_TYPE_ns1__DataItemRow ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DataItemRow * SOAP_FMAC4 soap_get_ns1__DataItemRow(struct soap*, ns1__DataItemRow *, const char*, const char*);

inline int soap_read_ns1__DataItemRow(struct soap *soap, ns1__DataItemRow *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DataItemRow(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DataItemRow(struct soap *soap, const char *URL, ns1__DataItemRow *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DataItemRow(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DataItemRow(struct soap *soap, ns1__DataItemRow *p)
{
	if (soap_read_ns1__DataItemRow(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DataItemType_DEFINED
#define SOAP_TYPE_ns1__DataItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataItemType(struct soap*, const char*, int, const ns1__DataItemType *, const char*);
SOAP_FMAC3 ns1__DataItemType * SOAP_FMAC4 soap_in_ns1__DataItemType(struct soap*, const char*, ns1__DataItemType *, const char*);
SOAP_FMAC1 ns1__DataItemType * SOAP_FMAC2 soap_instantiate_ns1__DataItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DataItemType * soap_new_ns1__DataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DataItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__DataItemType * soap_new_req_ns1__DataItemType(
	struct soap *soap,
	const std::string& ersid,
	const std::string& value,
	const std::string& ersname)
{
	ns1__DataItemType *_p = soap_new_ns1__DataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DataItemType::ersid = ersid;
		_p->ns1__DataItemType::value = value;
		_p->ns1__DataItemType::ersname = ersname;
	}
	return _p;
}

inline ns1__DataItemType * soap_new_set_ns1__DataItemType(
	struct soap *soap,
	const std::string& ersid,
	const std::string& value,
	const std::string& ersname,
	unsigned int *bgcolor)
{
	ns1__DataItemType *_p = soap_new_ns1__DataItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DataItemType::ersid = ersid;
		_p->ns1__DataItemType::value = value;
		_p->ns1__DataItemType::ersname = ersname;
		_p->ns1__DataItemType::bgcolor = bgcolor;
	}
	return _p;
}

inline int soap_write_ns1__DataItemType(struct soap *soap, ns1__DataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItemType", p->soap_type() == SOAP_TYPE_ns1__DataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DataItemType(struct soap *soap, const char *URL, ns1__DataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItemType", p->soap_type() == SOAP_TYPE_ns1__DataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DataItemType(struct soap *soap, const char *URL, ns1__DataItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItemType", p->soap_type() == SOAP_TYPE_ns1__DataItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DataItemType * SOAP_FMAC4 soap_get_ns1__DataItemType(struct soap*, ns1__DataItemType *, const char*, const char*);

inline int soap_read_ns1__DataItemType(struct soap *soap, ns1__DataItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DataItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DataItemType(struct soap *soap, const char *URL, ns1__DataItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DataItemType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DataItemType(struct soap *soap, ns1__DataItemType *p)
{
	if (soap_read_ns1__DataItemType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ResponseSaveReportType_DEFINED
#define SOAP_TYPE_ns1__ResponseSaveReportType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ResponseSaveReportType(struct soap*, const char*, int, const ns1__ResponseSaveReportType *, const char*);
SOAP_FMAC3 ns1__ResponseSaveReportType * SOAP_FMAC4 soap_in_ns1__ResponseSaveReportType(struct soap*, const char*, ns1__ResponseSaveReportType *, const char*);
SOAP_FMAC1 ns1__ResponseSaveReportType * SOAP_FMAC2 soap_instantiate_ns1__ResponseSaveReportType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ResponseSaveReportType * soap_new_ns1__ResponseSaveReportType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ResponseSaveReportType(soap, n, NULL, NULL, NULL);
}

inline ns1__ResponseSaveReportType * soap_new_req_ns1__ResponseSaveReportType(
	struct soap *soap,
	unsigned int reportId,
	unsigned int serviceReqId,
	unsigned int errorCause)
{
	ns1__ResponseSaveReportType *_p = soap_new_ns1__ResponseSaveReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResponseSaveReportType::reportId = reportId;
		_p->ns1__ResponseSaveReportType::serviceReqId = serviceReqId;
		_p->ns1__ResponseSaveReportType::errorCause = errorCause;
	}
	return _p;
}

inline ns1__ResponseSaveReportType * soap_new_set_ns1__ResponseSaveReportType(
	struct soap *soap,
	unsigned int reportId,
	unsigned int serviceReqId,
	unsigned int errorCause)
{
	ns1__ResponseSaveReportType *_p = soap_new_ns1__ResponseSaveReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResponseSaveReportType::reportId = reportId;
		_p->ns1__ResponseSaveReportType::serviceReqId = serviceReqId;
		_p->ns1__ResponseSaveReportType::errorCause = errorCause;
	}
	return _p;
}

inline int soap_write_ns1__ResponseSaveReportType(struct soap *soap, ns1__ResponseSaveReportType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseSaveReportType", p->soap_type() == SOAP_TYPE_ns1__ResponseSaveReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ResponseSaveReportType(struct soap *soap, const char *URL, ns1__ResponseSaveReportType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseSaveReportType", p->soap_type() == SOAP_TYPE_ns1__ResponseSaveReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ResponseSaveReportType(struct soap *soap, const char *URL, ns1__ResponseSaveReportType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseSaveReportType", p->soap_type() == SOAP_TYPE_ns1__ResponseSaveReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ResponseSaveReportType * SOAP_FMAC4 soap_get_ns1__ResponseSaveReportType(struct soap*, ns1__ResponseSaveReportType *, const char*, const char*);

inline int soap_read_ns1__ResponseSaveReportType(struct soap *soap, ns1__ResponseSaveReportType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ResponseSaveReportType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ResponseSaveReportType(struct soap *soap, const char *URL, ns1__ResponseSaveReportType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ResponseSaveReportType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ResponseSaveReportType(struct soap *soap, ns1__ResponseSaveReportType *p)
{
	if (soap_read_ns1__ResponseSaveReportType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ResponseInfoHeaderType_DEFINED
#define SOAP_TYPE_ns1__ResponseInfoHeaderType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ResponseInfoHeaderType(struct soap*, const char*, int, const ns1__ResponseInfoHeaderType *, const char*);
SOAP_FMAC3 ns1__ResponseInfoHeaderType * SOAP_FMAC4 soap_in_ns1__ResponseInfoHeaderType(struct soap*, const char*, ns1__ResponseInfoHeaderType *, const char*);
SOAP_FMAC1 ns1__ResponseInfoHeaderType * SOAP_FMAC2 soap_instantiate_ns1__ResponseInfoHeaderType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ResponseInfoHeaderType * soap_new_ns1__ResponseInfoHeaderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ResponseInfoHeaderType(soap, n, NULL, NULL, NULL);
}

inline ns1__ResponseInfoHeaderType * soap_new_req_ns1__ResponseInfoHeaderType(
	struct soap *soap,
	unsigned int serviceReqId,
	unsigned int errorCause,
	const std::string& serversInfo)
{
	ns1__ResponseInfoHeaderType *_p = soap_new_ns1__ResponseInfoHeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResponseInfoHeaderType::serviceReqId = serviceReqId;
		_p->ns1__ResponseInfoHeaderType::errorCause = errorCause;
		_p->ns1__ResponseInfoHeaderType::serversInfo = serversInfo;
	}
	return _p;
}

inline ns1__ResponseInfoHeaderType * soap_new_set_ns1__ResponseInfoHeaderType(
	struct soap *soap,
	unsigned int serviceReqId,
	unsigned int errorCause,
	const std::string& serversInfo)
{
	ns1__ResponseInfoHeaderType *_p = soap_new_ns1__ResponseInfoHeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResponseInfoHeaderType::serviceReqId = serviceReqId;
		_p->ns1__ResponseInfoHeaderType::errorCause = errorCause;
		_p->ns1__ResponseInfoHeaderType::serversInfo = serversInfo;
	}
	return _p;
}

inline int soap_write_ns1__ResponseInfoHeaderType(struct soap *soap, ns1__ResponseInfoHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseInfoHeaderType", p->soap_type() == SOAP_TYPE_ns1__ResponseInfoHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ResponseInfoHeaderType(struct soap *soap, const char *URL, ns1__ResponseInfoHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseInfoHeaderType", p->soap_type() == SOAP_TYPE_ns1__ResponseInfoHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ResponseInfoHeaderType(struct soap *soap, const char *URL, ns1__ResponseInfoHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseInfoHeaderType", p->soap_type() == SOAP_TYPE_ns1__ResponseInfoHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ResponseInfoHeaderType * SOAP_FMAC4 soap_get_ns1__ResponseInfoHeaderType(struct soap*, ns1__ResponseInfoHeaderType *, const char*, const char*);

inline int soap_read_ns1__ResponseInfoHeaderType(struct soap *soap, ns1__ResponseInfoHeaderType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ResponseInfoHeaderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ResponseInfoHeaderType(struct soap *soap, const char *URL, ns1__ResponseInfoHeaderType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ResponseInfoHeaderType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ResponseInfoHeaderType(struct soap *soap, ns1__ResponseInfoHeaderType *p)
{
	if (soap_read_ns1__ResponseInfoHeaderType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ChatResponseType_DEFINED
#define SOAP_TYPE_ns1__ChatResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChatResponseType(struct soap*, const char*, int, const ns1__ChatResponseType *, const char*);
SOAP_FMAC3 ns1__ChatResponseType * SOAP_FMAC4 soap_in_ns1__ChatResponseType(struct soap*, const char*, ns1__ChatResponseType *, const char*);
SOAP_FMAC1 ns1__ChatResponseType * SOAP_FMAC2 soap_instantiate_ns1__ChatResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ChatResponseType * soap_new_ns1__ChatResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ChatResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__ChatResponseType * soap_new_req_ns1__ChatResponseType(
	struct soap *soap,
	const std::string& sessionId,
	unsigned int serviceReqId,
	unsigned int errorCause)
{
	ns1__ChatResponseType *_p = soap_new_ns1__ChatResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ChatResponseType::sessionId = sessionId;
		_p->ns1__ChatResponseType::serviceReqId = serviceReqId;
		_p->ns1__ChatResponseType::errorCause = errorCause;
	}
	return _p;
}

inline ns1__ChatResponseType * soap_new_set_ns1__ChatResponseType(
	struct soap *soap,
	const std::string& sessionId,
	unsigned int serviceReqId,
	unsigned int errorCause)
{
	ns1__ChatResponseType *_p = soap_new_ns1__ChatResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ChatResponseType::sessionId = sessionId;
		_p->ns1__ChatResponseType::serviceReqId = serviceReqId;
		_p->ns1__ChatResponseType::errorCause = errorCause;
	}
	return _p;
}

inline int soap_write_ns1__ChatResponseType(struct soap *soap, ns1__ChatResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChatResponseType", p->soap_type() == SOAP_TYPE_ns1__ChatResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ChatResponseType(struct soap *soap, const char *URL, ns1__ChatResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChatResponseType", p->soap_type() == SOAP_TYPE_ns1__ChatResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ChatResponseType(struct soap *soap, const char *URL, ns1__ChatResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChatResponseType", p->soap_type() == SOAP_TYPE_ns1__ChatResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ChatResponseType * SOAP_FMAC4 soap_get_ns1__ChatResponseType(struct soap*, ns1__ChatResponseType *, const char*, const char*);

inline int soap_read_ns1__ChatResponseType(struct soap *soap, ns1__ChatResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ChatResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ChatResponseType(struct soap *soap, const char *URL, ns1__ChatResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ChatResponseType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ChatResponseType(struct soap *soap, ns1__ChatResponseType *p)
{
	if (soap_read_ns1__ChatResponseType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TFRequestType_DEFINED
#define SOAP_TYPE_ns1__TFRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TFRequestType(struct soap*, const char*, int, const ns1__TFRequestType *, const char*);
SOAP_FMAC3 ns1__TFRequestType * SOAP_FMAC4 soap_in_ns1__TFRequestType(struct soap*, const char*, ns1__TFRequestType *, const char*);
SOAP_FMAC1 ns1__TFRequestType * SOAP_FMAC2 soap_instantiate_ns1__TFRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TFRequestType * soap_new_ns1__TFRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TFRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__TFRequestType * soap_new_req_ns1__TFRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int AgentId,
	const std::string& Operation)
{
	ns1__TFRequestType *_p = soap_new_ns1__TFRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TFRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__TFRequestType::AgentId = AgentId;
		_p->ns1__TFRequestType::Operation = Operation;
	}
	return _p;
}

inline ns1__TFRequestType * soap_new_set_ns1__TFRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int AgentId,
	const std::string& Operation)
{
	ns1__TFRequestType *_p = soap_new_ns1__TFRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TFRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__TFRequestType::AgentId = AgentId;
		_p->ns1__TFRequestType::Operation = Operation;
	}
	return _p;
}

inline int soap_write_ns1__TFRequestType(struct soap *soap, ns1__TFRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TFRequestType", p->soap_type() == SOAP_TYPE_ns1__TFRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TFRequestType(struct soap *soap, const char *URL, ns1__TFRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TFRequestType", p->soap_type() == SOAP_TYPE_ns1__TFRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TFRequestType(struct soap *soap, const char *URL, ns1__TFRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TFRequestType", p->soap_type() == SOAP_TYPE_ns1__TFRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TFRequestType * SOAP_FMAC4 soap_get_ns1__TFRequestType(struct soap*, ns1__TFRequestType *, const char*, const char*);

inline int soap_read_ns1__TFRequestType(struct soap *soap, ns1__TFRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TFRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TFRequestType(struct soap *soap, const char *URL, ns1__TFRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TFRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TFRequestType(struct soap *soap, ns1__TFRequestType *p)
{
	if (soap_read_ns1__TFRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ACDRequestType_DEFINED
#define SOAP_TYPE_ns1__ACDRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ACDRequestType(struct soap*, const char*, int, const ns1__ACDRequestType *, const char*);
SOAP_FMAC3 ns1__ACDRequestType * SOAP_FMAC4 soap_in_ns1__ACDRequestType(struct soap*, const char*, ns1__ACDRequestType *, const char*);
SOAP_FMAC1 ns1__ACDRequestType * SOAP_FMAC2 soap_instantiate_ns1__ACDRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ACDRequestType * soap_new_ns1__ACDRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ACDRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ACDRequestType * soap_new_req_ns1__ACDRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int AgentId,
	unsigned int GroupId,
	const std::string& Operation)
{
	ns1__ACDRequestType *_p = soap_new_ns1__ACDRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ACDRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__ACDRequestType::AgentId = AgentId;
		_p->ns1__ACDRequestType::GroupId = GroupId;
		_p->ns1__ACDRequestType::Operation = Operation;
	}
	return _p;
}

inline ns1__ACDRequestType * soap_new_set_ns1__ACDRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int AgentId,
	unsigned int GroupId,
	const std::string& Operation)
{
	ns1__ACDRequestType *_p = soap_new_ns1__ACDRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ACDRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__ACDRequestType::AgentId = AgentId;
		_p->ns1__ACDRequestType::GroupId = GroupId;
		_p->ns1__ACDRequestType::Operation = Operation;
	}
	return _p;
}

inline int soap_write_ns1__ACDRequestType(struct soap *soap, ns1__ACDRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ACDRequestType", p->soap_type() == SOAP_TYPE_ns1__ACDRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ACDRequestType(struct soap *soap, const char *URL, ns1__ACDRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ACDRequestType", p->soap_type() == SOAP_TYPE_ns1__ACDRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ACDRequestType(struct soap *soap, const char *URL, ns1__ACDRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ACDRequestType", p->soap_type() == SOAP_TYPE_ns1__ACDRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ACDRequestType * SOAP_FMAC4 soap_get_ns1__ACDRequestType(struct soap*, ns1__ACDRequestType *, const char*, const char*);

inline int soap_read_ns1__ACDRequestType(struct soap *soap, ns1__ACDRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ACDRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ACDRequestType(struct soap *soap, const char *URL, ns1__ACDRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ACDRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ACDRequestType(struct soap *soap, ns1__ACDRequestType *p)
{
	if (soap_read_ns1__ACDRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ACDMultiRequestType_DEFINED
#define SOAP_TYPE_ns1__ACDMultiRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ACDMultiRequestType(struct soap*, const char*, int, const ns1__ACDMultiRequestType *, const char*);
SOAP_FMAC3 ns1__ACDMultiRequestType * SOAP_FMAC4 soap_in_ns1__ACDMultiRequestType(struct soap*, const char*, ns1__ACDMultiRequestType *, const char*);
SOAP_FMAC1 ns1__ACDMultiRequestType * SOAP_FMAC2 soap_instantiate_ns1__ACDMultiRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ACDMultiRequestType * soap_new_ns1__ACDMultiRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ACDMultiRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ACDMultiRequestType * soap_new_req_ns1__ACDMultiRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int Id,
	const std::vector<unsigned int> & multiId,
	const std::string& Operation)
{
	ns1__ACDMultiRequestType *_p = soap_new_ns1__ACDMultiRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ACDMultiRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__ACDMultiRequestType::Id = Id;
		_p->ns1__ACDMultiRequestType::multiId = multiId;
		_p->ns1__ACDMultiRequestType::Operation = Operation;
	}
	return _p;
}

inline ns1__ACDMultiRequestType * soap_new_set_ns1__ACDMultiRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	unsigned int Id,
	const std::vector<unsigned int> & multiId,
	const std::string& Operation)
{
	ns1__ACDMultiRequestType *_p = soap_new_ns1__ACDMultiRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ACDMultiRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__ACDMultiRequestType::Id = Id;
		_p->ns1__ACDMultiRequestType::multiId = multiId;
		_p->ns1__ACDMultiRequestType::Operation = Operation;
	}
	return _p;
}

inline int soap_write_ns1__ACDMultiRequestType(struct soap *soap, ns1__ACDMultiRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ACDMultiRequestType", p->soap_type() == SOAP_TYPE_ns1__ACDMultiRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ACDMultiRequestType(struct soap *soap, const char *URL, ns1__ACDMultiRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ACDMultiRequestType", p->soap_type() == SOAP_TYPE_ns1__ACDMultiRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ACDMultiRequestType(struct soap *soap, const char *URL, ns1__ACDMultiRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ACDMultiRequestType", p->soap_type() == SOAP_TYPE_ns1__ACDMultiRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ACDMultiRequestType * SOAP_FMAC4 soap_get_ns1__ACDMultiRequestType(struct soap*, ns1__ACDMultiRequestType *, const char*, const char*);

inline int soap_read_ns1__ACDMultiRequestType(struct soap *soap, ns1__ACDMultiRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ACDMultiRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ACDMultiRequestType(struct soap *soap, const char *URL, ns1__ACDMultiRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ACDMultiRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ACDMultiRequestType(struct soap *soap, ns1__ACDMultiRequestType *p)
{
	if (soap_read_ns1__ACDMultiRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GenInfoRequestType_DEFINED
#define SOAP_TYPE_ns1__GenInfoRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenInfoRequestType(struct soap*, const char*, int, const ns1__GenInfoRequestType *, const char*);
SOAP_FMAC3 ns1__GenInfoRequestType * SOAP_FMAC4 soap_in_ns1__GenInfoRequestType(struct soap*, const char*, ns1__GenInfoRequestType *, const char*);
SOAP_FMAC1 ns1__GenInfoRequestType * SOAP_FMAC2 soap_instantiate_ns1__GenInfoRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenInfoRequestType * soap_new_ns1__GenInfoRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenInfoRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GenInfoRequestType * soap_new_req_ns1__GenInfoRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	const std::vector<unsigned int> & Id)
{
	ns1__GenInfoRequestType *_p = soap_new_ns1__GenInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenInfoRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__GenInfoRequestType::Id = Id;
	}
	return _p;
}

inline ns1__GenInfoRequestType * soap_new_set_ns1__GenInfoRequestType(
	struct soap *soap,
	ns1__RequestInfoHeaderType *requestInfoHeader,
	const std::vector<unsigned int> & Id)
{
	ns1__GenInfoRequestType *_p = soap_new_ns1__GenInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenInfoRequestType::requestInfoHeader = requestInfoHeader;
		_p->ns1__GenInfoRequestType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns1__GenInfoRequestType(struct soap *soap, ns1__GenInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__GenInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenInfoRequestType(struct soap *soap, const char *URL, ns1__GenInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__GenInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenInfoRequestType(struct soap *soap, const char *URL, ns1__GenInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__GenInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenInfoRequestType * SOAP_FMAC4 soap_get_ns1__GenInfoRequestType(struct soap*, ns1__GenInfoRequestType *, const char*, const char*);

inline int soap_read_ns1__GenInfoRequestType(struct soap *soap, ns1__GenInfoRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GenInfoRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenInfoRequestType(struct soap *soap, const char *URL, ns1__GenInfoRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GenInfoRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GenInfoRequestType(struct soap *soap, ns1__GenInfoRequestType *p)
{
	if (soap_read_ns1__GenInfoRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RequestInfoHeaderType_DEFINED
#define SOAP_TYPE_ns1__RequestInfoHeaderType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestInfoHeaderType(struct soap*, const char*, int, const ns1__RequestInfoHeaderType *, const char*);
SOAP_FMAC3 ns1__RequestInfoHeaderType * SOAP_FMAC4 soap_in_ns1__RequestInfoHeaderType(struct soap*, const char*, ns1__RequestInfoHeaderType *, const char*);
SOAP_FMAC1 ns1__RequestInfoHeaderType * SOAP_FMAC2 soap_instantiate_ns1__RequestInfoHeaderType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RequestInfoHeaderType * soap_new_ns1__RequestInfoHeaderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RequestInfoHeaderType(soap, n, NULL, NULL, NULL);
}

inline ns1__RequestInfoHeaderType * soap_new_req_ns1__RequestInfoHeaderType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& ticket)
{
	ns1__RequestInfoHeaderType *_p = soap_new_ns1__RequestInfoHeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RequestInfoHeaderType::serviceReqId = serviceReqId;
		_p->ns1__RequestInfoHeaderType::ticket = ticket;
	}
	return _p;
}

inline ns1__RequestInfoHeaderType * soap_new_set_ns1__RequestInfoHeaderType(
	struct soap *soap,
	unsigned int serviceReqId,
	const std::string& ticket)
{
	ns1__RequestInfoHeaderType *_p = soap_new_ns1__RequestInfoHeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RequestInfoHeaderType::serviceReqId = serviceReqId;
		_p->ns1__RequestInfoHeaderType::ticket = ticket;
	}
	return _p;
}

inline int soap_write_ns1__RequestInfoHeaderType(struct soap *soap, ns1__RequestInfoHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestInfoHeaderType", p->soap_type() == SOAP_TYPE_ns1__RequestInfoHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RequestInfoHeaderType(struct soap *soap, const char *URL, ns1__RequestInfoHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestInfoHeaderType", p->soap_type() == SOAP_TYPE_ns1__RequestInfoHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RequestInfoHeaderType(struct soap *soap, const char *URL, ns1__RequestInfoHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestInfoHeaderType", p->soap_type() == SOAP_TYPE_ns1__RequestInfoHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RequestInfoHeaderType * SOAP_FMAC4 soap_get_ns1__RequestInfoHeaderType(struct soap*, ns1__RequestInfoHeaderType *, const char*, const char*);

inline int soap_read_ns1__RequestInfoHeaderType(struct soap *soap, ns1__RequestInfoHeaderType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RequestInfoHeaderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RequestInfoHeaderType(struct soap *soap, const char *URL, ns1__RequestInfoHeaderType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RequestInfoHeaderType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RequestInfoHeaderType(struct soap *soap, ns1__RequestInfoHeaderType *p)
{
	if (soap_read_ns1__RequestInfoHeaderType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__SuperGroupDailyBriefInfo_DEFINED
#define SOAP_TYPE___ns1__SuperGroupDailyBriefInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SuperGroupDailyBriefInfo(struct soap*, struct __ns1__SuperGroupDailyBriefInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SuperGroupDailyBriefInfo(struct soap*, const struct __ns1__SuperGroupDailyBriefInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SuperGroupDailyBriefInfo(struct soap*, const char*, int, const struct __ns1__SuperGroupDailyBriefInfo *, const char*);
SOAP_FMAC3 struct __ns1__SuperGroupDailyBriefInfo * SOAP_FMAC4 soap_in___ns1__SuperGroupDailyBriefInfo(struct soap*, const char*, struct __ns1__SuperGroupDailyBriefInfo *, const char*);
SOAP_FMAC1 struct __ns1__SuperGroupDailyBriefInfo * SOAP_FMAC2 soap_instantiate___ns1__SuperGroupDailyBriefInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SuperGroupDailyBriefInfo * soap_new___ns1__SuperGroupDailyBriefInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SuperGroupDailyBriefInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SuperGroupDailyBriefInfo * soap_new_req___ns1__SuperGroupDailyBriefInfo(
	struct soap *soap)
{
	struct __ns1__SuperGroupDailyBriefInfo *_p = soap_new___ns1__SuperGroupDailyBriefInfo(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupDailyBriefInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__SuperGroupDailyBriefInfo * soap_new_set___ns1__SuperGroupDailyBriefInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__SuperGroupDailyBriefInfoRequest)
{
	struct __ns1__SuperGroupDailyBriefInfo *_p = soap_new___ns1__SuperGroupDailyBriefInfo(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupDailyBriefInfo(soap, _p);
		_p->ns1__SuperGroupDailyBriefInfoRequest = ns1__SuperGroupDailyBriefInfoRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SuperGroupDailyBriefInfo(struct soap*, const struct __ns1__SuperGroupDailyBriefInfo *, const char*, const char*);

inline int soap_write___ns1__SuperGroupDailyBriefInfo(struct soap *soap, struct __ns1__SuperGroupDailyBriefInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SuperGroupDailyBriefInfo(soap, p), 0) || soap_put___ns1__SuperGroupDailyBriefInfo(soap, p, "-ns1:SuperGroupDailyBriefInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SuperGroupDailyBriefInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupDailyBriefInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupDailyBriefInfo(soap, p), 0) || soap_put___ns1__SuperGroupDailyBriefInfo(soap, p, "-ns1:SuperGroupDailyBriefInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SuperGroupDailyBriefInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupDailyBriefInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupDailyBriefInfo(soap, p), 0) || soap_put___ns1__SuperGroupDailyBriefInfo(soap, p, "-ns1:SuperGroupDailyBriefInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SuperGroupDailyBriefInfo * SOAP_FMAC4 soap_get___ns1__SuperGroupDailyBriefInfo(struct soap*, struct __ns1__SuperGroupDailyBriefInfo *, const char*, const char*);

inline int soap_read___ns1__SuperGroupDailyBriefInfo(struct soap *soap, struct __ns1__SuperGroupDailyBriefInfo *p)
{
	if (p)
	{	soap_default___ns1__SuperGroupDailyBriefInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SuperGroupDailyBriefInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SuperGroupDailyBriefInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupDailyBriefInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SuperGroupDailyBriefInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SuperGroupDailyBriefInfo(struct soap *soap, struct __ns1__SuperGroupDailyBriefInfo *p)
{
	if (soap_read___ns1__SuperGroupDailyBriefInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SuperGroupHourlyInfo_DEFINED
#define SOAP_TYPE___ns1__SuperGroupHourlyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SuperGroupHourlyInfo(struct soap*, struct __ns1__SuperGroupHourlyInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SuperGroupHourlyInfo(struct soap*, const struct __ns1__SuperGroupHourlyInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SuperGroupHourlyInfo(struct soap*, const char*, int, const struct __ns1__SuperGroupHourlyInfo *, const char*);
SOAP_FMAC3 struct __ns1__SuperGroupHourlyInfo * SOAP_FMAC4 soap_in___ns1__SuperGroupHourlyInfo(struct soap*, const char*, struct __ns1__SuperGroupHourlyInfo *, const char*);
SOAP_FMAC1 struct __ns1__SuperGroupHourlyInfo * SOAP_FMAC2 soap_instantiate___ns1__SuperGroupHourlyInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SuperGroupHourlyInfo * soap_new___ns1__SuperGroupHourlyInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SuperGroupHourlyInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SuperGroupHourlyInfo * soap_new_req___ns1__SuperGroupHourlyInfo(
	struct soap *soap)
{
	struct __ns1__SuperGroupHourlyInfo *_p = soap_new___ns1__SuperGroupHourlyInfo(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupHourlyInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__SuperGroupHourlyInfo * soap_new_set___ns1__SuperGroupHourlyInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__SuperGroupHourlyInfoRequest)
{
	struct __ns1__SuperGroupHourlyInfo *_p = soap_new___ns1__SuperGroupHourlyInfo(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupHourlyInfo(soap, _p);
		_p->ns1__SuperGroupHourlyInfoRequest = ns1__SuperGroupHourlyInfoRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SuperGroupHourlyInfo(struct soap*, const struct __ns1__SuperGroupHourlyInfo *, const char*, const char*);

inline int soap_write___ns1__SuperGroupHourlyInfo(struct soap *soap, struct __ns1__SuperGroupHourlyInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SuperGroupHourlyInfo(soap, p), 0) || soap_put___ns1__SuperGroupHourlyInfo(soap, p, "-ns1:SuperGroupHourlyInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SuperGroupHourlyInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupHourlyInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupHourlyInfo(soap, p), 0) || soap_put___ns1__SuperGroupHourlyInfo(soap, p, "-ns1:SuperGroupHourlyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SuperGroupHourlyInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupHourlyInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupHourlyInfo(soap, p), 0) || soap_put___ns1__SuperGroupHourlyInfo(soap, p, "-ns1:SuperGroupHourlyInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SuperGroupHourlyInfo * SOAP_FMAC4 soap_get___ns1__SuperGroupHourlyInfo(struct soap*, struct __ns1__SuperGroupHourlyInfo *, const char*, const char*);

inline int soap_read___ns1__SuperGroupHourlyInfo(struct soap *soap, struct __ns1__SuperGroupHourlyInfo *p)
{
	if (p)
	{	soap_default___ns1__SuperGroupHourlyInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SuperGroupHourlyInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SuperGroupHourlyInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupHourlyInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SuperGroupHourlyInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SuperGroupHourlyInfo(struct soap *soap, struct __ns1__SuperGroupHourlyInfo *p)
{
	if (soap_read___ns1__SuperGroupHourlyInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupDailyDetailedInfo_DEFINED
#define SOAP_TYPE___ns1__GroupDailyDetailedInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupDailyDetailedInfo(struct soap*, struct __ns1__GroupDailyDetailedInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupDailyDetailedInfo(struct soap*, const struct __ns1__GroupDailyDetailedInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupDailyDetailedInfo(struct soap*, const char*, int, const struct __ns1__GroupDailyDetailedInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupDailyDetailedInfo * SOAP_FMAC4 soap_in___ns1__GroupDailyDetailedInfo(struct soap*, const char*, struct __ns1__GroupDailyDetailedInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupDailyDetailedInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupDailyDetailedInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupDailyDetailedInfo * soap_new___ns1__GroupDailyDetailedInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupDailyDetailedInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupDailyDetailedInfo * soap_new_req___ns1__GroupDailyDetailedInfo(
	struct soap *soap)
{
	struct __ns1__GroupDailyDetailedInfo *_p = soap_new___ns1__GroupDailyDetailedInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupDailyDetailedInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupDailyDetailedInfo * soap_new_set___ns1__GroupDailyDetailedInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__GroupDailyDetailedInfoRequest)
{
	struct __ns1__GroupDailyDetailedInfo *_p = soap_new___ns1__GroupDailyDetailedInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupDailyDetailedInfo(soap, _p);
		_p->ns1__GroupDailyDetailedInfoRequest = ns1__GroupDailyDetailedInfoRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupDailyDetailedInfo(struct soap*, const struct __ns1__GroupDailyDetailedInfo *, const char*, const char*);

inline int soap_write___ns1__GroupDailyDetailedInfo(struct soap *soap, struct __ns1__GroupDailyDetailedInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupDailyDetailedInfo(soap, p), 0) || soap_put___ns1__GroupDailyDetailedInfo(soap, p, "-ns1:GroupDailyDetailedInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupDailyDetailedInfo(struct soap *soap, const char *URL, struct __ns1__GroupDailyDetailedInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupDailyDetailedInfo(soap, p), 0) || soap_put___ns1__GroupDailyDetailedInfo(soap, p, "-ns1:GroupDailyDetailedInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupDailyDetailedInfo(struct soap *soap, const char *URL, struct __ns1__GroupDailyDetailedInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupDailyDetailedInfo(soap, p), 0) || soap_put___ns1__GroupDailyDetailedInfo(soap, p, "-ns1:GroupDailyDetailedInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupDailyDetailedInfo * SOAP_FMAC4 soap_get___ns1__GroupDailyDetailedInfo(struct soap*, struct __ns1__GroupDailyDetailedInfo *, const char*, const char*);

inline int soap_read___ns1__GroupDailyDetailedInfo(struct soap *soap, struct __ns1__GroupDailyDetailedInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupDailyDetailedInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupDailyDetailedInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupDailyDetailedInfo(struct soap *soap, const char *URL, struct __ns1__GroupDailyDetailedInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupDailyDetailedInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupDailyDetailedInfo(struct soap *soap, struct __ns1__GroupDailyDetailedInfo *p)
{
	if (soap_read___ns1__GroupDailyDetailedInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupDailyBriefInfo_DEFINED
#define SOAP_TYPE___ns1__GroupDailyBriefInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupDailyBriefInfo(struct soap*, struct __ns1__GroupDailyBriefInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupDailyBriefInfo(struct soap*, const struct __ns1__GroupDailyBriefInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupDailyBriefInfo(struct soap*, const char*, int, const struct __ns1__GroupDailyBriefInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupDailyBriefInfo * SOAP_FMAC4 soap_in___ns1__GroupDailyBriefInfo(struct soap*, const char*, struct __ns1__GroupDailyBriefInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupDailyBriefInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupDailyBriefInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupDailyBriefInfo * soap_new___ns1__GroupDailyBriefInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupDailyBriefInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupDailyBriefInfo * soap_new_req___ns1__GroupDailyBriefInfo(
	struct soap *soap)
{
	struct __ns1__GroupDailyBriefInfo *_p = soap_new___ns1__GroupDailyBriefInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupDailyBriefInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupDailyBriefInfo * soap_new_set___ns1__GroupDailyBriefInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__GroupDailyBriefInfoRequest)
{
	struct __ns1__GroupDailyBriefInfo *_p = soap_new___ns1__GroupDailyBriefInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupDailyBriefInfo(soap, _p);
		_p->ns1__GroupDailyBriefInfoRequest = ns1__GroupDailyBriefInfoRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupDailyBriefInfo(struct soap*, const struct __ns1__GroupDailyBriefInfo *, const char*, const char*);

inline int soap_write___ns1__GroupDailyBriefInfo(struct soap *soap, struct __ns1__GroupDailyBriefInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupDailyBriefInfo(soap, p), 0) || soap_put___ns1__GroupDailyBriefInfo(soap, p, "-ns1:GroupDailyBriefInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupDailyBriefInfo(struct soap *soap, const char *URL, struct __ns1__GroupDailyBriefInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupDailyBriefInfo(soap, p), 0) || soap_put___ns1__GroupDailyBriefInfo(soap, p, "-ns1:GroupDailyBriefInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupDailyBriefInfo(struct soap *soap, const char *URL, struct __ns1__GroupDailyBriefInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupDailyBriefInfo(soap, p), 0) || soap_put___ns1__GroupDailyBriefInfo(soap, p, "-ns1:GroupDailyBriefInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupDailyBriefInfo * SOAP_FMAC4 soap_get___ns1__GroupDailyBriefInfo(struct soap*, struct __ns1__GroupDailyBriefInfo *, const char*, const char*);

inline int soap_read___ns1__GroupDailyBriefInfo(struct soap *soap, struct __ns1__GroupDailyBriefInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupDailyBriefInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupDailyBriefInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupDailyBriefInfo(struct soap *soap, const char *URL, struct __ns1__GroupDailyBriefInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupDailyBriefInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupDailyBriefInfo(struct soap *soap, struct __ns1__GroupDailyBriefInfo *p)
{
	if (soap_read___ns1__GroupDailyBriefInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupHourlyInfo_DEFINED
#define SOAP_TYPE___ns1__GroupHourlyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupHourlyInfo(struct soap*, struct __ns1__GroupHourlyInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupHourlyInfo(struct soap*, const struct __ns1__GroupHourlyInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupHourlyInfo(struct soap*, const char*, int, const struct __ns1__GroupHourlyInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupHourlyInfo * SOAP_FMAC4 soap_in___ns1__GroupHourlyInfo(struct soap*, const char*, struct __ns1__GroupHourlyInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupHourlyInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupHourlyInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupHourlyInfo * soap_new___ns1__GroupHourlyInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupHourlyInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupHourlyInfo * soap_new_req___ns1__GroupHourlyInfo(
	struct soap *soap)
{
	struct __ns1__GroupHourlyInfo *_p = soap_new___ns1__GroupHourlyInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupHourlyInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupHourlyInfo * soap_new_set___ns1__GroupHourlyInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__GroupHourlyInfoRequest)
{
	struct __ns1__GroupHourlyInfo *_p = soap_new___ns1__GroupHourlyInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupHourlyInfo(soap, _p);
		_p->ns1__GroupHourlyInfoRequest = ns1__GroupHourlyInfoRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupHourlyInfo(struct soap*, const struct __ns1__GroupHourlyInfo *, const char*, const char*);

inline int soap_write___ns1__GroupHourlyInfo(struct soap *soap, struct __ns1__GroupHourlyInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupHourlyInfo(soap, p), 0) || soap_put___ns1__GroupHourlyInfo(soap, p, "-ns1:GroupHourlyInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupHourlyInfo(struct soap *soap, const char *URL, struct __ns1__GroupHourlyInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupHourlyInfo(soap, p), 0) || soap_put___ns1__GroupHourlyInfo(soap, p, "-ns1:GroupHourlyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupHourlyInfo(struct soap *soap, const char *URL, struct __ns1__GroupHourlyInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupHourlyInfo(soap, p), 0) || soap_put___ns1__GroupHourlyInfo(soap, p, "-ns1:GroupHourlyInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupHourlyInfo * SOAP_FMAC4 soap_get___ns1__GroupHourlyInfo(struct soap*, struct __ns1__GroupHourlyInfo *, const char*, const char*);

inline int soap_read___ns1__GroupHourlyInfo(struct soap *soap, struct __ns1__GroupHourlyInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupHourlyInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupHourlyInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupHourlyInfo(struct soap *soap, const char *URL, struct __ns1__GroupHourlyInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupHourlyInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupHourlyInfo(struct soap *soap, struct __ns1__GroupHourlyInfo *p)
{
	if (soap_read___ns1__GroupHourlyInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__AgentNeedHelp_DEFINED
#define SOAP_TYPE___ns1__AgentNeedHelp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AgentNeedHelp(struct soap*, struct __ns1__AgentNeedHelp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AgentNeedHelp(struct soap*, const struct __ns1__AgentNeedHelp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AgentNeedHelp(struct soap*, const char*, int, const struct __ns1__AgentNeedHelp *, const char*);
SOAP_FMAC3 struct __ns1__AgentNeedHelp * SOAP_FMAC4 soap_in___ns1__AgentNeedHelp(struct soap*, const char*, struct __ns1__AgentNeedHelp *, const char*);
SOAP_FMAC1 struct __ns1__AgentNeedHelp * SOAP_FMAC2 soap_instantiate___ns1__AgentNeedHelp(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AgentNeedHelp * soap_new___ns1__AgentNeedHelp(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__AgentNeedHelp(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AgentNeedHelp * soap_new_req___ns1__AgentNeedHelp(
	struct soap *soap)
{
	struct __ns1__AgentNeedHelp *_p = soap_new___ns1__AgentNeedHelp(soap);
	if (_p)
	{	soap_default___ns1__AgentNeedHelp(soap, _p);
	}
	return _p;
}

inline struct __ns1__AgentNeedHelp * soap_new_set___ns1__AgentNeedHelp(
	struct soap *soap,
	ns1__BriefInfoRequestType *ns1__AgentNeedHelpRequest)
{
	struct __ns1__AgentNeedHelp *_p = soap_new___ns1__AgentNeedHelp(soap);
	if (_p)
	{	soap_default___ns1__AgentNeedHelp(soap, _p);
		_p->ns1__AgentNeedHelpRequest = ns1__AgentNeedHelpRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AgentNeedHelp(struct soap*, const struct __ns1__AgentNeedHelp *, const char*, const char*);

inline int soap_write___ns1__AgentNeedHelp(struct soap *soap, struct __ns1__AgentNeedHelp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__AgentNeedHelp(soap, p), 0) || soap_put___ns1__AgentNeedHelp(soap, p, "-ns1:AgentNeedHelp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AgentNeedHelp(struct soap *soap, const char *URL, struct __ns1__AgentNeedHelp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AgentNeedHelp(soap, p), 0) || soap_put___ns1__AgentNeedHelp(soap, p, "-ns1:AgentNeedHelp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AgentNeedHelp(struct soap *soap, const char *URL, struct __ns1__AgentNeedHelp const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AgentNeedHelp(soap, p), 0) || soap_put___ns1__AgentNeedHelp(soap, p, "-ns1:AgentNeedHelp", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AgentNeedHelp * SOAP_FMAC4 soap_get___ns1__AgentNeedHelp(struct soap*, struct __ns1__AgentNeedHelp *, const char*, const char*);

inline int soap_read___ns1__AgentNeedHelp(struct soap *soap, struct __ns1__AgentNeedHelp *p)
{
	if (p)
	{	soap_default___ns1__AgentNeedHelp(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__AgentNeedHelp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AgentNeedHelp(struct soap *soap, const char *URL, struct __ns1__AgentNeedHelp *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__AgentNeedHelp(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__AgentNeedHelp(struct soap *soap, struct __ns1__AgentNeedHelp *p)
{
	if (soap_read___ns1__AgentNeedHelp(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__TraceInternalStat_DEFINED
#define SOAP_TYPE___ns1__TraceInternalStat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TraceInternalStat(struct soap*, struct __ns1__TraceInternalStat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TraceInternalStat(struct soap*, const struct __ns1__TraceInternalStat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TraceInternalStat(struct soap*, const char*, int, const struct __ns1__TraceInternalStat *, const char*);
SOAP_FMAC3 struct __ns1__TraceInternalStat * SOAP_FMAC4 soap_in___ns1__TraceInternalStat(struct soap*, const char*, struct __ns1__TraceInternalStat *, const char*);
SOAP_FMAC1 struct __ns1__TraceInternalStat * SOAP_FMAC2 soap_instantiate___ns1__TraceInternalStat(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TraceInternalStat * soap_new___ns1__TraceInternalStat(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__TraceInternalStat(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__TraceInternalStat * soap_new_req___ns1__TraceInternalStat(
	struct soap *soap)
{
	struct __ns1__TraceInternalStat *_p = soap_new___ns1__TraceInternalStat(soap);
	if (_p)
	{	soap_default___ns1__TraceInternalStat(soap, _p);
	}
	return _p;
}

inline struct __ns1__TraceInternalStat * soap_new_set___ns1__TraceInternalStat(
	struct soap *soap,
	ns1__StatRequestType *ns1__TraceInternalStatRequest)
{
	struct __ns1__TraceInternalStat *_p = soap_new___ns1__TraceInternalStat(soap);
	if (_p)
	{	soap_default___ns1__TraceInternalStat(soap, _p);
		_p->ns1__TraceInternalStatRequest = ns1__TraceInternalStatRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TraceInternalStat(struct soap*, const struct __ns1__TraceInternalStat *, const char*, const char*);

inline int soap_write___ns1__TraceInternalStat(struct soap *soap, struct __ns1__TraceInternalStat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__TraceInternalStat(soap, p), 0) || soap_put___ns1__TraceInternalStat(soap, p, "-ns1:TraceInternalStat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__TraceInternalStat(struct soap *soap, const char *URL, struct __ns1__TraceInternalStat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__TraceInternalStat(soap, p), 0) || soap_put___ns1__TraceInternalStat(soap, p, "-ns1:TraceInternalStat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__TraceInternalStat(struct soap *soap, const char *URL, struct __ns1__TraceInternalStat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__TraceInternalStat(soap, p), 0) || soap_put___ns1__TraceInternalStat(soap, p, "-ns1:TraceInternalStat", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__TraceInternalStat * SOAP_FMAC4 soap_get___ns1__TraceInternalStat(struct soap*, struct __ns1__TraceInternalStat *, const char*, const char*);

inline int soap_read___ns1__TraceInternalStat(struct soap *soap, struct __ns1__TraceInternalStat *p)
{
	if (p)
	{	soap_default___ns1__TraceInternalStat(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__TraceInternalStat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__TraceInternalStat(struct soap *soap, const char *URL, struct __ns1__TraceInternalStat *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__TraceInternalStat(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__TraceInternalStat(struct soap *soap, struct __ns1__TraceInternalStat *p)
{
	if (soap_read___ns1__TraceInternalStat(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ApplicationKeepAlive_DEFINED
#define SOAP_TYPE___ns1__ApplicationKeepAlive_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ApplicationKeepAlive(struct soap*, struct __ns1__ApplicationKeepAlive *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ApplicationKeepAlive(struct soap*, const struct __ns1__ApplicationKeepAlive *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ApplicationKeepAlive(struct soap*, const char*, int, const struct __ns1__ApplicationKeepAlive *, const char*);
SOAP_FMAC3 struct __ns1__ApplicationKeepAlive * SOAP_FMAC4 soap_in___ns1__ApplicationKeepAlive(struct soap*, const char*, struct __ns1__ApplicationKeepAlive *, const char*);
SOAP_FMAC1 struct __ns1__ApplicationKeepAlive * SOAP_FMAC2 soap_instantiate___ns1__ApplicationKeepAlive(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ApplicationKeepAlive * soap_new___ns1__ApplicationKeepAlive(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ApplicationKeepAlive(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ApplicationKeepAlive * soap_new_req___ns1__ApplicationKeepAlive(
	struct soap *soap)
{
	struct __ns1__ApplicationKeepAlive *_p = soap_new___ns1__ApplicationKeepAlive(soap);
	if (_p)
	{	soap_default___ns1__ApplicationKeepAlive(soap, _p);
	}
	return _p;
}

inline struct __ns1__ApplicationKeepAlive * soap_new_set___ns1__ApplicationKeepAlive(
	struct soap *soap,
	ns1__ApplicationKeepAliveRequestType *ns1__ApplicationKeepAliveRequest)
{
	struct __ns1__ApplicationKeepAlive *_p = soap_new___ns1__ApplicationKeepAlive(soap);
	if (_p)
	{	soap_default___ns1__ApplicationKeepAlive(soap, _p);
		_p->ns1__ApplicationKeepAliveRequest = ns1__ApplicationKeepAliveRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ApplicationKeepAlive(struct soap*, const struct __ns1__ApplicationKeepAlive *, const char*, const char*);

inline int soap_write___ns1__ApplicationKeepAlive(struct soap *soap, struct __ns1__ApplicationKeepAlive const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ApplicationKeepAlive(soap, p), 0) || soap_put___ns1__ApplicationKeepAlive(soap, p, "-ns1:ApplicationKeepAlive", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ApplicationKeepAlive(struct soap *soap, const char *URL, struct __ns1__ApplicationKeepAlive const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ApplicationKeepAlive(soap, p), 0) || soap_put___ns1__ApplicationKeepAlive(soap, p, "-ns1:ApplicationKeepAlive", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ApplicationKeepAlive(struct soap *soap, const char *URL, struct __ns1__ApplicationKeepAlive const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ApplicationKeepAlive(soap, p), 0) || soap_put___ns1__ApplicationKeepAlive(soap, p, "-ns1:ApplicationKeepAlive", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ApplicationKeepAlive * SOAP_FMAC4 soap_get___ns1__ApplicationKeepAlive(struct soap*, struct __ns1__ApplicationKeepAlive *, const char*, const char*);

inline int soap_read___ns1__ApplicationKeepAlive(struct soap *soap, struct __ns1__ApplicationKeepAlive *p)
{
	if (p)
	{	soap_default___ns1__ApplicationKeepAlive(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ApplicationKeepAlive(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ApplicationKeepAlive(struct soap *soap, const char *URL, struct __ns1__ApplicationKeepAlive *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ApplicationKeepAlive(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ApplicationKeepAlive(struct soap *soap, struct __ns1__ApplicationKeepAlive *p)
{
	if (soap_read___ns1__ApplicationKeepAlive(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ApplicationRegister_DEFINED
#define SOAP_TYPE___ns1__ApplicationRegister_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ApplicationRegister(struct soap*, struct __ns1__ApplicationRegister *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ApplicationRegister(struct soap*, const struct __ns1__ApplicationRegister *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ApplicationRegister(struct soap*, const char*, int, const struct __ns1__ApplicationRegister *, const char*);
SOAP_FMAC3 struct __ns1__ApplicationRegister * SOAP_FMAC4 soap_in___ns1__ApplicationRegister(struct soap*, const char*, struct __ns1__ApplicationRegister *, const char*);
SOAP_FMAC1 struct __ns1__ApplicationRegister * SOAP_FMAC2 soap_instantiate___ns1__ApplicationRegister(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ApplicationRegister * soap_new___ns1__ApplicationRegister(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ApplicationRegister(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ApplicationRegister * soap_new_req___ns1__ApplicationRegister(
	struct soap *soap)
{
	struct __ns1__ApplicationRegister *_p = soap_new___ns1__ApplicationRegister(soap);
	if (_p)
	{	soap_default___ns1__ApplicationRegister(soap, _p);
	}
	return _p;
}

inline struct __ns1__ApplicationRegister * soap_new_set___ns1__ApplicationRegister(
	struct soap *soap,
	ns1__ApplicationRegisterRequestType *ns1__ApplicationRegisterRequest)
{
	struct __ns1__ApplicationRegister *_p = soap_new___ns1__ApplicationRegister(soap);
	if (_p)
	{	soap_default___ns1__ApplicationRegister(soap, _p);
		_p->ns1__ApplicationRegisterRequest = ns1__ApplicationRegisterRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ApplicationRegister(struct soap*, const struct __ns1__ApplicationRegister *, const char*, const char*);

inline int soap_write___ns1__ApplicationRegister(struct soap *soap, struct __ns1__ApplicationRegister const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ApplicationRegister(soap, p), 0) || soap_put___ns1__ApplicationRegister(soap, p, "-ns1:ApplicationRegister", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ApplicationRegister(struct soap *soap, const char *URL, struct __ns1__ApplicationRegister const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ApplicationRegister(soap, p), 0) || soap_put___ns1__ApplicationRegister(soap, p, "-ns1:ApplicationRegister", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ApplicationRegister(struct soap *soap, const char *URL, struct __ns1__ApplicationRegister const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ApplicationRegister(soap, p), 0) || soap_put___ns1__ApplicationRegister(soap, p, "-ns1:ApplicationRegister", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ApplicationRegister * SOAP_FMAC4 soap_get___ns1__ApplicationRegister(struct soap*, struct __ns1__ApplicationRegister *, const char*, const char*);

inline int soap_read___ns1__ApplicationRegister(struct soap *soap, struct __ns1__ApplicationRegister *p)
{
	if (p)
	{	soap_default___ns1__ApplicationRegister(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ApplicationRegister(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ApplicationRegister(struct soap *soap, const char *URL, struct __ns1__ApplicationRegister *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ApplicationRegister(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ApplicationRegister(struct soap *soap, struct __ns1__ApplicationRegister *p)
{
	if (soap_read___ns1__ApplicationRegister(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LoginManagerAvailableGroupsForAgent_DEFINED
#define SOAP_TYPE___ns1__LoginManagerAvailableGroupsForAgent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginManagerAvailableGroupsForAgent(struct soap*, struct __ns1__LoginManagerAvailableGroupsForAgent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginManagerAvailableGroupsForAgent(struct soap*, const struct __ns1__LoginManagerAvailableGroupsForAgent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginManagerAvailableGroupsForAgent(struct soap*, const char*, int, const struct __ns1__LoginManagerAvailableGroupsForAgent *, const char*);
SOAP_FMAC3 struct __ns1__LoginManagerAvailableGroupsForAgent * SOAP_FMAC4 soap_in___ns1__LoginManagerAvailableGroupsForAgent(struct soap*, const char*, struct __ns1__LoginManagerAvailableGroupsForAgent *, const char*);
SOAP_FMAC1 struct __ns1__LoginManagerAvailableGroupsForAgent * SOAP_FMAC2 soap_instantiate___ns1__LoginManagerAvailableGroupsForAgent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginManagerAvailableGroupsForAgent * soap_new___ns1__LoginManagerAvailableGroupsForAgent(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LoginManagerAvailableGroupsForAgent(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LoginManagerAvailableGroupsForAgent * soap_new_req___ns1__LoginManagerAvailableGroupsForAgent(
	struct soap *soap)
{
	struct __ns1__LoginManagerAvailableGroupsForAgent *_p = soap_new___ns1__LoginManagerAvailableGroupsForAgent(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerAvailableGroupsForAgent(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginManagerAvailableGroupsForAgent * soap_new_set___ns1__LoginManagerAvailableGroupsForAgent(
	struct soap *soap,
	ns1__LoginManagerRequestType *ns1__LoginManagerRequestAvailableGroups)
{
	struct __ns1__LoginManagerAvailableGroupsForAgent *_p = soap_new___ns1__LoginManagerAvailableGroupsForAgent(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerAvailableGroupsForAgent(soap, _p);
		_p->ns1__LoginManagerRequestAvailableGroups = ns1__LoginManagerRequestAvailableGroups;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginManagerAvailableGroupsForAgent(struct soap*, const struct __ns1__LoginManagerAvailableGroupsForAgent *, const char*, const char*);

inline int soap_write___ns1__LoginManagerAvailableGroupsForAgent(struct soap *soap, struct __ns1__LoginManagerAvailableGroupsForAgent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LoginManagerAvailableGroupsForAgent(soap, p), 0) || soap_put___ns1__LoginManagerAvailableGroupsForAgent(soap, p, "-ns1:LoginManagerAvailableGroupsForAgent", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LoginManagerAvailableGroupsForAgent(struct soap *soap, const char *URL, struct __ns1__LoginManagerAvailableGroupsForAgent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerAvailableGroupsForAgent(soap, p), 0) || soap_put___ns1__LoginManagerAvailableGroupsForAgent(soap, p, "-ns1:LoginManagerAvailableGroupsForAgent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LoginManagerAvailableGroupsForAgent(struct soap *soap, const char *URL, struct __ns1__LoginManagerAvailableGroupsForAgent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerAvailableGroupsForAgent(soap, p), 0) || soap_put___ns1__LoginManagerAvailableGroupsForAgent(soap, p, "-ns1:LoginManagerAvailableGroupsForAgent", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LoginManagerAvailableGroupsForAgent * SOAP_FMAC4 soap_get___ns1__LoginManagerAvailableGroupsForAgent(struct soap*, struct __ns1__LoginManagerAvailableGroupsForAgent *, const char*, const char*);

inline int soap_read___ns1__LoginManagerAvailableGroupsForAgent(struct soap *soap, struct __ns1__LoginManagerAvailableGroupsForAgent *p)
{
	if (p)
	{	soap_default___ns1__LoginManagerAvailableGroupsForAgent(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LoginManagerAvailableGroupsForAgent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LoginManagerAvailableGroupsForAgent(struct soap *soap, const char *URL, struct __ns1__LoginManagerAvailableGroupsForAgent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LoginManagerAvailableGroupsForAgent(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LoginManagerAvailableGroupsForAgent(struct soap *soap, struct __ns1__LoginManagerAvailableGroupsForAgent *p)
{
	if (soap_read___ns1__LoginManagerAvailableGroupsForAgent(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LoginManagerAvailableAgentsForGroup_DEFINED
#define SOAP_TYPE___ns1__LoginManagerAvailableAgentsForGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginManagerAvailableAgentsForGroup(struct soap*, struct __ns1__LoginManagerAvailableAgentsForGroup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginManagerAvailableAgentsForGroup(struct soap*, const struct __ns1__LoginManagerAvailableAgentsForGroup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginManagerAvailableAgentsForGroup(struct soap*, const char*, int, const struct __ns1__LoginManagerAvailableAgentsForGroup *, const char*);
SOAP_FMAC3 struct __ns1__LoginManagerAvailableAgentsForGroup * SOAP_FMAC4 soap_in___ns1__LoginManagerAvailableAgentsForGroup(struct soap*, const char*, struct __ns1__LoginManagerAvailableAgentsForGroup *, const char*);
SOAP_FMAC1 struct __ns1__LoginManagerAvailableAgentsForGroup * SOAP_FMAC2 soap_instantiate___ns1__LoginManagerAvailableAgentsForGroup(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginManagerAvailableAgentsForGroup * soap_new___ns1__LoginManagerAvailableAgentsForGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LoginManagerAvailableAgentsForGroup(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LoginManagerAvailableAgentsForGroup * soap_new_req___ns1__LoginManagerAvailableAgentsForGroup(
	struct soap *soap)
{
	struct __ns1__LoginManagerAvailableAgentsForGroup *_p = soap_new___ns1__LoginManagerAvailableAgentsForGroup(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerAvailableAgentsForGroup(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginManagerAvailableAgentsForGroup * soap_new_set___ns1__LoginManagerAvailableAgentsForGroup(
	struct soap *soap,
	ns1__LoginManagerRequestType *ns1__LoginManagerRequestAvailableAgents)
{
	struct __ns1__LoginManagerAvailableAgentsForGroup *_p = soap_new___ns1__LoginManagerAvailableAgentsForGroup(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerAvailableAgentsForGroup(soap, _p);
		_p->ns1__LoginManagerRequestAvailableAgents = ns1__LoginManagerRequestAvailableAgents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginManagerAvailableAgentsForGroup(struct soap*, const struct __ns1__LoginManagerAvailableAgentsForGroup *, const char*, const char*);

inline int soap_write___ns1__LoginManagerAvailableAgentsForGroup(struct soap *soap, struct __ns1__LoginManagerAvailableAgentsForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LoginManagerAvailableAgentsForGroup(soap, p), 0) || soap_put___ns1__LoginManagerAvailableAgentsForGroup(soap, p, "-ns1:LoginManagerAvailableAgentsForGroup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LoginManagerAvailableAgentsForGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerAvailableAgentsForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerAvailableAgentsForGroup(soap, p), 0) || soap_put___ns1__LoginManagerAvailableAgentsForGroup(soap, p, "-ns1:LoginManagerAvailableAgentsForGroup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LoginManagerAvailableAgentsForGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerAvailableAgentsForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerAvailableAgentsForGroup(soap, p), 0) || soap_put___ns1__LoginManagerAvailableAgentsForGroup(soap, p, "-ns1:LoginManagerAvailableAgentsForGroup", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LoginManagerAvailableAgentsForGroup * SOAP_FMAC4 soap_get___ns1__LoginManagerAvailableAgentsForGroup(struct soap*, struct __ns1__LoginManagerAvailableAgentsForGroup *, const char*, const char*);

inline int soap_read___ns1__LoginManagerAvailableAgentsForGroup(struct soap *soap, struct __ns1__LoginManagerAvailableAgentsForGroup *p)
{
	if (p)
	{	soap_default___ns1__LoginManagerAvailableAgentsForGroup(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LoginManagerAvailableAgentsForGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LoginManagerAvailableAgentsForGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerAvailableAgentsForGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LoginManagerAvailableAgentsForGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LoginManagerAvailableAgentsForGroup(struct soap *soap, struct __ns1__LoginManagerAvailableAgentsForGroup *p)
{
	if (soap_read___ns1__LoginManagerAvailableAgentsForGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LoginManagerMultiAgentsToOneGroup_DEFINED
#define SOAP_TYPE___ns1__LoginManagerMultiAgentsToOneGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginManagerMultiAgentsToOneGroup(struct soap*, struct __ns1__LoginManagerMultiAgentsToOneGroup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginManagerMultiAgentsToOneGroup(struct soap*, const struct __ns1__LoginManagerMultiAgentsToOneGroup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginManagerMultiAgentsToOneGroup(struct soap*, const char*, int, const struct __ns1__LoginManagerMultiAgentsToOneGroup *, const char*);
SOAP_FMAC3 struct __ns1__LoginManagerMultiAgentsToOneGroup * SOAP_FMAC4 soap_in___ns1__LoginManagerMultiAgentsToOneGroup(struct soap*, const char*, struct __ns1__LoginManagerMultiAgentsToOneGroup *, const char*);
SOAP_FMAC1 struct __ns1__LoginManagerMultiAgentsToOneGroup * SOAP_FMAC2 soap_instantiate___ns1__LoginManagerMultiAgentsToOneGroup(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginManagerMultiAgentsToOneGroup * soap_new___ns1__LoginManagerMultiAgentsToOneGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LoginManagerMultiAgentsToOneGroup(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LoginManagerMultiAgentsToOneGroup * soap_new_req___ns1__LoginManagerMultiAgentsToOneGroup(
	struct soap *soap)
{
	struct __ns1__LoginManagerMultiAgentsToOneGroup *_p = soap_new___ns1__LoginManagerMultiAgentsToOneGroup(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerMultiAgentsToOneGroup(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginManagerMultiAgentsToOneGroup * soap_new_set___ns1__LoginManagerMultiAgentsToOneGroup(
	struct soap *soap,
	ns1__ACDMultiRequestType *ns1__LoginLogoutRequestAcdMultiAgents)
{
	struct __ns1__LoginManagerMultiAgentsToOneGroup *_p = soap_new___ns1__LoginManagerMultiAgentsToOneGroup(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerMultiAgentsToOneGroup(soap, _p);
		_p->ns1__LoginLogoutRequestAcdMultiAgents = ns1__LoginLogoutRequestAcdMultiAgents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginManagerMultiAgentsToOneGroup(struct soap*, const struct __ns1__LoginManagerMultiAgentsToOneGroup *, const char*, const char*);

inline int soap_write___ns1__LoginManagerMultiAgentsToOneGroup(struct soap *soap, struct __ns1__LoginManagerMultiAgentsToOneGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LoginManagerMultiAgentsToOneGroup(soap, p), 0) || soap_put___ns1__LoginManagerMultiAgentsToOneGroup(soap, p, "-ns1:LoginManagerMultiAgentsToOneGroup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LoginManagerMultiAgentsToOneGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerMultiAgentsToOneGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerMultiAgentsToOneGroup(soap, p), 0) || soap_put___ns1__LoginManagerMultiAgentsToOneGroup(soap, p, "-ns1:LoginManagerMultiAgentsToOneGroup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LoginManagerMultiAgentsToOneGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerMultiAgentsToOneGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerMultiAgentsToOneGroup(soap, p), 0) || soap_put___ns1__LoginManagerMultiAgentsToOneGroup(soap, p, "-ns1:LoginManagerMultiAgentsToOneGroup", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LoginManagerMultiAgentsToOneGroup * SOAP_FMAC4 soap_get___ns1__LoginManagerMultiAgentsToOneGroup(struct soap*, struct __ns1__LoginManagerMultiAgentsToOneGroup *, const char*, const char*);

inline int soap_read___ns1__LoginManagerMultiAgentsToOneGroup(struct soap *soap, struct __ns1__LoginManagerMultiAgentsToOneGroup *p)
{
	if (p)
	{	soap_default___ns1__LoginManagerMultiAgentsToOneGroup(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LoginManagerMultiAgentsToOneGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LoginManagerMultiAgentsToOneGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerMultiAgentsToOneGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LoginManagerMultiAgentsToOneGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LoginManagerMultiAgentsToOneGroup(struct soap *soap, struct __ns1__LoginManagerMultiAgentsToOneGroup *p)
{
	if (soap_read___ns1__LoginManagerMultiAgentsToOneGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LoginManagerOneAgentToMultiGroups_DEFINED
#define SOAP_TYPE___ns1__LoginManagerOneAgentToMultiGroups_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginManagerOneAgentToMultiGroups(struct soap*, struct __ns1__LoginManagerOneAgentToMultiGroups *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginManagerOneAgentToMultiGroups(struct soap*, const struct __ns1__LoginManagerOneAgentToMultiGroups *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginManagerOneAgentToMultiGroups(struct soap*, const char*, int, const struct __ns1__LoginManagerOneAgentToMultiGroups *, const char*);
SOAP_FMAC3 struct __ns1__LoginManagerOneAgentToMultiGroups * SOAP_FMAC4 soap_in___ns1__LoginManagerOneAgentToMultiGroups(struct soap*, const char*, struct __ns1__LoginManagerOneAgentToMultiGroups *, const char*);
SOAP_FMAC1 struct __ns1__LoginManagerOneAgentToMultiGroups * SOAP_FMAC2 soap_instantiate___ns1__LoginManagerOneAgentToMultiGroups(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginManagerOneAgentToMultiGroups * soap_new___ns1__LoginManagerOneAgentToMultiGroups(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LoginManagerOneAgentToMultiGroups(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LoginManagerOneAgentToMultiGroups * soap_new_req___ns1__LoginManagerOneAgentToMultiGroups(
	struct soap *soap)
{
	struct __ns1__LoginManagerOneAgentToMultiGroups *_p = soap_new___ns1__LoginManagerOneAgentToMultiGroups(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerOneAgentToMultiGroups(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginManagerOneAgentToMultiGroups * soap_new_set___ns1__LoginManagerOneAgentToMultiGroups(
	struct soap *soap,
	ns1__ACDMultiRequestType *ns1__LoginLogoutRequestAcdOneAgent)
{
	struct __ns1__LoginManagerOneAgentToMultiGroups *_p = soap_new___ns1__LoginManagerOneAgentToMultiGroups(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerOneAgentToMultiGroups(soap, _p);
		_p->ns1__LoginLogoutRequestAcdOneAgent = ns1__LoginLogoutRequestAcdOneAgent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginManagerOneAgentToMultiGroups(struct soap*, const struct __ns1__LoginManagerOneAgentToMultiGroups *, const char*, const char*);

inline int soap_write___ns1__LoginManagerOneAgentToMultiGroups(struct soap *soap, struct __ns1__LoginManagerOneAgentToMultiGroups const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LoginManagerOneAgentToMultiGroups(soap, p), 0) || soap_put___ns1__LoginManagerOneAgentToMultiGroups(soap, p, "-ns1:LoginManagerOneAgentToMultiGroups", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LoginManagerOneAgentToMultiGroups(struct soap *soap, const char *URL, struct __ns1__LoginManagerOneAgentToMultiGroups const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerOneAgentToMultiGroups(soap, p), 0) || soap_put___ns1__LoginManagerOneAgentToMultiGroups(soap, p, "-ns1:LoginManagerOneAgentToMultiGroups", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LoginManagerOneAgentToMultiGroups(struct soap *soap, const char *URL, struct __ns1__LoginManagerOneAgentToMultiGroups const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerOneAgentToMultiGroups(soap, p), 0) || soap_put___ns1__LoginManagerOneAgentToMultiGroups(soap, p, "-ns1:LoginManagerOneAgentToMultiGroups", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LoginManagerOneAgentToMultiGroups * SOAP_FMAC4 soap_get___ns1__LoginManagerOneAgentToMultiGroups(struct soap*, struct __ns1__LoginManagerOneAgentToMultiGroups *, const char*, const char*);

inline int soap_read___ns1__LoginManagerOneAgentToMultiGroups(struct soap *soap, struct __ns1__LoginManagerOneAgentToMultiGroups *p)
{
	if (p)
	{	soap_default___ns1__LoginManagerOneAgentToMultiGroups(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LoginManagerOneAgentToMultiGroups(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LoginManagerOneAgentToMultiGroups(struct soap *soap, const char *URL, struct __ns1__LoginManagerOneAgentToMultiGroups *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LoginManagerOneAgentToMultiGroups(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LoginManagerOneAgentToMultiGroups(struct soap *soap, struct __ns1__LoginManagerOneAgentToMultiGroups *p)
{
	if (soap_read___ns1__LoginManagerOneAgentToMultiGroups(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LoginManagerGroupsPerAgent_DEFINED
#define SOAP_TYPE___ns1__LoginManagerGroupsPerAgent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginManagerGroupsPerAgent(struct soap*, struct __ns1__LoginManagerGroupsPerAgent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginManagerGroupsPerAgent(struct soap*, const struct __ns1__LoginManagerGroupsPerAgent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginManagerGroupsPerAgent(struct soap*, const char*, int, const struct __ns1__LoginManagerGroupsPerAgent *, const char*);
SOAP_FMAC3 struct __ns1__LoginManagerGroupsPerAgent * SOAP_FMAC4 soap_in___ns1__LoginManagerGroupsPerAgent(struct soap*, const char*, struct __ns1__LoginManagerGroupsPerAgent *, const char*);
SOAP_FMAC1 struct __ns1__LoginManagerGroupsPerAgent * SOAP_FMAC2 soap_instantiate___ns1__LoginManagerGroupsPerAgent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginManagerGroupsPerAgent * soap_new___ns1__LoginManagerGroupsPerAgent(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LoginManagerGroupsPerAgent(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LoginManagerGroupsPerAgent * soap_new_req___ns1__LoginManagerGroupsPerAgent(
	struct soap *soap)
{
	struct __ns1__LoginManagerGroupsPerAgent *_p = soap_new___ns1__LoginManagerGroupsPerAgent(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerGroupsPerAgent(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginManagerGroupsPerAgent * soap_new_set___ns1__LoginManagerGroupsPerAgent(
	struct soap *soap,
	ns1__LoginManagerRequestType *ns1__LoginManagerRequestGroups)
{
	struct __ns1__LoginManagerGroupsPerAgent *_p = soap_new___ns1__LoginManagerGroupsPerAgent(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerGroupsPerAgent(soap, _p);
		_p->ns1__LoginManagerRequestGroups = ns1__LoginManagerRequestGroups;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginManagerGroupsPerAgent(struct soap*, const struct __ns1__LoginManagerGroupsPerAgent *, const char*, const char*);

inline int soap_write___ns1__LoginManagerGroupsPerAgent(struct soap *soap, struct __ns1__LoginManagerGroupsPerAgent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LoginManagerGroupsPerAgent(soap, p), 0) || soap_put___ns1__LoginManagerGroupsPerAgent(soap, p, "-ns1:LoginManagerGroupsPerAgent", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LoginManagerGroupsPerAgent(struct soap *soap, const char *URL, struct __ns1__LoginManagerGroupsPerAgent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerGroupsPerAgent(soap, p), 0) || soap_put___ns1__LoginManagerGroupsPerAgent(soap, p, "-ns1:LoginManagerGroupsPerAgent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LoginManagerGroupsPerAgent(struct soap *soap, const char *URL, struct __ns1__LoginManagerGroupsPerAgent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerGroupsPerAgent(soap, p), 0) || soap_put___ns1__LoginManagerGroupsPerAgent(soap, p, "-ns1:LoginManagerGroupsPerAgent", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LoginManagerGroupsPerAgent * SOAP_FMAC4 soap_get___ns1__LoginManagerGroupsPerAgent(struct soap*, struct __ns1__LoginManagerGroupsPerAgent *, const char*, const char*);

inline int soap_read___ns1__LoginManagerGroupsPerAgent(struct soap *soap, struct __ns1__LoginManagerGroupsPerAgent *p)
{
	if (p)
	{	soap_default___ns1__LoginManagerGroupsPerAgent(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LoginManagerGroupsPerAgent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LoginManagerGroupsPerAgent(struct soap *soap, const char *URL, struct __ns1__LoginManagerGroupsPerAgent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LoginManagerGroupsPerAgent(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LoginManagerGroupsPerAgent(struct soap *soap, struct __ns1__LoginManagerGroupsPerAgent *p)
{
	if (soap_read___ns1__LoginManagerGroupsPerAgent(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LoginManagerAgentsPerGroup_DEFINED
#define SOAP_TYPE___ns1__LoginManagerAgentsPerGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginManagerAgentsPerGroup(struct soap*, struct __ns1__LoginManagerAgentsPerGroup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginManagerAgentsPerGroup(struct soap*, const struct __ns1__LoginManagerAgentsPerGroup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginManagerAgentsPerGroup(struct soap*, const char*, int, const struct __ns1__LoginManagerAgentsPerGroup *, const char*);
SOAP_FMAC3 struct __ns1__LoginManagerAgentsPerGroup * SOAP_FMAC4 soap_in___ns1__LoginManagerAgentsPerGroup(struct soap*, const char*, struct __ns1__LoginManagerAgentsPerGroup *, const char*);
SOAP_FMAC1 struct __ns1__LoginManagerAgentsPerGroup * SOAP_FMAC2 soap_instantiate___ns1__LoginManagerAgentsPerGroup(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginManagerAgentsPerGroup * soap_new___ns1__LoginManagerAgentsPerGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LoginManagerAgentsPerGroup(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LoginManagerAgentsPerGroup * soap_new_req___ns1__LoginManagerAgentsPerGroup(
	struct soap *soap)
{
	struct __ns1__LoginManagerAgentsPerGroup *_p = soap_new___ns1__LoginManagerAgentsPerGroup(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerAgentsPerGroup(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginManagerAgentsPerGroup * soap_new_set___ns1__LoginManagerAgentsPerGroup(
	struct soap *soap,
	ns1__LoginManagerRequestType *ns1__LoginManagerRequestAgents)
{
	struct __ns1__LoginManagerAgentsPerGroup *_p = soap_new___ns1__LoginManagerAgentsPerGroup(soap);
	if (_p)
	{	soap_default___ns1__LoginManagerAgentsPerGroup(soap, _p);
		_p->ns1__LoginManagerRequestAgents = ns1__LoginManagerRequestAgents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginManagerAgentsPerGroup(struct soap*, const struct __ns1__LoginManagerAgentsPerGroup *, const char*, const char*);

inline int soap_write___ns1__LoginManagerAgentsPerGroup(struct soap *soap, struct __ns1__LoginManagerAgentsPerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LoginManagerAgentsPerGroup(soap, p), 0) || soap_put___ns1__LoginManagerAgentsPerGroup(soap, p, "-ns1:LoginManagerAgentsPerGroup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LoginManagerAgentsPerGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerAgentsPerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerAgentsPerGroup(soap, p), 0) || soap_put___ns1__LoginManagerAgentsPerGroup(soap, p, "-ns1:LoginManagerAgentsPerGroup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LoginManagerAgentsPerGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerAgentsPerGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LoginManagerAgentsPerGroup(soap, p), 0) || soap_put___ns1__LoginManagerAgentsPerGroup(soap, p, "-ns1:LoginManagerAgentsPerGroup", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LoginManagerAgentsPerGroup * SOAP_FMAC4 soap_get___ns1__LoginManagerAgentsPerGroup(struct soap*, struct __ns1__LoginManagerAgentsPerGroup *, const char*, const char*);

inline int soap_read___ns1__LoginManagerAgentsPerGroup(struct soap *soap, struct __ns1__LoginManagerAgentsPerGroup *p)
{
	if (p)
	{	soap_default___ns1__LoginManagerAgentsPerGroup(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LoginManagerAgentsPerGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LoginManagerAgentsPerGroup(struct soap *soap, const char *URL, struct __ns1__LoginManagerAgentsPerGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LoginManagerAgentsPerGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LoginManagerAgentsPerGroup(struct soap *soap, struct __ns1__LoginManagerAgentsPerGroup *p)
{
	if (soap_read___ns1__LoginManagerAgentsPerGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DeleteReport_DEFINED
#define SOAP_TYPE___ns1__DeleteReport_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteReport(struct soap*, struct __ns1__DeleteReport *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteReport(struct soap*, const struct __ns1__DeleteReport *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteReport(struct soap*, const char*, int, const struct __ns1__DeleteReport *, const char*);
SOAP_FMAC3 struct __ns1__DeleteReport * SOAP_FMAC4 soap_in___ns1__DeleteReport(struct soap*, const char*, struct __ns1__DeleteReport *, const char*);
SOAP_FMAC1 struct __ns1__DeleteReport * SOAP_FMAC2 soap_instantiate___ns1__DeleteReport(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteReport * soap_new___ns1__DeleteReport(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DeleteReport(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DeleteReport * soap_new_req___ns1__DeleteReport(
	struct soap *soap)
{
	struct __ns1__DeleteReport *_p = soap_new___ns1__DeleteReport(soap);
	if (_p)
	{	soap_default___ns1__DeleteReport(soap, _p);
	}
	return _p;
}

inline struct __ns1__DeleteReport * soap_new_set___ns1__DeleteReport(
	struct soap *soap,
	ns1__RequestDeleteReportType *ns1__RequestDeleteReport)
{
	struct __ns1__DeleteReport *_p = soap_new___ns1__DeleteReport(soap);
	if (_p)
	{	soap_default___ns1__DeleteReport(soap, _p);
		_p->ns1__RequestDeleteReport = ns1__RequestDeleteReport;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteReport(struct soap*, const struct __ns1__DeleteReport *, const char*, const char*);

inline int soap_write___ns1__DeleteReport(struct soap *soap, struct __ns1__DeleteReport const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DeleteReport(soap, p), 0) || soap_put___ns1__DeleteReport(soap, p, "-ns1:DeleteReport", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DeleteReport(struct soap *soap, const char *URL, struct __ns1__DeleteReport const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DeleteReport(soap, p), 0) || soap_put___ns1__DeleteReport(soap, p, "-ns1:DeleteReport", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DeleteReport(struct soap *soap, const char *URL, struct __ns1__DeleteReport const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DeleteReport(soap, p), 0) || soap_put___ns1__DeleteReport(soap, p, "-ns1:DeleteReport", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DeleteReport * SOAP_FMAC4 soap_get___ns1__DeleteReport(struct soap*, struct __ns1__DeleteReport *, const char*, const char*);

inline int soap_read___ns1__DeleteReport(struct soap *soap, struct __ns1__DeleteReport *p)
{
	if (p)
	{	soap_default___ns1__DeleteReport(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DeleteReport(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DeleteReport(struct soap *soap, const char *URL, struct __ns1__DeleteReport *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DeleteReport(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DeleteReport(struct soap *soap, struct __ns1__DeleteReport *p)
{
	if (soap_read___ns1__DeleteReport(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SaveReport_DEFINED
#define SOAP_TYPE___ns1__SaveReport_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveReport(struct soap*, struct __ns1__SaveReport *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveReport(struct soap*, const struct __ns1__SaveReport *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveReport(struct soap*, const char*, int, const struct __ns1__SaveReport *, const char*);
SOAP_FMAC3 struct __ns1__SaveReport * SOAP_FMAC4 soap_in___ns1__SaveReport(struct soap*, const char*, struct __ns1__SaveReport *, const char*);
SOAP_FMAC1 struct __ns1__SaveReport * SOAP_FMAC2 soap_instantiate___ns1__SaveReport(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SaveReport * soap_new___ns1__SaveReport(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SaveReport(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SaveReport * soap_new_req___ns1__SaveReport(
	struct soap *soap)
{
	struct __ns1__SaveReport *_p = soap_new___ns1__SaveReport(soap);
	if (_p)
	{	soap_default___ns1__SaveReport(soap, _p);
	}
	return _p;
}

inline struct __ns1__SaveReport * soap_new_set___ns1__SaveReport(
	struct soap *soap,
	ns1__RequestSaveReportType *ns1__RequestSaveReport)
{
	struct __ns1__SaveReport *_p = soap_new___ns1__SaveReport(soap);
	if (_p)
	{	soap_default___ns1__SaveReport(soap, _p);
		_p->ns1__RequestSaveReport = ns1__RequestSaveReport;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveReport(struct soap*, const struct __ns1__SaveReport *, const char*, const char*);

inline int soap_write___ns1__SaveReport(struct soap *soap, struct __ns1__SaveReport const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SaveReport(soap, p), 0) || soap_put___ns1__SaveReport(soap, p, "-ns1:SaveReport", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SaveReport(struct soap *soap, const char *URL, struct __ns1__SaveReport const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveReport(soap, p), 0) || soap_put___ns1__SaveReport(soap, p, "-ns1:SaveReport", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SaveReport(struct soap *soap, const char *URL, struct __ns1__SaveReport const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveReport(soap, p), 0) || soap_put___ns1__SaveReport(soap, p, "-ns1:SaveReport", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SaveReport * SOAP_FMAC4 soap_get___ns1__SaveReport(struct soap*, struct __ns1__SaveReport *, const char*, const char*);

inline int soap_read___ns1__SaveReport(struct soap *soap, struct __ns1__SaveReport *p)
{
	if (p)
	{	soap_default___ns1__SaveReport(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SaveReport(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SaveReport(struct soap *soap, const char *URL, struct __ns1__SaveReport *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SaveReport(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SaveReport(struct soap *soap, struct __ns1__SaveReport *p)
{
	if (soap_read___ns1__SaveReport(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SaveWorkspase_DEFINED
#define SOAP_TYPE___ns1__SaveWorkspase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveWorkspase(struct soap*, struct __ns1__SaveWorkspase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveWorkspase(struct soap*, const struct __ns1__SaveWorkspase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveWorkspase(struct soap*, const char*, int, const struct __ns1__SaveWorkspase *, const char*);
SOAP_FMAC3 struct __ns1__SaveWorkspase * SOAP_FMAC4 soap_in___ns1__SaveWorkspase(struct soap*, const char*, struct __ns1__SaveWorkspase *, const char*);
SOAP_FMAC1 struct __ns1__SaveWorkspase * SOAP_FMAC2 soap_instantiate___ns1__SaveWorkspase(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SaveWorkspase * soap_new___ns1__SaveWorkspase(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SaveWorkspase(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SaveWorkspase * soap_new_req___ns1__SaveWorkspase(
	struct soap *soap)
{
	struct __ns1__SaveWorkspase *_p = soap_new___ns1__SaveWorkspase(soap);
	if (_p)
	{	soap_default___ns1__SaveWorkspase(soap, _p);
	}
	return _p;
}

inline struct __ns1__SaveWorkspase * soap_new_set___ns1__SaveWorkspase(
	struct soap *soap,
	ns1__SaveWorkspaseRequestType *ns1__RequestSaveWorkspase)
{
	struct __ns1__SaveWorkspase *_p = soap_new___ns1__SaveWorkspase(soap);
	if (_p)
	{	soap_default___ns1__SaveWorkspase(soap, _p);
		_p->ns1__RequestSaveWorkspase = ns1__RequestSaveWorkspase;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveWorkspase(struct soap*, const struct __ns1__SaveWorkspase *, const char*, const char*);

inline int soap_write___ns1__SaveWorkspase(struct soap *soap, struct __ns1__SaveWorkspase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SaveWorkspase(soap, p), 0) || soap_put___ns1__SaveWorkspase(soap, p, "-ns1:SaveWorkspase", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SaveWorkspase(struct soap *soap, const char *URL, struct __ns1__SaveWorkspase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveWorkspase(soap, p), 0) || soap_put___ns1__SaveWorkspase(soap, p, "-ns1:SaveWorkspase", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SaveWorkspase(struct soap *soap, const char *URL, struct __ns1__SaveWorkspase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveWorkspase(soap, p), 0) || soap_put___ns1__SaveWorkspase(soap, p, "-ns1:SaveWorkspase", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SaveWorkspase * SOAP_FMAC4 soap_get___ns1__SaveWorkspase(struct soap*, struct __ns1__SaveWorkspase *, const char*, const char*);

inline int soap_read___ns1__SaveWorkspase(struct soap *soap, struct __ns1__SaveWorkspase *p)
{
	if (p)
	{	soap_default___ns1__SaveWorkspase(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SaveWorkspase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SaveWorkspase(struct soap *soap, const char *URL, struct __ns1__SaveWorkspase *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SaveWorkspase(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SaveWorkspase(struct soap *soap, struct __ns1__SaveWorkspase *p)
{
	if (soap_read___ns1__SaveWorkspase(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CommandAgentTelephonyFeatures_DEFINED
#define SOAP_TYPE___ns1__CommandAgentTelephonyFeatures_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CommandAgentTelephonyFeatures(struct soap*, struct __ns1__CommandAgentTelephonyFeatures *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CommandAgentTelephonyFeatures(struct soap*, const struct __ns1__CommandAgentTelephonyFeatures *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CommandAgentTelephonyFeatures(struct soap*, const char*, int, const struct __ns1__CommandAgentTelephonyFeatures *, const char*);
SOAP_FMAC3 struct __ns1__CommandAgentTelephonyFeatures * SOAP_FMAC4 soap_in___ns1__CommandAgentTelephonyFeatures(struct soap*, const char*, struct __ns1__CommandAgentTelephonyFeatures *, const char*);
SOAP_FMAC1 struct __ns1__CommandAgentTelephonyFeatures * SOAP_FMAC2 soap_instantiate___ns1__CommandAgentTelephonyFeatures(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CommandAgentTelephonyFeatures * soap_new___ns1__CommandAgentTelephonyFeatures(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CommandAgentTelephonyFeatures(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CommandAgentTelephonyFeatures * soap_new_req___ns1__CommandAgentTelephonyFeatures(
	struct soap *soap)
{
	struct __ns1__CommandAgentTelephonyFeatures *_p = soap_new___ns1__CommandAgentTelephonyFeatures(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentTelephonyFeatures(soap, _p);
	}
	return _p;
}

inline struct __ns1__CommandAgentTelephonyFeatures * soap_new_set___ns1__CommandAgentTelephonyFeatures(
	struct soap *soap,
	ns1__TFRequestType *ns1__RequestTf)
{
	struct __ns1__CommandAgentTelephonyFeatures *_p = soap_new___ns1__CommandAgentTelephonyFeatures(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentTelephonyFeatures(soap, _p);
		_p->ns1__RequestTf = ns1__RequestTf;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CommandAgentTelephonyFeatures(struct soap*, const struct __ns1__CommandAgentTelephonyFeatures *, const char*, const char*);

inline int soap_write___ns1__CommandAgentTelephonyFeatures(struct soap *soap, struct __ns1__CommandAgentTelephonyFeatures const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CommandAgentTelephonyFeatures(soap, p), 0) || soap_put___ns1__CommandAgentTelephonyFeatures(soap, p, "-ns1:CommandAgentTelephonyFeatures", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CommandAgentTelephonyFeatures(struct soap *soap, const char *URL, struct __ns1__CommandAgentTelephonyFeatures const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentTelephonyFeatures(soap, p), 0) || soap_put___ns1__CommandAgentTelephonyFeatures(soap, p, "-ns1:CommandAgentTelephonyFeatures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CommandAgentTelephonyFeatures(struct soap *soap, const char *URL, struct __ns1__CommandAgentTelephonyFeatures const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentTelephonyFeatures(soap, p), 0) || soap_put___ns1__CommandAgentTelephonyFeatures(soap, p, "-ns1:CommandAgentTelephonyFeatures", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CommandAgentTelephonyFeatures * SOAP_FMAC4 soap_get___ns1__CommandAgentTelephonyFeatures(struct soap*, struct __ns1__CommandAgentTelephonyFeatures *, const char*, const char*);

inline int soap_read___ns1__CommandAgentTelephonyFeatures(struct soap *soap, struct __ns1__CommandAgentTelephonyFeatures *p)
{
	if (p)
	{	soap_default___ns1__CommandAgentTelephonyFeatures(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CommandAgentTelephonyFeatures(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CommandAgentTelephonyFeatures(struct soap *soap, const char *URL, struct __ns1__CommandAgentTelephonyFeatures *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CommandAgentTelephonyFeatures(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CommandAgentTelephonyFeatures(struct soap *soap, struct __ns1__CommandAgentTelephonyFeatures *p)
{
	if (soap_read___ns1__CommandAgentTelephonyFeatures(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CommandAgentStartRecord_DEFINED
#define SOAP_TYPE___ns1__CommandAgentStartRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CommandAgentStartRecord(struct soap*, struct __ns1__CommandAgentStartRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CommandAgentStartRecord(struct soap*, const struct __ns1__CommandAgentStartRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CommandAgentStartRecord(struct soap*, const char*, int, const struct __ns1__CommandAgentStartRecord *, const char*);
SOAP_FMAC3 struct __ns1__CommandAgentStartRecord * SOAP_FMAC4 soap_in___ns1__CommandAgentStartRecord(struct soap*, const char*, struct __ns1__CommandAgentStartRecord *, const char*);
SOAP_FMAC1 struct __ns1__CommandAgentStartRecord * SOAP_FMAC2 soap_instantiate___ns1__CommandAgentStartRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CommandAgentStartRecord * soap_new___ns1__CommandAgentStartRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CommandAgentStartRecord(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CommandAgentStartRecord * soap_new_req___ns1__CommandAgentStartRecord(
	struct soap *soap)
{
	struct __ns1__CommandAgentStartRecord *_p = soap_new___ns1__CommandAgentStartRecord(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentStartRecord(soap, _p);
	}
	return _p;
}

inline struct __ns1__CommandAgentStartRecord * soap_new_set___ns1__CommandAgentStartRecord(
	struct soap *soap,
	ns1__TFRequestType *ns1__StartRecordRequestAcd)
{
	struct __ns1__CommandAgentStartRecord *_p = soap_new___ns1__CommandAgentStartRecord(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentStartRecord(soap, _p);
		_p->ns1__StartRecordRequestAcd = ns1__StartRecordRequestAcd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CommandAgentStartRecord(struct soap*, const struct __ns1__CommandAgentStartRecord *, const char*, const char*);

inline int soap_write___ns1__CommandAgentStartRecord(struct soap *soap, struct __ns1__CommandAgentStartRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CommandAgentStartRecord(soap, p), 0) || soap_put___ns1__CommandAgentStartRecord(soap, p, "-ns1:CommandAgentStartRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CommandAgentStartRecord(struct soap *soap, const char *URL, struct __ns1__CommandAgentStartRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentStartRecord(soap, p), 0) || soap_put___ns1__CommandAgentStartRecord(soap, p, "-ns1:CommandAgentStartRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CommandAgentStartRecord(struct soap *soap, const char *URL, struct __ns1__CommandAgentStartRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentStartRecord(soap, p), 0) || soap_put___ns1__CommandAgentStartRecord(soap, p, "-ns1:CommandAgentStartRecord", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CommandAgentStartRecord * SOAP_FMAC4 soap_get___ns1__CommandAgentStartRecord(struct soap*, struct __ns1__CommandAgentStartRecord *, const char*, const char*);

inline int soap_read___ns1__CommandAgentStartRecord(struct soap *soap, struct __ns1__CommandAgentStartRecord *p)
{
	if (p)
	{	soap_default___ns1__CommandAgentStartRecord(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CommandAgentStartRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CommandAgentStartRecord(struct soap *soap, const char *URL, struct __ns1__CommandAgentStartRecord *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CommandAgentStartRecord(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CommandAgentStartRecord(struct soap *soap, struct __ns1__CommandAgentStartRecord *p)
{
	if (soap_read___ns1__CommandAgentStartRecord(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CommandAgentStartChat_DEFINED
#define SOAP_TYPE___ns1__CommandAgentStartChat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CommandAgentStartChat(struct soap*, struct __ns1__CommandAgentStartChat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CommandAgentStartChat(struct soap*, const struct __ns1__CommandAgentStartChat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CommandAgentStartChat(struct soap*, const char*, int, const struct __ns1__CommandAgentStartChat *, const char*);
SOAP_FMAC3 struct __ns1__CommandAgentStartChat * SOAP_FMAC4 soap_in___ns1__CommandAgentStartChat(struct soap*, const char*, struct __ns1__CommandAgentStartChat *, const char*);
SOAP_FMAC1 struct __ns1__CommandAgentStartChat * SOAP_FMAC2 soap_instantiate___ns1__CommandAgentStartChat(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CommandAgentStartChat * soap_new___ns1__CommandAgentStartChat(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CommandAgentStartChat(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CommandAgentStartChat * soap_new_req___ns1__CommandAgentStartChat(
	struct soap *soap)
{
	struct __ns1__CommandAgentStartChat *_p = soap_new___ns1__CommandAgentStartChat(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentStartChat(soap, _p);
	}
	return _p;
}

inline struct __ns1__CommandAgentStartChat * soap_new_set___ns1__CommandAgentStartChat(
	struct soap *soap,
	ns1__TFRequestType *ns1__StartChatRequestAcd)
{
	struct __ns1__CommandAgentStartChat *_p = soap_new___ns1__CommandAgentStartChat(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentStartChat(soap, _p);
		_p->ns1__StartChatRequestAcd = ns1__StartChatRequestAcd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CommandAgentStartChat(struct soap*, const struct __ns1__CommandAgentStartChat *, const char*, const char*);

inline int soap_write___ns1__CommandAgentStartChat(struct soap *soap, struct __ns1__CommandAgentStartChat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CommandAgentStartChat(soap, p), 0) || soap_put___ns1__CommandAgentStartChat(soap, p, "-ns1:CommandAgentStartChat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CommandAgentStartChat(struct soap *soap, const char *URL, struct __ns1__CommandAgentStartChat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentStartChat(soap, p), 0) || soap_put___ns1__CommandAgentStartChat(soap, p, "-ns1:CommandAgentStartChat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CommandAgentStartChat(struct soap *soap, const char *URL, struct __ns1__CommandAgentStartChat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentStartChat(soap, p), 0) || soap_put___ns1__CommandAgentStartChat(soap, p, "-ns1:CommandAgentStartChat", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CommandAgentStartChat * SOAP_FMAC4 soap_get___ns1__CommandAgentStartChat(struct soap*, struct __ns1__CommandAgentStartChat *, const char*, const char*);

inline int soap_read___ns1__CommandAgentStartChat(struct soap *soap, struct __ns1__CommandAgentStartChat *p)
{
	if (p)
	{	soap_default___ns1__CommandAgentStartChat(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CommandAgentStartChat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CommandAgentStartChat(struct soap *soap, const char *URL, struct __ns1__CommandAgentStartChat *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CommandAgentStartChat(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CommandAgentStartChat(struct soap *soap, struct __ns1__CommandAgentStartChat *p)
{
	if (soap_read___ns1__CommandAgentStartChat(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CommandAgentReleaseResume_DEFINED
#define SOAP_TYPE___ns1__CommandAgentReleaseResume_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CommandAgentReleaseResume(struct soap*, struct __ns1__CommandAgentReleaseResume *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CommandAgentReleaseResume(struct soap*, const struct __ns1__CommandAgentReleaseResume *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CommandAgentReleaseResume(struct soap*, const char*, int, const struct __ns1__CommandAgentReleaseResume *, const char*);
SOAP_FMAC3 struct __ns1__CommandAgentReleaseResume * SOAP_FMAC4 soap_in___ns1__CommandAgentReleaseResume(struct soap*, const char*, struct __ns1__CommandAgentReleaseResume *, const char*);
SOAP_FMAC1 struct __ns1__CommandAgentReleaseResume * SOAP_FMAC2 soap_instantiate___ns1__CommandAgentReleaseResume(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CommandAgentReleaseResume * soap_new___ns1__CommandAgentReleaseResume(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CommandAgentReleaseResume(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CommandAgentReleaseResume * soap_new_req___ns1__CommandAgentReleaseResume(
	struct soap *soap)
{
	struct __ns1__CommandAgentReleaseResume *_p = soap_new___ns1__CommandAgentReleaseResume(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentReleaseResume(soap, _p);
	}
	return _p;
}

inline struct __ns1__CommandAgentReleaseResume * soap_new_set___ns1__CommandAgentReleaseResume(
	struct soap *soap,
	ns1__ACDRequestType *ns1__ReleaseResumeRequestAcd)
{
	struct __ns1__CommandAgentReleaseResume *_p = soap_new___ns1__CommandAgentReleaseResume(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentReleaseResume(soap, _p);
		_p->ns1__ReleaseResumeRequestAcd = ns1__ReleaseResumeRequestAcd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CommandAgentReleaseResume(struct soap*, const struct __ns1__CommandAgentReleaseResume *, const char*, const char*);

inline int soap_write___ns1__CommandAgentReleaseResume(struct soap *soap, struct __ns1__CommandAgentReleaseResume const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CommandAgentReleaseResume(soap, p), 0) || soap_put___ns1__CommandAgentReleaseResume(soap, p, "-ns1:CommandAgentReleaseResume", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CommandAgentReleaseResume(struct soap *soap, const char *URL, struct __ns1__CommandAgentReleaseResume const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentReleaseResume(soap, p), 0) || soap_put___ns1__CommandAgentReleaseResume(soap, p, "-ns1:CommandAgentReleaseResume", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CommandAgentReleaseResume(struct soap *soap, const char *URL, struct __ns1__CommandAgentReleaseResume const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentReleaseResume(soap, p), 0) || soap_put___ns1__CommandAgentReleaseResume(soap, p, "-ns1:CommandAgentReleaseResume", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CommandAgentReleaseResume * SOAP_FMAC4 soap_get___ns1__CommandAgentReleaseResume(struct soap*, struct __ns1__CommandAgentReleaseResume *, const char*, const char*);

inline int soap_read___ns1__CommandAgentReleaseResume(struct soap *soap, struct __ns1__CommandAgentReleaseResume *p)
{
	if (p)
	{	soap_default___ns1__CommandAgentReleaseResume(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CommandAgentReleaseResume(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CommandAgentReleaseResume(struct soap *soap, const char *URL, struct __ns1__CommandAgentReleaseResume *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CommandAgentReleaseResume(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CommandAgentReleaseResume(struct soap *soap, struct __ns1__CommandAgentReleaseResume *p)
{
	if (soap_read___ns1__CommandAgentReleaseResume(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CommandAgentLoginLogout_DEFINED
#define SOAP_TYPE___ns1__CommandAgentLoginLogout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CommandAgentLoginLogout(struct soap*, struct __ns1__CommandAgentLoginLogout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CommandAgentLoginLogout(struct soap*, const struct __ns1__CommandAgentLoginLogout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CommandAgentLoginLogout(struct soap*, const char*, int, const struct __ns1__CommandAgentLoginLogout *, const char*);
SOAP_FMAC3 struct __ns1__CommandAgentLoginLogout * SOAP_FMAC4 soap_in___ns1__CommandAgentLoginLogout(struct soap*, const char*, struct __ns1__CommandAgentLoginLogout *, const char*);
SOAP_FMAC1 struct __ns1__CommandAgentLoginLogout * SOAP_FMAC2 soap_instantiate___ns1__CommandAgentLoginLogout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CommandAgentLoginLogout * soap_new___ns1__CommandAgentLoginLogout(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CommandAgentLoginLogout(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CommandAgentLoginLogout * soap_new_req___ns1__CommandAgentLoginLogout(
	struct soap *soap)
{
	struct __ns1__CommandAgentLoginLogout *_p = soap_new___ns1__CommandAgentLoginLogout(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentLoginLogout(soap, _p);
	}
	return _p;
}

inline struct __ns1__CommandAgentLoginLogout * soap_new_set___ns1__CommandAgentLoginLogout(
	struct soap *soap,
	ns1__ACDMultiRequestType *ns1__LoginLogoutRequestAcdComandAgent)
{
	struct __ns1__CommandAgentLoginLogout *_p = soap_new___ns1__CommandAgentLoginLogout(soap);
	if (_p)
	{	soap_default___ns1__CommandAgentLoginLogout(soap, _p);
		_p->ns1__LoginLogoutRequestAcdComandAgent = ns1__LoginLogoutRequestAcdComandAgent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CommandAgentLoginLogout(struct soap*, const struct __ns1__CommandAgentLoginLogout *, const char*, const char*);

inline int soap_write___ns1__CommandAgentLoginLogout(struct soap *soap, struct __ns1__CommandAgentLoginLogout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CommandAgentLoginLogout(soap, p), 0) || soap_put___ns1__CommandAgentLoginLogout(soap, p, "-ns1:CommandAgentLoginLogout", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CommandAgentLoginLogout(struct soap *soap, const char *URL, struct __ns1__CommandAgentLoginLogout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentLoginLogout(soap, p), 0) || soap_put___ns1__CommandAgentLoginLogout(soap, p, "-ns1:CommandAgentLoginLogout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CommandAgentLoginLogout(struct soap *soap, const char *URL, struct __ns1__CommandAgentLoginLogout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CommandAgentLoginLogout(soap, p), 0) || soap_put___ns1__CommandAgentLoginLogout(soap, p, "-ns1:CommandAgentLoginLogout", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CommandAgentLoginLogout * SOAP_FMAC4 soap_get___ns1__CommandAgentLoginLogout(struct soap*, struct __ns1__CommandAgentLoginLogout *, const char*, const char*);

inline int soap_read___ns1__CommandAgentLoginLogout(struct soap *soap, struct __ns1__CommandAgentLoginLogout *p)
{
	if (p)
	{	soap_default___ns1__CommandAgentLoginLogout(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CommandAgentLoginLogout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CommandAgentLoginLogout(struct soap *soap, const char *URL, struct __ns1__CommandAgentLoginLogout *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CommandAgentLoginLogout(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CommandAgentLoginLogout(struct soap *soap, struct __ns1__CommandAgentLoginLogout *p)
{
	if (soap_read___ns1__CommandAgentLoginLogout(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BriefEmailDNIS_DEFINED
#define SOAP_TYPE___ns1__BriefEmailDNIS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BriefEmailDNIS(struct soap*, struct __ns1__BriefEmailDNIS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BriefEmailDNIS(struct soap*, const struct __ns1__BriefEmailDNIS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BriefEmailDNIS(struct soap*, const char*, int, const struct __ns1__BriefEmailDNIS *, const char*);
SOAP_FMAC3 struct __ns1__BriefEmailDNIS * SOAP_FMAC4 soap_in___ns1__BriefEmailDNIS(struct soap*, const char*, struct __ns1__BriefEmailDNIS *, const char*);
SOAP_FMAC1 struct __ns1__BriefEmailDNIS * SOAP_FMAC2 soap_instantiate___ns1__BriefEmailDNIS(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BriefEmailDNIS * soap_new___ns1__BriefEmailDNIS(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BriefEmailDNIS(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BriefEmailDNIS * soap_new_req___ns1__BriefEmailDNIS(
	struct soap *soap)
{
	struct __ns1__BriefEmailDNIS *_p = soap_new___ns1__BriefEmailDNIS(soap);
	if (_p)
	{	soap_default___ns1__BriefEmailDNIS(soap, _p);
	}
	return _p;
}

inline struct __ns1__BriefEmailDNIS * soap_new_set___ns1__BriefEmailDNIS(
	struct soap *soap,
	ns1__BriefInfoRequestType *ns1__RequestBriefEMailDNISMatrix)
{
	struct __ns1__BriefEmailDNIS *_p = soap_new___ns1__BriefEmailDNIS(soap);
	if (_p)
	{	soap_default___ns1__BriefEmailDNIS(soap, _p);
		_p->ns1__RequestBriefEMailDNISMatrix = ns1__RequestBriefEMailDNISMatrix;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BriefEmailDNIS(struct soap*, const struct __ns1__BriefEmailDNIS *, const char*, const char*);

inline int soap_write___ns1__BriefEmailDNIS(struct soap *soap, struct __ns1__BriefEmailDNIS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BriefEmailDNIS(soap, p), 0) || soap_put___ns1__BriefEmailDNIS(soap, p, "-ns1:BriefEmailDNIS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BriefEmailDNIS(struct soap *soap, const char *URL, struct __ns1__BriefEmailDNIS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BriefEmailDNIS(soap, p), 0) || soap_put___ns1__BriefEmailDNIS(soap, p, "-ns1:BriefEmailDNIS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BriefEmailDNIS(struct soap *soap, const char *URL, struct __ns1__BriefEmailDNIS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BriefEmailDNIS(soap, p), 0) || soap_put___ns1__BriefEmailDNIS(soap, p, "-ns1:BriefEmailDNIS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BriefEmailDNIS * SOAP_FMAC4 soap_get___ns1__BriefEmailDNIS(struct soap*, struct __ns1__BriefEmailDNIS *, const char*, const char*);

inline int soap_read___ns1__BriefEmailDNIS(struct soap *soap, struct __ns1__BriefEmailDNIS *p)
{
	if (p)
	{	soap_default___ns1__BriefEmailDNIS(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BriefEmailDNIS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BriefEmailDNIS(struct soap *soap, const char *URL, struct __ns1__BriefEmailDNIS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BriefEmailDNIS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BriefEmailDNIS(struct soap *soap, struct __ns1__BriefEmailDNIS *p)
{
	if (soap_read___ns1__BriefEmailDNIS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BriefVoiceDNIS_DEFINED
#define SOAP_TYPE___ns1__BriefVoiceDNIS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BriefVoiceDNIS(struct soap*, struct __ns1__BriefVoiceDNIS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BriefVoiceDNIS(struct soap*, const struct __ns1__BriefVoiceDNIS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BriefVoiceDNIS(struct soap*, const char*, int, const struct __ns1__BriefVoiceDNIS *, const char*);
SOAP_FMAC3 struct __ns1__BriefVoiceDNIS * SOAP_FMAC4 soap_in___ns1__BriefVoiceDNIS(struct soap*, const char*, struct __ns1__BriefVoiceDNIS *, const char*);
SOAP_FMAC1 struct __ns1__BriefVoiceDNIS * SOAP_FMAC2 soap_instantiate___ns1__BriefVoiceDNIS(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BriefVoiceDNIS * soap_new___ns1__BriefVoiceDNIS(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BriefVoiceDNIS(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BriefVoiceDNIS * soap_new_req___ns1__BriefVoiceDNIS(
	struct soap *soap)
{
	struct __ns1__BriefVoiceDNIS *_p = soap_new___ns1__BriefVoiceDNIS(soap);
	if (_p)
	{	soap_default___ns1__BriefVoiceDNIS(soap, _p);
	}
	return _p;
}

inline struct __ns1__BriefVoiceDNIS * soap_new_set___ns1__BriefVoiceDNIS(
	struct soap *soap,
	ns1__BriefInfoRequestType *ns1__RequestBriefVoiceDNISMatrix)
{
	struct __ns1__BriefVoiceDNIS *_p = soap_new___ns1__BriefVoiceDNIS(soap);
	if (_p)
	{	soap_default___ns1__BriefVoiceDNIS(soap, _p);
		_p->ns1__RequestBriefVoiceDNISMatrix = ns1__RequestBriefVoiceDNISMatrix;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BriefVoiceDNIS(struct soap*, const struct __ns1__BriefVoiceDNIS *, const char*, const char*);

inline int soap_write___ns1__BriefVoiceDNIS(struct soap *soap, struct __ns1__BriefVoiceDNIS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BriefVoiceDNIS(soap, p), 0) || soap_put___ns1__BriefVoiceDNIS(soap, p, "-ns1:BriefVoiceDNIS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BriefVoiceDNIS(struct soap *soap, const char *URL, struct __ns1__BriefVoiceDNIS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BriefVoiceDNIS(soap, p), 0) || soap_put___ns1__BriefVoiceDNIS(soap, p, "-ns1:BriefVoiceDNIS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BriefVoiceDNIS(struct soap *soap, const char *URL, struct __ns1__BriefVoiceDNIS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BriefVoiceDNIS(soap, p), 0) || soap_put___ns1__BriefVoiceDNIS(soap, p, "-ns1:BriefVoiceDNIS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BriefVoiceDNIS * SOAP_FMAC4 soap_get___ns1__BriefVoiceDNIS(struct soap*, struct __ns1__BriefVoiceDNIS *, const char*, const char*);

inline int soap_read___ns1__BriefVoiceDNIS(struct soap *soap, struct __ns1__BriefVoiceDNIS *p)
{
	if (p)
	{	soap_default___ns1__BriefVoiceDNIS(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BriefVoiceDNIS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BriefVoiceDNIS(struct soap *soap, const char *URL, struct __ns1__BriefVoiceDNIS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BriefVoiceDNIS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BriefVoiceDNIS(struct soap *soap, struct __ns1__BriefVoiceDNIS *p)
{
	if (soap_read___ns1__BriefVoiceDNIS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__EmailDNISList_DEFINED
#define SOAP_TYPE___ns1__EmailDNISList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EmailDNISList(struct soap*, struct __ns1__EmailDNISList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EmailDNISList(struct soap*, const struct __ns1__EmailDNISList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EmailDNISList(struct soap*, const char*, int, const struct __ns1__EmailDNISList *, const char*);
SOAP_FMAC3 struct __ns1__EmailDNISList * SOAP_FMAC4 soap_in___ns1__EmailDNISList(struct soap*, const char*, struct __ns1__EmailDNISList *, const char*);
SOAP_FMAC1 struct __ns1__EmailDNISList * SOAP_FMAC2 soap_instantiate___ns1__EmailDNISList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EmailDNISList * soap_new___ns1__EmailDNISList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EmailDNISList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EmailDNISList * soap_new_req___ns1__EmailDNISList(
	struct soap *soap)
{
	struct __ns1__EmailDNISList *_p = soap_new___ns1__EmailDNISList(soap);
	if (_p)
	{	soap_default___ns1__EmailDNISList(soap, _p);
	}
	return _p;
}

inline struct __ns1__EmailDNISList * soap_new_set___ns1__EmailDNISList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestEmailDNISList)
{
	struct __ns1__EmailDNISList *_p = soap_new___ns1__EmailDNISList(soap);
	if (_p)
	{	soap_default___ns1__EmailDNISList(soap, _p);
		_p->ns1__RequestEmailDNISList = ns1__RequestEmailDNISList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EmailDNISList(struct soap*, const struct __ns1__EmailDNISList *, const char*, const char*);

inline int soap_write___ns1__EmailDNISList(struct soap *soap, struct __ns1__EmailDNISList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__EmailDNISList(soap, p), 0) || soap_put___ns1__EmailDNISList(soap, p, "-ns1:EmailDNISList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EmailDNISList(struct soap *soap, const char *URL, struct __ns1__EmailDNISList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EmailDNISList(soap, p), 0) || soap_put___ns1__EmailDNISList(soap, p, "-ns1:EmailDNISList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EmailDNISList(struct soap *soap, const char *URL, struct __ns1__EmailDNISList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EmailDNISList(soap, p), 0) || soap_put___ns1__EmailDNISList(soap, p, "-ns1:EmailDNISList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EmailDNISList * SOAP_FMAC4 soap_get___ns1__EmailDNISList(struct soap*, struct __ns1__EmailDNISList *, const char*, const char*);

inline int soap_read___ns1__EmailDNISList(struct soap *soap, struct __ns1__EmailDNISList *p)
{
	if (p)
	{	soap_default___ns1__EmailDNISList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__EmailDNISList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EmailDNISList(struct soap *soap, const char *URL, struct __ns1__EmailDNISList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__EmailDNISList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__EmailDNISList(struct soap *soap, struct __ns1__EmailDNISList *p)
{
	if (soap_read___ns1__EmailDNISList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__VoiceDNISList_DEFINED
#define SOAP_TYPE___ns1__VoiceDNISList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__VoiceDNISList(struct soap*, struct __ns1__VoiceDNISList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__VoiceDNISList(struct soap*, const struct __ns1__VoiceDNISList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__VoiceDNISList(struct soap*, const char*, int, const struct __ns1__VoiceDNISList *, const char*);
SOAP_FMAC3 struct __ns1__VoiceDNISList * SOAP_FMAC4 soap_in___ns1__VoiceDNISList(struct soap*, const char*, struct __ns1__VoiceDNISList *, const char*);
SOAP_FMAC1 struct __ns1__VoiceDNISList * SOAP_FMAC2 soap_instantiate___ns1__VoiceDNISList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__VoiceDNISList * soap_new___ns1__VoiceDNISList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__VoiceDNISList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__VoiceDNISList * soap_new_req___ns1__VoiceDNISList(
	struct soap *soap)
{
	struct __ns1__VoiceDNISList *_p = soap_new___ns1__VoiceDNISList(soap);
	if (_p)
	{	soap_default___ns1__VoiceDNISList(soap, _p);
	}
	return _p;
}

inline struct __ns1__VoiceDNISList * soap_new_set___ns1__VoiceDNISList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestVoiceDNISList)
{
	struct __ns1__VoiceDNISList *_p = soap_new___ns1__VoiceDNISList(soap);
	if (_p)
	{	soap_default___ns1__VoiceDNISList(soap, _p);
		_p->ns1__RequestVoiceDNISList = ns1__RequestVoiceDNISList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__VoiceDNISList(struct soap*, const struct __ns1__VoiceDNISList *, const char*, const char*);

inline int soap_write___ns1__VoiceDNISList(struct soap *soap, struct __ns1__VoiceDNISList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__VoiceDNISList(soap, p), 0) || soap_put___ns1__VoiceDNISList(soap, p, "-ns1:VoiceDNISList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__VoiceDNISList(struct soap *soap, const char *URL, struct __ns1__VoiceDNISList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__VoiceDNISList(soap, p), 0) || soap_put___ns1__VoiceDNISList(soap, p, "-ns1:VoiceDNISList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__VoiceDNISList(struct soap *soap, const char *URL, struct __ns1__VoiceDNISList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__VoiceDNISList(soap, p), 0) || soap_put___ns1__VoiceDNISList(soap, p, "-ns1:VoiceDNISList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__VoiceDNISList * SOAP_FMAC4 soap_get___ns1__VoiceDNISList(struct soap*, struct __ns1__VoiceDNISList *, const char*, const char*);

inline int soap_read___ns1__VoiceDNISList(struct soap *soap, struct __ns1__VoiceDNISList *p)
{
	if (p)
	{	soap_default___ns1__VoiceDNISList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__VoiceDNISList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__VoiceDNISList(struct soap *soap, const char *URL, struct __ns1__VoiceDNISList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__VoiceDNISList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__VoiceDNISList(struct soap *soap, struct __ns1__VoiceDNISList *p)
{
	if (soap_read___ns1__VoiceDNISList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportListData_DEFINED
#define SOAP_TYPE___ns1__ReportListData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportListData(struct soap*, struct __ns1__ReportListData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportListData(struct soap*, const struct __ns1__ReportListData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportListData(struct soap*, const char*, int, const struct __ns1__ReportListData *, const char*);
SOAP_FMAC3 struct __ns1__ReportListData * SOAP_FMAC4 soap_in___ns1__ReportListData(struct soap*, const char*, struct __ns1__ReportListData *, const char*);
SOAP_FMAC1 struct __ns1__ReportListData * SOAP_FMAC2 soap_instantiate___ns1__ReportListData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportListData * soap_new___ns1__ReportListData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportListData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportListData * soap_new_req___ns1__ReportListData(
	struct soap *soap)
{
	struct __ns1__ReportListData *_p = soap_new___ns1__ReportListData(soap);
	if (_p)
	{	soap_default___ns1__ReportListData(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportListData * soap_new_set___ns1__ReportListData(
	struct soap *soap,
	ns1__ReportListDataRequestType *ns1__RequestReportListData)
{
	struct __ns1__ReportListData *_p = soap_new___ns1__ReportListData(soap);
	if (_p)
	{	soap_default___ns1__ReportListData(soap, _p);
		_p->ns1__RequestReportListData = ns1__RequestReportListData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportListData(struct soap*, const struct __ns1__ReportListData *, const char*, const char*);

inline int soap_write___ns1__ReportListData(struct soap *soap, struct __ns1__ReportListData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportListData(soap, p), 0) || soap_put___ns1__ReportListData(soap, p, "-ns1:ReportListData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportListData(struct soap *soap, const char *URL, struct __ns1__ReportListData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReportListData(soap, p), 0) || soap_put___ns1__ReportListData(soap, p, "-ns1:ReportListData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportListData(struct soap *soap, const char *URL, struct __ns1__ReportListData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReportListData(soap, p), 0) || soap_put___ns1__ReportListData(soap, p, "-ns1:ReportListData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportListData * SOAP_FMAC4 soap_get___ns1__ReportListData(struct soap*, struct __ns1__ReportListData *, const char*, const char*);

inline int soap_read___ns1__ReportListData(struct soap *soap, struct __ns1__ReportListData *p)
{
	if (p)
	{	soap_default___ns1__ReportListData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportListData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportListData(struct soap *soap, const char *URL, struct __ns1__ReportListData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportListData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportListData(struct soap *soap, struct __ns1__ReportListData *p)
{
	if (soap_read___ns1__ReportListData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DefaultWorkspace_DEFINED
#define SOAP_TYPE___ns1__DefaultWorkspace_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DefaultWorkspace(struct soap*, struct __ns1__DefaultWorkspace *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DefaultWorkspace(struct soap*, const struct __ns1__DefaultWorkspace *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DefaultWorkspace(struct soap*, const char*, int, const struct __ns1__DefaultWorkspace *, const char*);
SOAP_FMAC3 struct __ns1__DefaultWorkspace * SOAP_FMAC4 soap_in___ns1__DefaultWorkspace(struct soap*, const char*, struct __ns1__DefaultWorkspace *, const char*);
SOAP_FMAC1 struct __ns1__DefaultWorkspace * SOAP_FMAC2 soap_instantiate___ns1__DefaultWorkspace(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DefaultWorkspace * soap_new___ns1__DefaultWorkspace(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DefaultWorkspace(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DefaultWorkspace * soap_new_req___ns1__DefaultWorkspace(
	struct soap *soap)
{
	struct __ns1__DefaultWorkspace *_p = soap_new___ns1__DefaultWorkspace(soap);
	if (_p)
	{	soap_default___ns1__DefaultWorkspace(soap, _p);
	}
	return _p;
}

inline struct __ns1__DefaultWorkspace * soap_new_set___ns1__DefaultWorkspace(
	struct soap *soap,
	ns1__DefaultWorkspaceRequestType *ns1__RequestDefaultWorkspace)
{
	struct __ns1__DefaultWorkspace *_p = soap_new___ns1__DefaultWorkspace(soap);
	if (_p)
	{	soap_default___ns1__DefaultWorkspace(soap, _p);
		_p->ns1__RequestDefaultWorkspace = ns1__RequestDefaultWorkspace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DefaultWorkspace(struct soap*, const struct __ns1__DefaultWorkspace *, const char*, const char*);

inline int soap_write___ns1__DefaultWorkspace(struct soap *soap, struct __ns1__DefaultWorkspace const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DefaultWorkspace(soap, p), 0) || soap_put___ns1__DefaultWorkspace(soap, p, "-ns1:DefaultWorkspace", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DefaultWorkspace(struct soap *soap, const char *URL, struct __ns1__DefaultWorkspace const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DefaultWorkspace(soap, p), 0) || soap_put___ns1__DefaultWorkspace(soap, p, "-ns1:DefaultWorkspace", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DefaultWorkspace(struct soap *soap, const char *URL, struct __ns1__DefaultWorkspace const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DefaultWorkspace(soap, p), 0) || soap_put___ns1__DefaultWorkspace(soap, p, "-ns1:DefaultWorkspace", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DefaultWorkspace * SOAP_FMAC4 soap_get___ns1__DefaultWorkspace(struct soap*, struct __ns1__DefaultWorkspace *, const char*, const char*);

inline int soap_read___ns1__DefaultWorkspace(struct soap *soap, struct __ns1__DefaultWorkspace *p)
{
	if (p)
	{	soap_default___ns1__DefaultWorkspace(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DefaultWorkspace(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DefaultWorkspace(struct soap *soap, const char *URL, struct __ns1__DefaultWorkspace *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DefaultWorkspace(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DefaultWorkspace(struct soap *soap, struct __ns1__DefaultWorkspace *p)
{
	if (soap_read___ns1__DefaultWorkspace(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BriefAgents_DEFINED
#define SOAP_TYPE___ns1__BriefAgents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BriefAgents(struct soap*, struct __ns1__BriefAgents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BriefAgents(struct soap*, const struct __ns1__BriefAgents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BriefAgents(struct soap*, const char*, int, const struct __ns1__BriefAgents *, const char*);
SOAP_FMAC3 struct __ns1__BriefAgents * SOAP_FMAC4 soap_in___ns1__BriefAgents(struct soap*, const char*, struct __ns1__BriefAgents *, const char*);
SOAP_FMAC1 struct __ns1__BriefAgents * SOAP_FMAC2 soap_instantiate___ns1__BriefAgents(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BriefAgents * soap_new___ns1__BriefAgents(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BriefAgents(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BriefAgents * soap_new_req___ns1__BriefAgents(
	struct soap *soap)
{
	struct __ns1__BriefAgents *_p = soap_new___ns1__BriefAgents(soap);
	if (_p)
	{	soap_default___ns1__BriefAgents(soap, _p);
	}
	return _p;
}

inline struct __ns1__BriefAgents * soap_new_set___ns1__BriefAgents(
	struct soap *soap,
	ns1__BriefInfoRequestType *ns1__RequestBriefAgentsMatrix)
{
	struct __ns1__BriefAgents *_p = soap_new___ns1__BriefAgents(soap);
	if (_p)
	{	soap_default___ns1__BriefAgents(soap, _p);
		_p->ns1__RequestBriefAgentsMatrix = ns1__RequestBriefAgentsMatrix;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BriefAgents(struct soap*, const struct __ns1__BriefAgents *, const char*, const char*);

inline int soap_write___ns1__BriefAgents(struct soap *soap, struct __ns1__BriefAgents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BriefAgents(soap, p), 0) || soap_put___ns1__BriefAgents(soap, p, "-ns1:BriefAgents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BriefAgents(struct soap *soap, const char *URL, struct __ns1__BriefAgents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BriefAgents(soap, p), 0) || soap_put___ns1__BriefAgents(soap, p, "-ns1:BriefAgents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BriefAgents(struct soap *soap, const char *URL, struct __ns1__BriefAgents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BriefAgents(soap, p), 0) || soap_put___ns1__BriefAgents(soap, p, "-ns1:BriefAgents", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BriefAgents * SOAP_FMAC4 soap_get___ns1__BriefAgents(struct soap*, struct __ns1__BriefAgents *, const char*, const char*);

inline int soap_read___ns1__BriefAgents(struct soap *soap, struct __ns1__BriefAgents *p)
{
	if (p)
	{	soap_default___ns1__BriefAgents(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BriefAgents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BriefAgents(struct soap *soap, const char *URL, struct __ns1__BriefAgents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BriefAgents(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BriefAgents(struct soap *soap, struct __ns1__BriefAgents *p)
{
	if (soap_read___ns1__BriefAgents(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__AgentsList_DEFINED
#define SOAP_TYPE___ns1__AgentsList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AgentsList(struct soap*, struct __ns1__AgentsList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AgentsList(struct soap*, const struct __ns1__AgentsList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AgentsList(struct soap*, const char*, int, const struct __ns1__AgentsList *, const char*);
SOAP_FMAC3 struct __ns1__AgentsList * SOAP_FMAC4 soap_in___ns1__AgentsList(struct soap*, const char*, struct __ns1__AgentsList *, const char*);
SOAP_FMAC1 struct __ns1__AgentsList * SOAP_FMAC2 soap_instantiate___ns1__AgentsList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AgentsList * soap_new___ns1__AgentsList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__AgentsList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AgentsList * soap_new_req___ns1__AgentsList(
	struct soap *soap)
{
	struct __ns1__AgentsList *_p = soap_new___ns1__AgentsList(soap);
	if (_p)
	{	soap_default___ns1__AgentsList(soap, _p);
	}
	return _p;
}

inline struct __ns1__AgentsList * soap_new_set___ns1__AgentsList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestAgentsList)
{
	struct __ns1__AgentsList *_p = soap_new___ns1__AgentsList(soap);
	if (_p)
	{	soap_default___ns1__AgentsList(soap, _p);
		_p->ns1__RequestAgentsList = ns1__RequestAgentsList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AgentsList(struct soap*, const struct __ns1__AgentsList *, const char*, const char*);

inline int soap_write___ns1__AgentsList(struct soap *soap, struct __ns1__AgentsList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__AgentsList(soap, p), 0) || soap_put___ns1__AgentsList(soap, p, "-ns1:AgentsList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AgentsList(struct soap *soap, const char *URL, struct __ns1__AgentsList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AgentsList(soap, p), 0) || soap_put___ns1__AgentsList(soap, p, "-ns1:AgentsList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AgentsList(struct soap *soap, const char *URL, struct __ns1__AgentsList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AgentsList(soap, p), 0) || soap_put___ns1__AgentsList(soap, p, "-ns1:AgentsList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AgentsList * SOAP_FMAC4 soap_get___ns1__AgentsList(struct soap*, struct __ns1__AgentsList *, const char*, const char*);

inline int soap_read___ns1__AgentsList(struct soap *soap, struct __ns1__AgentsList *p)
{
	if (p)
	{	soap_default___ns1__AgentsList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__AgentsList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AgentsList(struct soap *soap, const char *URL, struct __ns1__AgentsList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__AgentsList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__AgentsList(struct soap *soap, struct __ns1__AgentsList *p)
{
	if (soap_read___ns1__AgentsList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__AgentsPerGroupInfo_DEFINED
#define SOAP_TYPE___ns1__AgentsPerGroupInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AgentsPerGroupInfo(struct soap*, struct __ns1__AgentsPerGroupInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AgentsPerGroupInfo(struct soap*, const struct __ns1__AgentsPerGroupInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AgentsPerGroupInfo(struct soap*, const char*, int, const struct __ns1__AgentsPerGroupInfo *, const char*);
SOAP_FMAC3 struct __ns1__AgentsPerGroupInfo * SOAP_FMAC4 soap_in___ns1__AgentsPerGroupInfo(struct soap*, const char*, struct __ns1__AgentsPerGroupInfo *, const char*);
SOAP_FMAC1 struct __ns1__AgentsPerGroupInfo * SOAP_FMAC2 soap_instantiate___ns1__AgentsPerGroupInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AgentsPerGroupInfo * soap_new___ns1__AgentsPerGroupInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__AgentsPerGroupInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AgentsPerGroupInfo * soap_new_req___ns1__AgentsPerGroupInfo(
	struct soap *soap)
{
	struct __ns1__AgentsPerGroupInfo *_p = soap_new___ns1__AgentsPerGroupInfo(soap);
	if (_p)
	{	soap_default___ns1__AgentsPerGroupInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__AgentsPerGroupInfo * soap_new_set___ns1__AgentsPerGroupInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupAgentsMatrix)
{
	struct __ns1__AgentsPerGroupInfo *_p = soap_new___ns1__AgentsPerGroupInfo(soap);
	if (_p)
	{	soap_default___ns1__AgentsPerGroupInfo(soap, _p);
		_p->ns1__RequestGroupAgentsMatrix = ns1__RequestGroupAgentsMatrix;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AgentsPerGroupInfo(struct soap*, const struct __ns1__AgentsPerGroupInfo *, const char*, const char*);

inline int soap_write___ns1__AgentsPerGroupInfo(struct soap *soap, struct __ns1__AgentsPerGroupInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__AgentsPerGroupInfo(soap, p), 0) || soap_put___ns1__AgentsPerGroupInfo(soap, p, "-ns1:AgentsPerGroupInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AgentsPerGroupInfo(struct soap *soap, const char *URL, struct __ns1__AgentsPerGroupInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AgentsPerGroupInfo(soap, p), 0) || soap_put___ns1__AgentsPerGroupInfo(soap, p, "-ns1:AgentsPerGroupInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AgentsPerGroupInfo(struct soap *soap, const char *URL, struct __ns1__AgentsPerGroupInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AgentsPerGroupInfo(soap, p), 0) || soap_put___ns1__AgentsPerGroupInfo(soap, p, "-ns1:AgentsPerGroupInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AgentsPerGroupInfo * SOAP_FMAC4 soap_get___ns1__AgentsPerGroupInfo(struct soap*, struct __ns1__AgentsPerGroupInfo *, const char*, const char*);

inline int soap_read___ns1__AgentsPerGroupInfo(struct soap *soap, struct __ns1__AgentsPerGroupInfo *p)
{
	if (p)
	{	soap_default___ns1__AgentsPerGroupInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__AgentsPerGroupInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AgentsPerGroupInfo(struct soap *soap, const char *URL, struct __ns1__AgentsPerGroupInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__AgentsPerGroupInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__AgentsPerGroupInfo(struct soap *soap, struct __ns1__AgentsPerGroupInfo *p)
{
	if (soap_read___ns1__AgentsPerGroupInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__MailAccList_DEFINED
#define SOAP_TYPE___ns1__MailAccList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MailAccList(struct soap*, struct __ns1__MailAccList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MailAccList(struct soap*, const struct __ns1__MailAccList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MailAccList(struct soap*, const char*, int, const struct __ns1__MailAccList *, const char*);
SOAP_FMAC3 struct __ns1__MailAccList * SOAP_FMAC4 soap_in___ns1__MailAccList(struct soap*, const char*, struct __ns1__MailAccList *, const char*);
SOAP_FMAC1 struct __ns1__MailAccList * SOAP_FMAC2 soap_instantiate___ns1__MailAccList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__MailAccList * soap_new___ns1__MailAccList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__MailAccList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__MailAccList * soap_new_req___ns1__MailAccList(
	struct soap *soap)
{
	struct __ns1__MailAccList *_p = soap_new___ns1__MailAccList(soap);
	if (_p)
	{	soap_default___ns1__MailAccList(soap, _p);
	}
	return _p;
}

inline struct __ns1__MailAccList * soap_new_set___ns1__MailAccList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestMailAccList)
{
	struct __ns1__MailAccList *_p = soap_new___ns1__MailAccList(soap);
	if (_p)
	{	soap_default___ns1__MailAccList(soap, _p);
		_p->ns1__RequestMailAccList = ns1__RequestMailAccList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MailAccList(struct soap*, const struct __ns1__MailAccList *, const char*, const char*);

inline int soap_write___ns1__MailAccList(struct soap *soap, struct __ns1__MailAccList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__MailAccList(soap, p), 0) || soap_put___ns1__MailAccList(soap, p, "-ns1:MailAccList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__MailAccList(struct soap *soap, const char *URL, struct __ns1__MailAccList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__MailAccList(soap, p), 0) || soap_put___ns1__MailAccList(soap, p, "-ns1:MailAccList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__MailAccList(struct soap *soap, const char *URL, struct __ns1__MailAccList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__MailAccList(soap, p), 0) || soap_put___ns1__MailAccList(soap, p, "-ns1:MailAccList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__MailAccList * SOAP_FMAC4 soap_get___ns1__MailAccList(struct soap*, struct __ns1__MailAccList *, const char*, const char*);

inline int soap_read___ns1__MailAccList(struct soap *soap, struct __ns1__MailAccList *p)
{
	if (p)
	{	soap_default___ns1__MailAccList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__MailAccList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__MailAccList(struct soap *soap, const char *URL, struct __ns1__MailAccList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__MailAccList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__MailAccList(struct soap *soap, struct __ns1__MailAccList *p)
{
	if (soap_read___ns1__MailAccList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__IvrAppList_DEFINED
#define SOAP_TYPE___ns1__IvrAppList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IvrAppList(struct soap*, struct __ns1__IvrAppList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IvrAppList(struct soap*, const struct __ns1__IvrAppList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IvrAppList(struct soap*, const char*, int, const struct __ns1__IvrAppList *, const char*);
SOAP_FMAC3 struct __ns1__IvrAppList * SOAP_FMAC4 soap_in___ns1__IvrAppList(struct soap*, const char*, struct __ns1__IvrAppList *, const char*);
SOAP_FMAC1 struct __ns1__IvrAppList * SOAP_FMAC2 soap_instantiate___ns1__IvrAppList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__IvrAppList * soap_new___ns1__IvrAppList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__IvrAppList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__IvrAppList * soap_new_req___ns1__IvrAppList(
	struct soap *soap)
{
	struct __ns1__IvrAppList *_p = soap_new___ns1__IvrAppList(soap);
	if (_p)
	{	soap_default___ns1__IvrAppList(soap, _p);
	}
	return _p;
}

inline struct __ns1__IvrAppList * soap_new_set___ns1__IvrAppList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestIvrAppList)
{
	struct __ns1__IvrAppList *_p = soap_new___ns1__IvrAppList(soap);
	if (_p)
	{	soap_default___ns1__IvrAppList(soap, _p);
		_p->ns1__RequestIvrAppList = ns1__RequestIvrAppList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IvrAppList(struct soap*, const struct __ns1__IvrAppList *, const char*, const char*);

inline int soap_write___ns1__IvrAppList(struct soap *soap, struct __ns1__IvrAppList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__IvrAppList(soap, p), 0) || soap_put___ns1__IvrAppList(soap, p, "-ns1:IvrAppList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__IvrAppList(struct soap *soap, const char *URL, struct __ns1__IvrAppList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrAppList(soap, p), 0) || soap_put___ns1__IvrAppList(soap, p, "-ns1:IvrAppList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__IvrAppList(struct soap *soap, const char *URL, struct __ns1__IvrAppList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrAppList(soap, p), 0) || soap_put___ns1__IvrAppList(soap, p, "-ns1:IvrAppList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__IvrAppList * SOAP_FMAC4 soap_get___ns1__IvrAppList(struct soap*, struct __ns1__IvrAppList *, const char*, const char*);

inline int soap_read___ns1__IvrAppList(struct soap *soap, struct __ns1__IvrAppList *p)
{
	if (p)
	{	soap_default___ns1__IvrAppList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__IvrAppList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__IvrAppList(struct soap *soap, const char *URL, struct __ns1__IvrAppList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__IvrAppList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__IvrAppList(struct soap *soap, struct __ns1__IvrAppList *p)
{
	if (soap_read___ns1__IvrAppList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__IvrPortGroupList_DEFINED
#define SOAP_TYPE___ns1__IvrPortGroupList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IvrPortGroupList(struct soap*, struct __ns1__IvrPortGroupList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IvrPortGroupList(struct soap*, const struct __ns1__IvrPortGroupList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IvrPortGroupList(struct soap*, const char*, int, const struct __ns1__IvrPortGroupList *, const char*);
SOAP_FMAC3 struct __ns1__IvrPortGroupList * SOAP_FMAC4 soap_in___ns1__IvrPortGroupList(struct soap*, const char*, struct __ns1__IvrPortGroupList *, const char*);
SOAP_FMAC1 struct __ns1__IvrPortGroupList * SOAP_FMAC2 soap_instantiate___ns1__IvrPortGroupList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__IvrPortGroupList * soap_new___ns1__IvrPortGroupList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__IvrPortGroupList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__IvrPortGroupList * soap_new_req___ns1__IvrPortGroupList(
	struct soap *soap)
{
	struct __ns1__IvrPortGroupList *_p = soap_new___ns1__IvrPortGroupList(soap);
	if (_p)
	{	soap_default___ns1__IvrPortGroupList(soap, _p);
	}
	return _p;
}

inline struct __ns1__IvrPortGroupList * soap_new_set___ns1__IvrPortGroupList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestIvrPortGroupList)
{
	struct __ns1__IvrPortGroupList *_p = soap_new___ns1__IvrPortGroupList(soap);
	if (_p)
	{	soap_default___ns1__IvrPortGroupList(soap, _p);
		_p->ns1__RequestIvrPortGroupList = ns1__RequestIvrPortGroupList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IvrPortGroupList(struct soap*, const struct __ns1__IvrPortGroupList *, const char*, const char*);

inline int soap_write___ns1__IvrPortGroupList(struct soap *soap, struct __ns1__IvrPortGroupList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__IvrPortGroupList(soap, p), 0) || soap_put___ns1__IvrPortGroupList(soap, p, "-ns1:IvrPortGroupList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__IvrPortGroupList(struct soap *soap, const char *URL, struct __ns1__IvrPortGroupList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrPortGroupList(soap, p), 0) || soap_put___ns1__IvrPortGroupList(soap, p, "-ns1:IvrPortGroupList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__IvrPortGroupList(struct soap *soap, const char *URL, struct __ns1__IvrPortGroupList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrPortGroupList(soap, p), 0) || soap_put___ns1__IvrPortGroupList(soap, p, "-ns1:IvrPortGroupList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__IvrPortGroupList * SOAP_FMAC4 soap_get___ns1__IvrPortGroupList(struct soap*, struct __ns1__IvrPortGroupList *, const char*, const char*);

inline int soap_read___ns1__IvrPortGroupList(struct soap *soap, struct __ns1__IvrPortGroupList *p)
{
	if (p)
	{	soap_default___ns1__IvrPortGroupList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__IvrPortGroupList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__IvrPortGroupList(struct soap *soap, const char *URL, struct __ns1__IvrPortGroupList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__IvrPortGroupList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__IvrPortGroupList(struct soap *soap, struct __ns1__IvrPortGroupList *p)
{
	if (soap_read___ns1__IvrPortGroupList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupList_DEFINED
#define SOAP_TYPE___ns1__GroupList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupList(struct soap*, struct __ns1__GroupList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupList(struct soap*, const struct __ns1__GroupList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupList(struct soap*, const char*, int, const struct __ns1__GroupList *, const char*);
SOAP_FMAC3 struct __ns1__GroupList * SOAP_FMAC4 soap_in___ns1__GroupList(struct soap*, const char*, struct __ns1__GroupList *, const char*);
SOAP_FMAC1 struct __ns1__GroupList * SOAP_FMAC2 soap_instantiate___ns1__GroupList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupList * soap_new___ns1__GroupList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupList * soap_new_req___ns1__GroupList(
	struct soap *soap)
{
	struct __ns1__GroupList *_p = soap_new___ns1__GroupList(soap);
	if (_p)
	{	soap_default___ns1__GroupList(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupList * soap_new_set___ns1__GroupList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestGroupList)
{
	struct __ns1__GroupList *_p = soap_new___ns1__GroupList(soap);
	if (_p)
	{	soap_default___ns1__GroupList(soap, _p);
		_p->ns1__RequestGroupList = ns1__RequestGroupList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupList(struct soap*, const struct __ns1__GroupList *, const char*, const char*);

inline int soap_write___ns1__GroupList(struct soap *soap, struct __ns1__GroupList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupList(soap, p), 0) || soap_put___ns1__GroupList(soap, p, "-ns1:GroupList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupList(struct soap *soap, const char *URL, struct __ns1__GroupList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupList(soap, p), 0) || soap_put___ns1__GroupList(soap, p, "-ns1:GroupList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupList(struct soap *soap, const char *URL, struct __ns1__GroupList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupList(soap, p), 0) || soap_put___ns1__GroupList(soap, p, "-ns1:GroupList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupList * SOAP_FMAC4 soap_get___ns1__GroupList(struct soap*, struct __ns1__GroupList *, const char*, const char*);

inline int soap_read___ns1__GroupList(struct soap *soap, struct __ns1__GroupList *p)
{
	if (p)
	{	soap_default___ns1__GroupList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupList(struct soap *soap, const char *URL, struct __ns1__GroupList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupList(struct soap *soap, struct __ns1__GroupList *p)
{
	if (soap_read___ns1__GroupList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UserLogout_DEFINED
#define SOAP_TYPE___ns1__UserLogout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UserLogout(struct soap*, struct __ns1__UserLogout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UserLogout(struct soap*, const struct __ns1__UserLogout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UserLogout(struct soap*, const char*, int, const struct __ns1__UserLogout *, const char*);
SOAP_FMAC3 struct __ns1__UserLogout * SOAP_FMAC4 soap_in___ns1__UserLogout(struct soap*, const char*, struct __ns1__UserLogout *, const char*);
SOAP_FMAC1 struct __ns1__UserLogout * SOAP_FMAC2 soap_instantiate___ns1__UserLogout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UserLogout * soap_new___ns1__UserLogout(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UserLogout(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UserLogout * soap_new_req___ns1__UserLogout(
	struct soap *soap)
{
	struct __ns1__UserLogout *_p = soap_new___ns1__UserLogout(soap);
	if (_p)
	{	soap_default___ns1__UserLogout(soap, _p);
	}
	return _p;
}

inline struct __ns1__UserLogout * soap_new_set___ns1__UserLogout(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestUserLogout)
{
	struct __ns1__UserLogout *_p = soap_new___ns1__UserLogout(soap);
	if (_p)
	{	soap_default___ns1__UserLogout(soap, _p);
		_p->ns1__RequestUserLogout = ns1__RequestUserLogout;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UserLogout(struct soap*, const struct __ns1__UserLogout *, const char*, const char*);

inline int soap_write___ns1__UserLogout(struct soap *soap, struct __ns1__UserLogout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UserLogout(soap, p), 0) || soap_put___ns1__UserLogout(soap, p, "-ns1:UserLogout", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UserLogout(struct soap *soap, const char *URL, struct __ns1__UserLogout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UserLogout(soap, p), 0) || soap_put___ns1__UserLogout(soap, p, "-ns1:UserLogout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UserLogout(struct soap *soap, const char *URL, struct __ns1__UserLogout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UserLogout(soap, p), 0) || soap_put___ns1__UserLogout(soap, p, "-ns1:UserLogout", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UserLogout * SOAP_FMAC4 soap_get___ns1__UserLogout(struct soap*, struct __ns1__UserLogout *, const char*, const char*);

inline int soap_read___ns1__UserLogout(struct soap *soap, struct __ns1__UserLogout *p)
{
	if (p)
	{	soap_default___ns1__UserLogout(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UserLogout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UserLogout(struct soap *soap, const char *URL, struct __ns1__UserLogout *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UserLogout(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UserLogout(struct soap *soap, struct __ns1__UserLogout *p)
{
	if (soap_read___ns1__UserLogout(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UserLogin_DEFINED
#define SOAP_TYPE___ns1__UserLogin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UserLogin(struct soap*, struct __ns1__UserLogin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UserLogin(struct soap*, const struct __ns1__UserLogin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UserLogin(struct soap*, const char*, int, const struct __ns1__UserLogin *, const char*);
SOAP_FMAC3 struct __ns1__UserLogin * SOAP_FMAC4 soap_in___ns1__UserLogin(struct soap*, const char*, struct __ns1__UserLogin *, const char*);
SOAP_FMAC1 struct __ns1__UserLogin * SOAP_FMAC2 soap_instantiate___ns1__UserLogin(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UserLogin * soap_new___ns1__UserLogin(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UserLogin(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UserLogin * soap_new_req___ns1__UserLogin(
	struct soap *soap)
{
	struct __ns1__UserLogin *_p = soap_new___ns1__UserLogin(soap);
	if (_p)
	{	soap_default___ns1__UserLogin(soap, _p);
	}
	return _p;
}

inline struct __ns1__UserLogin * soap_new_set___ns1__UserLogin(
	struct soap *soap,
	ns1__LoginRequestType *ns1__RequestUserLogin)
{
	struct __ns1__UserLogin *_p = soap_new___ns1__UserLogin(soap);
	if (_p)
	{	soap_default___ns1__UserLogin(soap, _p);
		_p->ns1__RequestUserLogin = ns1__RequestUserLogin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UserLogin(struct soap*, const struct __ns1__UserLogin *, const char*, const char*);

inline int soap_write___ns1__UserLogin(struct soap *soap, struct __ns1__UserLogin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UserLogin(soap, p), 0) || soap_put___ns1__UserLogin(soap, p, "-ns1:UserLogin", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UserLogin(struct soap *soap, const char *URL, struct __ns1__UserLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UserLogin(soap, p), 0) || soap_put___ns1__UserLogin(soap, p, "-ns1:UserLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UserLogin(struct soap *soap, const char *URL, struct __ns1__UserLogin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UserLogin(soap, p), 0) || soap_put___ns1__UserLogin(soap, p, "-ns1:UserLogin", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UserLogin * SOAP_FMAC4 soap_get___ns1__UserLogin(struct soap*, struct __ns1__UserLogin *, const char*, const char*);

inline int soap_read___ns1__UserLogin(struct soap *soap, struct __ns1__UserLogin *p)
{
	if (p)
	{	soap_default___ns1__UserLogin(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UserLogin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UserLogin(struct soap *soap, const char *URL, struct __ns1__UserLogin *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UserLogin(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UserLogin(struct soap *soap, struct __ns1__UserLogin *p)
{
	if (soap_read___ns1__UserLogin(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SuperGroupList_DEFINED
#define SOAP_TYPE___ns1__SuperGroupList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SuperGroupList(struct soap*, struct __ns1__SuperGroupList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SuperGroupList(struct soap*, const struct __ns1__SuperGroupList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SuperGroupList(struct soap*, const char*, int, const struct __ns1__SuperGroupList *, const char*);
SOAP_FMAC3 struct __ns1__SuperGroupList * SOAP_FMAC4 soap_in___ns1__SuperGroupList(struct soap*, const char*, struct __ns1__SuperGroupList *, const char*);
SOAP_FMAC1 struct __ns1__SuperGroupList * SOAP_FMAC2 soap_instantiate___ns1__SuperGroupList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SuperGroupList * soap_new___ns1__SuperGroupList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SuperGroupList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SuperGroupList * soap_new_req___ns1__SuperGroupList(
	struct soap *soap)
{
	struct __ns1__SuperGroupList *_p = soap_new___ns1__SuperGroupList(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupList(soap, _p);
	}
	return _p;
}

inline struct __ns1__SuperGroupList * soap_new_set___ns1__SuperGroupList(
	struct soap *soap,
	ns1__GenRequestType *ns1__RequestSuperGroupList)
{
	struct __ns1__SuperGroupList *_p = soap_new___ns1__SuperGroupList(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupList(soap, _p);
		_p->ns1__RequestSuperGroupList = ns1__RequestSuperGroupList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SuperGroupList(struct soap*, const struct __ns1__SuperGroupList *, const char*, const char*);

inline int soap_write___ns1__SuperGroupList(struct soap *soap, struct __ns1__SuperGroupList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SuperGroupList(soap, p), 0) || soap_put___ns1__SuperGroupList(soap, p, "-ns1:SuperGroupList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SuperGroupList(struct soap *soap, const char *URL, struct __ns1__SuperGroupList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupList(soap, p), 0) || soap_put___ns1__SuperGroupList(soap, p, "-ns1:SuperGroupList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SuperGroupList(struct soap *soap, const char *URL, struct __ns1__SuperGroupList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupList(soap, p), 0) || soap_put___ns1__SuperGroupList(soap, p, "-ns1:SuperGroupList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SuperGroupList * SOAP_FMAC4 soap_get___ns1__SuperGroupList(struct soap*, struct __ns1__SuperGroupList *, const char*, const char*);

inline int soap_read___ns1__SuperGroupList(struct soap *soap, struct __ns1__SuperGroupList *p)
{
	if (p)
	{	soap_default___ns1__SuperGroupList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SuperGroupList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SuperGroupList(struct soap *soap, const char *URL, struct __ns1__SuperGroupList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SuperGroupList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SuperGroupList(struct soap *soap, struct __ns1__SuperGroupList *p)
{
	if (soap_read___ns1__SuperGroupList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SuperGroupInfo_DEFINED
#define SOAP_TYPE___ns1__SuperGroupInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SuperGroupInfo(struct soap*, struct __ns1__SuperGroupInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SuperGroupInfo(struct soap*, const struct __ns1__SuperGroupInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SuperGroupInfo(struct soap*, const char*, int, const struct __ns1__SuperGroupInfo *, const char*);
SOAP_FMAC3 struct __ns1__SuperGroupInfo * SOAP_FMAC4 soap_in___ns1__SuperGroupInfo(struct soap*, const char*, struct __ns1__SuperGroupInfo *, const char*);
SOAP_FMAC1 struct __ns1__SuperGroupInfo * SOAP_FMAC2 soap_instantiate___ns1__SuperGroupInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SuperGroupInfo * soap_new___ns1__SuperGroupInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SuperGroupInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SuperGroupInfo * soap_new_req___ns1__SuperGroupInfo(
	struct soap *soap)
{
	struct __ns1__SuperGroupInfo *_p = soap_new___ns1__SuperGroupInfo(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__SuperGroupInfo * soap_new_set___ns1__SuperGroupInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestSuperGroupInfo)
{
	struct __ns1__SuperGroupInfo *_p = soap_new___ns1__SuperGroupInfo(soap);
	if (_p)
	{	soap_default___ns1__SuperGroupInfo(soap, _p);
		_p->ns1__RequestSuperGroupInfo = ns1__RequestSuperGroupInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SuperGroupInfo(struct soap*, const struct __ns1__SuperGroupInfo *, const char*, const char*);

inline int soap_write___ns1__SuperGroupInfo(struct soap *soap, struct __ns1__SuperGroupInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SuperGroupInfo(soap, p), 0) || soap_put___ns1__SuperGroupInfo(soap, p, "-ns1:SuperGroupInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SuperGroupInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupInfo(soap, p), 0) || soap_put___ns1__SuperGroupInfo(soap, p, "-ns1:SuperGroupInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SuperGroupInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SuperGroupInfo(soap, p), 0) || soap_put___ns1__SuperGroupInfo(soap, p, "-ns1:SuperGroupInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SuperGroupInfo * SOAP_FMAC4 soap_get___ns1__SuperGroupInfo(struct soap*, struct __ns1__SuperGroupInfo *, const char*, const char*);

inline int soap_read___ns1__SuperGroupInfo(struct soap *soap, struct __ns1__SuperGroupInfo *p)
{
	if (p)
	{	soap_default___ns1__SuperGroupInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SuperGroupInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SuperGroupInfo(struct soap *soap, const char *URL, struct __ns1__SuperGroupInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SuperGroupInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SuperGroupInfo(struct soap *soap, struct __ns1__SuperGroupInfo *p)
{
	if (soap_read___ns1__SuperGroupInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__MailboxInfo_DEFINED
#define SOAP_TYPE___ns1__MailboxInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MailboxInfo(struct soap*, struct __ns1__MailboxInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MailboxInfo(struct soap*, const struct __ns1__MailboxInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MailboxInfo(struct soap*, const char*, int, const struct __ns1__MailboxInfo *, const char*);
SOAP_FMAC3 struct __ns1__MailboxInfo * SOAP_FMAC4 soap_in___ns1__MailboxInfo(struct soap*, const char*, struct __ns1__MailboxInfo *, const char*);
SOAP_FMAC1 struct __ns1__MailboxInfo * SOAP_FMAC2 soap_instantiate___ns1__MailboxInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__MailboxInfo * soap_new___ns1__MailboxInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__MailboxInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__MailboxInfo * soap_new_req___ns1__MailboxInfo(
	struct soap *soap)
{
	struct __ns1__MailboxInfo *_p = soap_new___ns1__MailboxInfo(soap);
	if (_p)
	{	soap_default___ns1__MailboxInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__MailboxInfo * soap_new_set___ns1__MailboxInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestMailboxInfo)
{
	struct __ns1__MailboxInfo *_p = soap_new___ns1__MailboxInfo(soap);
	if (_p)
	{	soap_default___ns1__MailboxInfo(soap, _p);
		_p->ns1__RequestMailboxInfo = ns1__RequestMailboxInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MailboxInfo(struct soap*, const struct __ns1__MailboxInfo *, const char*, const char*);

inline int soap_write___ns1__MailboxInfo(struct soap *soap, struct __ns1__MailboxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__MailboxInfo(soap, p), 0) || soap_put___ns1__MailboxInfo(soap, p, "-ns1:MailboxInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__MailboxInfo(struct soap *soap, const char *URL, struct __ns1__MailboxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__MailboxInfo(soap, p), 0) || soap_put___ns1__MailboxInfo(soap, p, "-ns1:MailboxInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__MailboxInfo(struct soap *soap, const char *URL, struct __ns1__MailboxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__MailboxInfo(soap, p), 0) || soap_put___ns1__MailboxInfo(soap, p, "-ns1:MailboxInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__MailboxInfo * SOAP_FMAC4 soap_get___ns1__MailboxInfo(struct soap*, struct __ns1__MailboxInfo *, const char*, const char*);

inline int soap_read___ns1__MailboxInfo(struct soap *soap, struct __ns1__MailboxInfo *p)
{
	if (p)
	{	soap_default___ns1__MailboxInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__MailboxInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__MailboxInfo(struct soap *soap, const char *URL, struct __ns1__MailboxInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__MailboxInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__MailboxInfo(struct soap *soap, struct __ns1__MailboxInfo *p)
{
	if (soap_read___ns1__MailboxInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__IvrGrpInfo_DEFINED
#define SOAP_TYPE___ns1__IvrGrpInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IvrGrpInfo(struct soap*, struct __ns1__IvrGrpInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IvrGrpInfo(struct soap*, const struct __ns1__IvrGrpInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IvrGrpInfo(struct soap*, const char*, int, const struct __ns1__IvrGrpInfo *, const char*);
SOAP_FMAC3 struct __ns1__IvrGrpInfo * SOAP_FMAC4 soap_in___ns1__IvrGrpInfo(struct soap*, const char*, struct __ns1__IvrGrpInfo *, const char*);
SOAP_FMAC1 struct __ns1__IvrGrpInfo * SOAP_FMAC2 soap_instantiate___ns1__IvrGrpInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__IvrGrpInfo * soap_new___ns1__IvrGrpInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__IvrGrpInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__IvrGrpInfo * soap_new_req___ns1__IvrGrpInfo(
	struct soap *soap)
{
	struct __ns1__IvrGrpInfo *_p = soap_new___ns1__IvrGrpInfo(soap);
	if (_p)
	{	soap_default___ns1__IvrGrpInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__IvrGrpInfo * soap_new_set___ns1__IvrGrpInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestIvrGrpInfo)
{
	struct __ns1__IvrGrpInfo *_p = soap_new___ns1__IvrGrpInfo(soap);
	if (_p)
	{	soap_default___ns1__IvrGrpInfo(soap, _p);
		_p->ns1__RequestIvrGrpInfo = ns1__RequestIvrGrpInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IvrGrpInfo(struct soap*, const struct __ns1__IvrGrpInfo *, const char*, const char*);

inline int soap_write___ns1__IvrGrpInfo(struct soap *soap, struct __ns1__IvrGrpInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__IvrGrpInfo(soap, p), 0) || soap_put___ns1__IvrGrpInfo(soap, p, "-ns1:IvrGrpInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__IvrGrpInfo(struct soap *soap, const char *URL, struct __ns1__IvrGrpInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrGrpInfo(soap, p), 0) || soap_put___ns1__IvrGrpInfo(soap, p, "-ns1:IvrGrpInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__IvrGrpInfo(struct soap *soap, const char *URL, struct __ns1__IvrGrpInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrGrpInfo(soap, p), 0) || soap_put___ns1__IvrGrpInfo(soap, p, "-ns1:IvrGrpInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__IvrGrpInfo * SOAP_FMAC4 soap_get___ns1__IvrGrpInfo(struct soap*, struct __ns1__IvrGrpInfo *, const char*, const char*);

inline int soap_read___ns1__IvrGrpInfo(struct soap *soap, struct __ns1__IvrGrpInfo *p)
{
	if (p)
	{	soap_default___ns1__IvrGrpInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__IvrGrpInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__IvrGrpInfo(struct soap *soap, const char *URL, struct __ns1__IvrGrpInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__IvrGrpInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__IvrGrpInfo(struct soap *soap, struct __ns1__IvrGrpInfo *p)
{
	if (soap_read___ns1__IvrGrpInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__IvrPortInfo_DEFINED
#define SOAP_TYPE___ns1__IvrPortInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IvrPortInfo(struct soap*, struct __ns1__IvrPortInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IvrPortInfo(struct soap*, const struct __ns1__IvrPortInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IvrPortInfo(struct soap*, const char*, int, const struct __ns1__IvrPortInfo *, const char*);
SOAP_FMAC3 struct __ns1__IvrPortInfo * SOAP_FMAC4 soap_in___ns1__IvrPortInfo(struct soap*, const char*, struct __ns1__IvrPortInfo *, const char*);
SOAP_FMAC1 struct __ns1__IvrPortInfo * SOAP_FMAC2 soap_instantiate___ns1__IvrPortInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__IvrPortInfo * soap_new___ns1__IvrPortInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__IvrPortInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__IvrPortInfo * soap_new_req___ns1__IvrPortInfo(
	struct soap *soap)
{
	struct __ns1__IvrPortInfo *_p = soap_new___ns1__IvrPortInfo(soap);
	if (_p)
	{	soap_default___ns1__IvrPortInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__IvrPortInfo * soap_new_set___ns1__IvrPortInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestIvrPortInfo)
{
	struct __ns1__IvrPortInfo *_p = soap_new___ns1__IvrPortInfo(soap);
	if (_p)
	{	soap_default___ns1__IvrPortInfo(soap, _p);
		_p->ns1__RequestIvrPortInfo = ns1__RequestIvrPortInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IvrPortInfo(struct soap*, const struct __ns1__IvrPortInfo *, const char*, const char*);

inline int soap_write___ns1__IvrPortInfo(struct soap *soap, struct __ns1__IvrPortInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__IvrPortInfo(soap, p), 0) || soap_put___ns1__IvrPortInfo(soap, p, "-ns1:IvrPortInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__IvrPortInfo(struct soap *soap, const char *URL, struct __ns1__IvrPortInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrPortInfo(soap, p), 0) || soap_put___ns1__IvrPortInfo(soap, p, "-ns1:IvrPortInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__IvrPortInfo(struct soap *soap, const char *URL, struct __ns1__IvrPortInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrPortInfo(soap, p), 0) || soap_put___ns1__IvrPortInfo(soap, p, "-ns1:IvrPortInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__IvrPortInfo * SOAP_FMAC4 soap_get___ns1__IvrPortInfo(struct soap*, struct __ns1__IvrPortInfo *, const char*, const char*);

inline int soap_read___ns1__IvrPortInfo(struct soap *soap, struct __ns1__IvrPortInfo *p)
{
	if (p)
	{	soap_default___ns1__IvrPortInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__IvrPortInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__IvrPortInfo(struct soap *soap, const char *URL, struct __ns1__IvrPortInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__IvrPortInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__IvrPortInfo(struct soap *soap, struct __ns1__IvrPortInfo *p)
{
	if (soap_read___ns1__IvrPortInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__IvrApplInfo_DEFINED
#define SOAP_TYPE___ns1__IvrApplInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IvrApplInfo(struct soap*, struct __ns1__IvrApplInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IvrApplInfo(struct soap*, const struct __ns1__IvrApplInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IvrApplInfo(struct soap*, const char*, int, const struct __ns1__IvrApplInfo *, const char*);
SOAP_FMAC3 struct __ns1__IvrApplInfo * SOAP_FMAC4 soap_in___ns1__IvrApplInfo(struct soap*, const char*, struct __ns1__IvrApplInfo *, const char*);
SOAP_FMAC1 struct __ns1__IvrApplInfo * SOAP_FMAC2 soap_instantiate___ns1__IvrApplInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__IvrApplInfo * soap_new___ns1__IvrApplInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__IvrApplInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__IvrApplInfo * soap_new_req___ns1__IvrApplInfo(
	struct soap *soap)
{
	struct __ns1__IvrApplInfo *_p = soap_new___ns1__IvrApplInfo(soap);
	if (_p)
	{	soap_default___ns1__IvrApplInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__IvrApplInfo * soap_new_set___ns1__IvrApplInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestIvrApplInfo)
{
	struct __ns1__IvrApplInfo *_p = soap_new___ns1__IvrApplInfo(soap);
	if (_p)
	{	soap_default___ns1__IvrApplInfo(soap, _p);
		_p->ns1__RequestIvrApplInfo = ns1__RequestIvrApplInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IvrApplInfo(struct soap*, const struct __ns1__IvrApplInfo *, const char*, const char*);

inline int soap_write___ns1__IvrApplInfo(struct soap *soap, struct __ns1__IvrApplInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__IvrApplInfo(soap, p), 0) || soap_put___ns1__IvrApplInfo(soap, p, "-ns1:IvrApplInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__IvrApplInfo(struct soap *soap, const char *URL, struct __ns1__IvrApplInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrApplInfo(soap, p), 0) || soap_put___ns1__IvrApplInfo(soap, p, "-ns1:IvrApplInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__IvrApplInfo(struct soap *soap, const char *URL, struct __ns1__IvrApplInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__IvrApplInfo(soap, p), 0) || soap_put___ns1__IvrApplInfo(soap, p, "-ns1:IvrApplInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__IvrApplInfo * SOAP_FMAC4 soap_get___ns1__IvrApplInfo(struct soap*, struct __ns1__IvrApplInfo *, const char*, const char*);

inline int soap_read___ns1__IvrApplInfo(struct soap *soap, struct __ns1__IvrApplInfo *p)
{
	if (p)
	{	soap_default___ns1__IvrApplInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__IvrApplInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__IvrApplInfo(struct soap *soap, const char *URL, struct __ns1__IvrApplInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__IvrApplInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__IvrApplInfo(struct soap *soap, struct __ns1__IvrApplInfo *p)
{
	if (soap_read___ns1__IvrApplInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupPeriodInfo_DEFINED
#define SOAP_TYPE___ns1__GroupPeriodInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupPeriodInfo(struct soap*, struct __ns1__GroupPeriodInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupPeriodInfo(struct soap*, const struct __ns1__GroupPeriodInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupPeriodInfo(struct soap*, const char*, int, const struct __ns1__GroupPeriodInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupPeriodInfo * SOAP_FMAC4 soap_in___ns1__GroupPeriodInfo(struct soap*, const char*, struct __ns1__GroupPeriodInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupPeriodInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupPeriodInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupPeriodInfo * soap_new___ns1__GroupPeriodInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupPeriodInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupPeriodInfo * soap_new_req___ns1__GroupPeriodInfo(
	struct soap *soap)
{
	struct __ns1__GroupPeriodInfo *_p = soap_new___ns1__GroupPeriodInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupPeriodInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupPeriodInfo * soap_new_set___ns1__GroupPeriodInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupPeriodInfo)
{
	struct __ns1__GroupPeriodInfo *_p = soap_new___ns1__GroupPeriodInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupPeriodInfo(soap, _p);
		_p->ns1__RequestGroupPeriodInfo = ns1__RequestGroupPeriodInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupPeriodInfo(struct soap*, const struct __ns1__GroupPeriodInfo *, const char*, const char*);

inline int soap_write___ns1__GroupPeriodInfo(struct soap *soap, struct __ns1__GroupPeriodInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupPeriodInfo(soap, p), 0) || soap_put___ns1__GroupPeriodInfo(soap, p, "-ns1:GroupPeriodInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupPeriodInfo(struct soap *soap, const char *URL, struct __ns1__GroupPeriodInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupPeriodInfo(soap, p), 0) || soap_put___ns1__GroupPeriodInfo(soap, p, "-ns1:GroupPeriodInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupPeriodInfo(struct soap *soap, const char *URL, struct __ns1__GroupPeriodInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupPeriodInfo(soap, p), 0) || soap_put___ns1__GroupPeriodInfo(soap, p, "-ns1:GroupPeriodInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupPeriodInfo * SOAP_FMAC4 soap_get___ns1__GroupPeriodInfo(struct soap*, struct __ns1__GroupPeriodInfo *, const char*, const char*);

inline int soap_read___ns1__GroupPeriodInfo(struct soap *soap, struct __ns1__GroupPeriodInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupPeriodInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupPeriodInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupPeriodInfo(struct soap *soap, const char *URL, struct __ns1__GroupPeriodInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupPeriodInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupPeriodInfo(struct soap *soap, struct __ns1__GroupPeriodInfo *p)
{
	if (soap_read___ns1__GroupPeriodInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupGeneralInfo_DEFINED
#define SOAP_TYPE___ns1__GroupGeneralInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupGeneralInfo(struct soap*, struct __ns1__GroupGeneralInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupGeneralInfo(struct soap*, const struct __ns1__GroupGeneralInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupGeneralInfo(struct soap*, const char*, int, const struct __ns1__GroupGeneralInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupGeneralInfo * SOAP_FMAC4 soap_in___ns1__GroupGeneralInfo(struct soap*, const char*, struct __ns1__GroupGeneralInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupGeneralInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupGeneralInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupGeneralInfo * soap_new___ns1__GroupGeneralInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupGeneralInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupGeneralInfo * soap_new_req___ns1__GroupGeneralInfo(
	struct soap *soap)
{
	struct __ns1__GroupGeneralInfo *_p = soap_new___ns1__GroupGeneralInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupGeneralInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupGeneralInfo * soap_new_set___ns1__GroupGeneralInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupGeneralInfo)
{
	struct __ns1__GroupGeneralInfo *_p = soap_new___ns1__GroupGeneralInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupGeneralInfo(soap, _p);
		_p->ns1__RequestGroupGeneralInfo = ns1__RequestGroupGeneralInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupGeneralInfo(struct soap*, const struct __ns1__GroupGeneralInfo *, const char*, const char*);

inline int soap_write___ns1__GroupGeneralInfo(struct soap *soap, struct __ns1__GroupGeneralInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupGeneralInfo(soap, p), 0) || soap_put___ns1__GroupGeneralInfo(soap, p, "-ns1:GroupGeneralInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupGeneralInfo(struct soap *soap, const char *URL, struct __ns1__GroupGeneralInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupGeneralInfo(soap, p), 0) || soap_put___ns1__GroupGeneralInfo(soap, p, "-ns1:GroupGeneralInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupGeneralInfo(struct soap *soap, const char *URL, struct __ns1__GroupGeneralInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupGeneralInfo(soap, p), 0) || soap_put___ns1__GroupGeneralInfo(soap, p, "-ns1:GroupGeneralInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupGeneralInfo * SOAP_FMAC4 soap_get___ns1__GroupGeneralInfo(struct soap*, struct __ns1__GroupGeneralInfo *, const char*, const char*);

inline int soap_read___ns1__GroupGeneralInfo(struct soap *soap, struct __ns1__GroupGeneralInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupGeneralInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupGeneralInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupGeneralInfo(struct soap *soap, const char *URL, struct __ns1__GroupGeneralInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupGeneralInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupGeneralInfo(struct soap *soap, struct __ns1__GroupGeneralInfo *p)
{
	if (soap_read___ns1__GroupGeneralInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupShiftInfo_DEFINED
#define SOAP_TYPE___ns1__GroupShiftInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupShiftInfo(struct soap*, struct __ns1__GroupShiftInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupShiftInfo(struct soap*, const struct __ns1__GroupShiftInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupShiftInfo(struct soap*, const char*, int, const struct __ns1__GroupShiftInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupShiftInfo * SOAP_FMAC4 soap_in___ns1__GroupShiftInfo(struct soap*, const char*, struct __ns1__GroupShiftInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupShiftInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupShiftInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupShiftInfo * soap_new___ns1__GroupShiftInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupShiftInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupShiftInfo * soap_new_req___ns1__GroupShiftInfo(
	struct soap *soap)
{
	struct __ns1__GroupShiftInfo *_p = soap_new___ns1__GroupShiftInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupShiftInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupShiftInfo * soap_new_set___ns1__GroupShiftInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupShiftInfo)
{
	struct __ns1__GroupShiftInfo *_p = soap_new___ns1__GroupShiftInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupShiftInfo(soap, _p);
		_p->ns1__RequestGroupShiftInfo = ns1__RequestGroupShiftInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupShiftInfo(struct soap*, const struct __ns1__GroupShiftInfo *, const char*, const char*);

inline int soap_write___ns1__GroupShiftInfo(struct soap *soap, struct __ns1__GroupShiftInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupShiftInfo(soap, p), 0) || soap_put___ns1__GroupShiftInfo(soap, p, "-ns1:GroupShiftInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupShiftInfo(struct soap *soap, const char *URL, struct __ns1__GroupShiftInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupShiftInfo(soap, p), 0) || soap_put___ns1__GroupShiftInfo(soap, p, "-ns1:GroupShiftInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupShiftInfo(struct soap *soap, const char *URL, struct __ns1__GroupShiftInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupShiftInfo(soap, p), 0) || soap_put___ns1__GroupShiftInfo(soap, p, "-ns1:GroupShiftInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupShiftInfo * SOAP_FMAC4 soap_get___ns1__GroupShiftInfo(struct soap*, struct __ns1__GroupShiftInfo *, const char*, const char*);

inline int soap_read___ns1__GroupShiftInfo(struct soap *soap, struct __ns1__GroupShiftInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupShiftInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupShiftInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupShiftInfo(struct soap *soap, const char *URL, struct __ns1__GroupShiftInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupShiftInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupShiftInfo(struct soap *soap, struct __ns1__GroupShiftInfo *p)
{
	if (soap_read___ns1__GroupShiftInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupIntOvfInfo_DEFINED
#define SOAP_TYPE___ns1__GroupIntOvfInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupIntOvfInfo(struct soap*, struct __ns1__GroupIntOvfInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupIntOvfInfo(struct soap*, const struct __ns1__GroupIntOvfInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupIntOvfInfo(struct soap*, const char*, int, const struct __ns1__GroupIntOvfInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupIntOvfInfo * SOAP_FMAC4 soap_in___ns1__GroupIntOvfInfo(struct soap*, const char*, struct __ns1__GroupIntOvfInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupIntOvfInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupIntOvfInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupIntOvfInfo * soap_new___ns1__GroupIntOvfInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupIntOvfInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupIntOvfInfo * soap_new_req___ns1__GroupIntOvfInfo(
	struct soap *soap)
{
	struct __ns1__GroupIntOvfInfo *_p = soap_new___ns1__GroupIntOvfInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupIntOvfInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupIntOvfInfo * soap_new_set___ns1__GroupIntOvfInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupIntOvfInfo)
{
	struct __ns1__GroupIntOvfInfo *_p = soap_new___ns1__GroupIntOvfInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupIntOvfInfo(soap, _p);
		_p->ns1__RequestGroupIntOvfInfo = ns1__RequestGroupIntOvfInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupIntOvfInfo(struct soap*, const struct __ns1__GroupIntOvfInfo *, const char*, const char*);

inline int soap_write___ns1__GroupIntOvfInfo(struct soap *soap, struct __ns1__GroupIntOvfInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupIntOvfInfo(soap, p), 0) || soap_put___ns1__GroupIntOvfInfo(soap, p, "-ns1:GroupIntOvfInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupIntOvfInfo(struct soap *soap, const char *URL, struct __ns1__GroupIntOvfInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupIntOvfInfo(soap, p), 0) || soap_put___ns1__GroupIntOvfInfo(soap, p, "-ns1:GroupIntOvfInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupIntOvfInfo(struct soap *soap, const char *URL, struct __ns1__GroupIntOvfInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupIntOvfInfo(soap, p), 0) || soap_put___ns1__GroupIntOvfInfo(soap, p, "-ns1:GroupIntOvfInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupIntOvfInfo * SOAP_FMAC4 soap_get___ns1__GroupIntOvfInfo(struct soap*, struct __ns1__GroupIntOvfInfo *, const char*, const char*);

inline int soap_read___ns1__GroupIntOvfInfo(struct soap *soap, struct __ns1__GroupIntOvfInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupIntOvfInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupIntOvfInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupIntOvfInfo(struct soap *soap, const char *URL, struct __ns1__GroupIntOvfInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupIntOvfInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupIntOvfInfo(struct soap *soap, struct __ns1__GroupIntOvfInfo *p)
{
	if (soap_read___ns1__GroupIntOvfInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupAbndInfo_DEFINED
#define SOAP_TYPE___ns1__GroupAbndInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupAbndInfo(struct soap*, struct __ns1__GroupAbndInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupAbndInfo(struct soap*, const struct __ns1__GroupAbndInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupAbndInfo(struct soap*, const char*, int, const struct __ns1__GroupAbndInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupAbndInfo * SOAP_FMAC4 soap_in___ns1__GroupAbndInfo(struct soap*, const char*, struct __ns1__GroupAbndInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupAbndInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupAbndInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupAbndInfo * soap_new___ns1__GroupAbndInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupAbndInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupAbndInfo * soap_new_req___ns1__GroupAbndInfo(
	struct soap *soap)
{
	struct __ns1__GroupAbndInfo *_p = soap_new___ns1__GroupAbndInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupAbndInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupAbndInfo * soap_new_set___ns1__GroupAbndInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupAbndInfo)
{
	struct __ns1__GroupAbndInfo *_p = soap_new___ns1__GroupAbndInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupAbndInfo(soap, _p);
		_p->ns1__RequestGroupAbndInfo = ns1__RequestGroupAbndInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupAbndInfo(struct soap*, const struct __ns1__GroupAbndInfo *, const char*, const char*);

inline int soap_write___ns1__GroupAbndInfo(struct soap *soap, struct __ns1__GroupAbndInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupAbndInfo(soap, p), 0) || soap_put___ns1__GroupAbndInfo(soap, p, "-ns1:GroupAbndInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupAbndInfo(struct soap *soap, const char *URL, struct __ns1__GroupAbndInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupAbndInfo(soap, p), 0) || soap_put___ns1__GroupAbndInfo(soap, p, "-ns1:GroupAbndInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupAbndInfo(struct soap *soap, const char *URL, struct __ns1__GroupAbndInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupAbndInfo(soap, p), 0) || soap_put___ns1__GroupAbndInfo(soap, p, "-ns1:GroupAbndInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupAbndInfo * SOAP_FMAC4 soap_get___ns1__GroupAbndInfo(struct soap*, struct __ns1__GroupAbndInfo *, const char*, const char*);

inline int soap_read___ns1__GroupAbndInfo(struct soap *soap, struct __ns1__GroupAbndInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupAbndInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupAbndInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupAbndInfo(struct soap *soap, const char *URL, struct __ns1__GroupAbndInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupAbndInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupAbndInfo(struct soap *soap, struct __ns1__GroupAbndInfo *p)
{
	if (soap_read___ns1__GroupAbndInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupAgentsInfo_DEFINED
#define SOAP_TYPE___ns1__GroupAgentsInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupAgentsInfo(struct soap*, struct __ns1__GroupAgentsInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupAgentsInfo(struct soap*, const struct __ns1__GroupAgentsInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupAgentsInfo(struct soap*, const char*, int, const struct __ns1__GroupAgentsInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupAgentsInfo * SOAP_FMAC4 soap_in___ns1__GroupAgentsInfo(struct soap*, const char*, struct __ns1__GroupAgentsInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupAgentsInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupAgentsInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupAgentsInfo * soap_new___ns1__GroupAgentsInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupAgentsInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupAgentsInfo * soap_new_req___ns1__GroupAgentsInfo(
	struct soap *soap)
{
	struct __ns1__GroupAgentsInfo *_p = soap_new___ns1__GroupAgentsInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupAgentsInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupAgentsInfo * soap_new_set___ns1__GroupAgentsInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupAgentsInfo)
{
	struct __ns1__GroupAgentsInfo *_p = soap_new___ns1__GroupAgentsInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupAgentsInfo(soap, _p);
		_p->ns1__RequestGroupAgentsInfo = ns1__RequestGroupAgentsInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupAgentsInfo(struct soap*, const struct __ns1__GroupAgentsInfo *, const char*, const char*);

inline int soap_write___ns1__GroupAgentsInfo(struct soap *soap, struct __ns1__GroupAgentsInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupAgentsInfo(soap, p), 0) || soap_put___ns1__GroupAgentsInfo(soap, p, "-ns1:GroupAgentsInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupAgentsInfo(struct soap *soap, const char *URL, struct __ns1__GroupAgentsInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupAgentsInfo(soap, p), 0) || soap_put___ns1__GroupAgentsInfo(soap, p, "-ns1:GroupAgentsInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupAgentsInfo(struct soap *soap, const char *URL, struct __ns1__GroupAgentsInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupAgentsInfo(soap, p), 0) || soap_put___ns1__GroupAgentsInfo(soap, p, "-ns1:GroupAgentsInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupAgentsInfo * SOAP_FMAC4 soap_get___ns1__GroupAgentsInfo(struct soap*, struct __ns1__GroupAgentsInfo *, const char*, const char*);

inline int soap_read___ns1__GroupAgentsInfo(struct soap *soap, struct __ns1__GroupAgentsInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupAgentsInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupAgentsInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupAgentsInfo(struct soap *soap, const char *URL, struct __ns1__GroupAgentsInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupAgentsInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupAgentsInfo(struct soap *soap, struct __ns1__GroupAgentsInfo *p)
{
	if (soap_read___ns1__GroupAgentsInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupQueInfo_DEFINED
#define SOAP_TYPE___ns1__GroupQueInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupQueInfo(struct soap*, struct __ns1__GroupQueInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupQueInfo(struct soap*, const struct __ns1__GroupQueInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupQueInfo(struct soap*, const char*, int, const struct __ns1__GroupQueInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupQueInfo * SOAP_FMAC4 soap_in___ns1__GroupQueInfo(struct soap*, const char*, struct __ns1__GroupQueInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupQueInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupQueInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupQueInfo * soap_new___ns1__GroupQueInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupQueInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupQueInfo * soap_new_req___ns1__GroupQueInfo(
	struct soap *soap)
{
	struct __ns1__GroupQueInfo *_p = soap_new___ns1__GroupQueInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupQueInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupQueInfo * soap_new_set___ns1__GroupQueInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupQueInfo)
{
	struct __ns1__GroupQueInfo *_p = soap_new___ns1__GroupQueInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupQueInfo(soap, _p);
		_p->ns1__RequestGroupQueInfo = ns1__RequestGroupQueInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupQueInfo(struct soap*, const struct __ns1__GroupQueInfo *, const char*, const char*);

inline int soap_write___ns1__GroupQueInfo(struct soap *soap, struct __ns1__GroupQueInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupQueInfo(soap, p), 0) || soap_put___ns1__GroupQueInfo(soap, p, "-ns1:GroupQueInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupQueInfo(struct soap *soap, const char *URL, struct __ns1__GroupQueInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupQueInfo(soap, p), 0) || soap_put___ns1__GroupQueInfo(soap, p, "-ns1:GroupQueInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupQueInfo(struct soap *soap, const char *URL, struct __ns1__GroupQueInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupQueInfo(soap, p), 0) || soap_put___ns1__GroupQueInfo(soap, p, "-ns1:GroupQueInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupQueInfo * SOAP_FMAC4 soap_get___ns1__GroupQueInfo(struct soap*, struct __ns1__GroupQueInfo *, const char*, const char*);

inline int soap_read___ns1__GroupQueInfo(struct soap *soap, struct __ns1__GroupQueInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupQueInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupQueInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupQueInfo(struct soap *soap, const char *URL, struct __ns1__GroupQueInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupQueInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupQueInfo(struct soap *soap, struct __ns1__GroupQueInfo *p)
{
	if (soap_read___ns1__GroupQueInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GroupDetailFullInfo_DEFINED
#define SOAP_TYPE___ns1__GroupDetailFullInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupDetailFullInfo(struct soap*, struct __ns1__GroupDetailFullInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupDetailFullInfo(struct soap*, const struct __ns1__GroupDetailFullInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupDetailFullInfo(struct soap*, const char*, int, const struct __ns1__GroupDetailFullInfo *, const char*);
SOAP_FMAC3 struct __ns1__GroupDetailFullInfo * SOAP_FMAC4 soap_in___ns1__GroupDetailFullInfo(struct soap*, const char*, struct __ns1__GroupDetailFullInfo *, const char*);
SOAP_FMAC1 struct __ns1__GroupDetailFullInfo * SOAP_FMAC2 soap_instantiate___ns1__GroupDetailFullInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GroupDetailFullInfo * soap_new___ns1__GroupDetailFullInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GroupDetailFullInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GroupDetailFullInfo * soap_new_req___ns1__GroupDetailFullInfo(
	struct soap *soap)
{
	struct __ns1__GroupDetailFullInfo *_p = soap_new___ns1__GroupDetailFullInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupDetailFullInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GroupDetailFullInfo * soap_new_set___ns1__GroupDetailFullInfo(
	struct soap *soap,
	ns1__GenInfoRequestType *ns1__RequestGroupDetailFullInfo)
{
	struct __ns1__GroupDetailFullInfo *_p = soap_new___ns1__GroupDetailFullInfo(soap);
	if (_p)
	{	soap_default___ns1__GroupDetailFullInfo(soap, _p);
		_p->ns1__RequestGroupDetailFullInfo = ns1__RequestGroupDetailFullInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupDetailFullInfo(struct soap*, const struct __ns1__GroupDetailFullInfo *, const char*, const char*);

inline int soap_write___ns1__GroupDetailFullInfo(struct soap *soap, struct __ns1__GroupDetailFullInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GroupDetailFullInfo(soap, p), 0) || soap_put___ns1__GroupDetailFullInfo(soap, p, "-ns1:GroupDetailFullInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GroupDetailFullInfo(struct soap *soap, const char *URL, struct __ns1__GroupDetailFullInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupDetailFullInfo(soap, p), 0) || soap_put___ns1__GroupDetailFullInfo(soap, p, "-ns1:GroupDetailFullInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GroupDetailFullInfo(struct soap *soap, const char *URL, struct __ns1__GroupDetailFullInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GroupDetailFullInfo(soap, p), 0) || soap_put___ns1__GroupDetailFullInfo(soap, p, "-ns1:GroupDetailFullInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GroupDetailFullInfo * SOAP_FMAC4 soap_get___ns1__GroupDetailFullInfo(struct soap*, struct __ns1__GroupDetailFullInfo *, const char*, const char*);

inline int soap_read___ns1__GroupDetailFullInfo(struct soap *soap, struct __ns1__GroupDetailFullInfo *p)
{
	if (p)
	{	soap_default___ns1__GroupDetailFullInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GroupDetailFullInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GroupDetailFullInfo(struct soap *soap, const char *URL, struct __ns1__GroupDetailFullInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GroupDetailFullInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GroupDetailFullInfo(struct soap *soap, struct __ns1__GroupDetailFullInfo *p)
{
	if (soap_read___ns1__GroupDetailFullInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__StatRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__StatRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StatRequestType(struct soap*, ns1__StatRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StatRequestType(struct soap*, const char *, int, ns1__StatRequestType *const*, const char *);
SOAP_FMAC3 ns1__StatRequestType ** SOAP_FMAC4 soap_in_PointerTons1__StatRequestType(struct soap*, const char*, ns1__StatRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StatRequestType(struct soap*, ns1__StatRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StatRequestType ** SOAP_FMAC4 soap_get_PointerTons1__StatRequestType(struct soap*, ns1__StatRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApplicationKeepAliveRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ApplicationKeepAliveRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApplicationKeepAliveRequestType(struct soap*, ns1__ApplicationKeepAliveRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApplicationKeepAliveRequestType(struct soap*, const char *, int, ns1__ApplicationKeepAliveRequestType *const*, const char *);
SOAP_FMAC3 ns1__ApplicationKeepAliveRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ApplicationKeepAliveRequestType(struct soap*, const char*, ns1__ApplicationKeepAliveRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApplicationKeepAliveRequestType(struct soap*, ns1__ApplicationKeepAliveRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApplicationKeepAliveRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ApplicationKeepAliveRequestType(struct soap*, ns1__ApplicationKeepAliveRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApplicationRegisterRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ApplicationRegisterRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApplicationRegisterRequestType(struct soap*, ns1__ApplicationRegisterRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApplicationRegisterRequestType(struct soap*, const char *, int, ns1__ApplicationRegisterRequestType *const*, const char *);
SOAP_FMAC3 ns1__ApplicationRegisterRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ApplicationRegisterRequestType(struct soap*, const char*, ns1__ApplicationRegisterRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApplicationRegisterRequestType(struct soap*, ns1__ApplicationRegisterRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApplicationRegisterRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ApplicationRegisterRequestType(struct soap*, ns1__ApplicationRegisterRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LoginManagerRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__LoginManagerRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LoginManagerRequestType(struct soap*, ns1__LoginManagerRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LoginManagerRequestType(struct soap*, const char *, int, ns1__LoginManagerRequestType *const*, const char *);
SOAP_FMAC3 ns1__LoginManagerRequestType ** SOAP_FMAC4 soap_in_PointerTons1__LoginManagerRequestType(struct soap*, const char*, ns1__LoginManagerRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LoginManagerRequestType(struct soap*, ns1__LoginManagerRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LoginManagerRequestType ** SOAP_FMAC4 soap_get_PointerTons1__LoginManagerRequestType(struct soap*, ns1__LoginManagerRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RequestDeleteReportType_DEFINED
#define SOAP_TYPE_PointerTons1__RequestDeleteReportType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RequestDeleteReportType(struct soap*, ns1__RequestDeleteReportType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RequestDeleteReportType(struct soap*, const char *, int, ns1__RequestDeleteReportType *const*, const char *);
SOAP_FMAC3 ns1__RequestDeleteReportType ** SOAP_FMAC4 soap_in_PointerTons1__RequestDeleteReportType(struct soap*, const char*, ns1__RequestDeleteReportType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RequestDeleteReportType(struct soap*, ns1__RequestDeleteReportType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RequestDeleteReportType ** SOAP_FMAC4 soap_get_PointerTons1__RequestDeleteReportType(struct soap*, ns1__RequestDeleteReportType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RequestSaveReportType_DEFINED
#define SOAP_TYPE_PointerTons1__RequestSaveReportType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RequestSaveReportType(struct soap*, ns1__RequestSaveReportType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RequestSaveReportType(struct soap*, const char *, int, ns1__RequestSaveReportType *const*, const char *);
SOAP_FMAC3 ns1__RequestSaveReportType ** SOAP_FMAC4 soap_in_PointerTons1__RequestSaveReportType(struct soap*, const char*, ns1__RequestSaveReportType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RequestSaveReportType(struct soap*, ns1__RequestSaveReportType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RequestSaveReportType ** SOAP_FMAC4 soap_get_PointerTons1__RequestSaveReportType(struct soap*, ns1__RequestSaveReportType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SaveWorkspaseRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SaveWorkspaseRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SaveWorkspaseRequestType(struct soap*, ns1__SaveWorkspaseRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SaveWorkspaseRequestType(struct soap*, const char *, int, ns1__SaveWorkspaseRequestType *const*, const char *);
SOAP_FMAC3 ns1__SaveWorkspaseRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SaveWorkspaseRequestType(struct soap*, const char*, ns1__SaveWorkspaseRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SaveWorkspaseRequestType(struct soap*, ns1__SaveWorkspaseRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SaveWorkspaseRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SaveWorkspaseRequestType(struct soap*, ns1__SaveWorkspaseRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TFRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__TFRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TFRequestType(struct soap*, ns1__TFRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TFRequestType(struct soap*, const char *, int, ns1__TFRequestType *const*, const char *);
SOAP_FMAC3 ns1__TFRequestType ** SOAP_FMAC4 soap_in_PointerTons1__TFRequestType(struct soap*, const char*, ns1__TFRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TFRequestType(struct soap*, ns1__TFRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TFRequestType ** SOAP_FMAC4 soap_get_PointerTons1__TFRequestType(struct soap*, ns1__TFRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ACDRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ACDRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ACDRequestType(struct soap*, ns1__ACDRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ACDRequestType(struct soap*, const char *, int, ns1__ACDRequestType *const*, const char *);
SOAP_FMAC3 ns1__ACDRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ACDRequestType(struct soap*, const char*, ns1__ACDRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ACDRequestType(struct soap*, ns1__ACDRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ACDRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ACDRequestType(struct soap*, ns1__ACDRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ACDMultiRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ACDMultiRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ACDMultiRequestType(struct soap*, ns1__ACDMultiRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ACDMultiRequestType(struct soap*, const char *, int, ns1__ACDMultiRequestType *const*, const char *);
SOAP_FMAC3 ns1__ACDMultiRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ACDMultiRequestType(struct soap*, const char*, ns1__ACDMultiRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ACDMultiRequestType(struct soap*, ns1__ACDMultiRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ACDMultiRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ACDMultiRequestType(struct soap*, ns1__ACDMultiRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReportListDataRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ReportListDataRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReportListDataRequestType(struct soap*, ns1__ReportListDataRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReportListDataRequestType(struct soap*, const char *, int, ns1__ReportListDataRequestType *const*, const char *);
SOAP_FMAC3 ns1__ReportListDataRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ReportListDataRequestType(struct soap*, const char*, ns1__ReportListDataRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReportListDataRequestType(struct soap*, ns1__ReportListDataRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReportListDataRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ReportListDataRequestType(struct soap*, ns1__ReportListDataRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DefaultWorkspaceRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DefaultWorkspaceRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DefaultWorkspaceRequestType(struct soap*, ns1__DefaultWorkspaceRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DefaultWorkspaceRequestType(struct soap*, const char *, int, ns1__DefaultWorkspaceRequestType *const*, const char *);
SOAP_FMAC3 ns1__DefaultWorkspaceRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DefaultWorkspaceRequestType(struct soap*, const char*, ns1__DefaultWorkspaceRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DefaultWorkspaceRequestType(struct soap*, ns1__DefaultWorkspaceRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DefaultWorkspaceRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DefaultWorkspaceRequestType(struct soap*, ns1__DefaultWorkspaceRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BriefInfoRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BriefInfoRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BriefInfoRequestType(struct soap*, ns1__BriefInfoRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BriefInfoRequestType(struct soap*, const char *, int, ns1__BriefInfoRequestType *const*, const char *);
SOAP_FMAC3 ns1__BriefInfoRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BriefInfoRequestType(struct soap*, const char*, ns1__BriefInfoRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BriefInfoRequestType(struct soap*, ns1__BriefInfoRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BriefInfoRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BriefInfoRequestType(struct soap*, ns1__BriefInfoRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LoginRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__LoginRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LoginRequestType(struct soap*, ns1__LoginRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LoginRequestType(struct soap*, const char *, int, ns1__LoginRequestType *const*, const char *);
SOAP_FMAC3 ns1__LoginRequestType ** SOAP_FMAC4 soap_in_PointerTons1__LoginRequestType(struct soap*, const char*, ns1__LoginRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LoginRequestType(struct soap*, ns1__LoginRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LoginRequestType ** SOAP_FMAC4 soap_get_PointerTons1__LoginRequestType(struct soap*, ns1__LoginRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GenRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenRequestType(struct soap*, ns1__GenRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenRequestType(struct soap*, const char *, int, ns1__GenRequestType *const*, const char *);
SOAP_FMAC3 ns1__GenRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GenRequestType(struct soap*, const char*, ns1__GenRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenRequestType(struct soap*, ns1__GenRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GenRequestType(struct soap*, ns1__GenRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenInfoRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GenInfoRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenInfoRequestType(struct soap*, ns1__GenInfoRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenInfoRequestType(struct soap*, const char *, int, ns1__GenInfoRequestType *const*, const char *);
SOAP_FMAC3 ns1__GenInfoRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GenInfoRequestType(struct soap*, const char*, ns1__GenInfoRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenInfoRequestType(struct soap*, ns1__GenInfoRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenInfoRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GenInfoRequestType(struct soap*, ns1__GenInfoRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StatItemType_DEFINED
#define SOAP_TYPE_PointerTons1__StatItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StatItemType(struct soap*, ns1__StatItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StatItemType(struct soap*, const char *, int, ns1__StatItemType *const*, const char *);
SOAP_FMAC3 ns1__StatItemType ** SOAP_FMAC4 soap_in_PointerTons1__StatItemType(struct soap*, const char*, ns1__StatItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StatItemType(struct soap*, ns1__StatItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StatItemType ** SOAP_FMAC4 soap_get_PointerTons1__StatItemType(struct soap*, ns1__StatItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SuperGroupListDataItemType_DEFINED
#define SOAP_TYPE_PointerTons1__SuperGroupListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SuperGroupListDataItemType(struct soap*, ns1__SuperGroupListDataItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SuperGroupListDataItemType(struct soap*, const char *, int, ns1__SuperGroupListDataItemType *const*, const char *);
SOAP_FMAC3 ns1__SuperGroupListDataItemType ** SOAP_FMAC4 soap_in_PointerTons1__SuperGroupListDataItemType(struct soap*, const char*, ns1__SuperGroupListDataItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SuperGroupListDataItemType(struct soap*, ns1__SuperGroupListDataItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SuperGroupListDataItemType ** SOAP_FMAC4 soap_get_PointerTons1__SuperGroupListDataItemType(struct soap*, ns1__SuperGroupListDataItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DNISListDataItemType_DEFINED
#define SOAP_TYPE_PointerTons1__DNISListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DNISListDataItemType(struct soap*, ns1__DNISListDataItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DNISListDataItemType(struct soap*, const char *, int, ns1__DNISListDataItemType *const*, const char *);
SOAP_FMAC3 ns1__DNISListDataItemType ** SOAP_FMAC4 soap_in_PointerTons1__DNISListDataItemType(struct soap*, const char*, ns1__DNISListDataItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DNISListDataItemType(struct soap*, ns1__DNISListDataItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DNISListDataItemType ** SOAP_FMAC4 soap_get_PointerTons1__DNISListDataItemType(struct soap*, ns1__DNISListDataItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReportListDataItemType_DEFINED
#define SOAP_TYPE_PointerTons1__ReportListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReportListDataItemType(struct soap*, ns1__ReportListDataItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReportListDataItemType(struct soap*, const char *, int, ns1__ReportListDataItemType *const*, const char *);
SOAP_FMAC3 ns1__ReportListDataItemType ** SOAP_FMAC4 soap_in_PointerTons1__ReportListDataItemType(struct soap*, const char*, ns1__ReportListDataItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReportListDataItemType(struct soap*, ns1__ReportListDataItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReportListDataItemType ** SOAP_FMAC4 soap_get_PointerTons1__ReportListDataItemType(struct soap*, ns1__ReportListDataItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DefaultWorkspaceItemType_DEFINED
#define SOAP_TYPE_PointerTons1__DefaultWorkspaceItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DefaultWorkspaceItemType(struct soap*, ns1__DefaultWorkspaceItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DefaultWorkspaceItemType(struct soap*, const char *, int, ns1__DefaultWorkspaceItemType *const*, const char *);
SOAP_FMAC3 ns1__DefaultWorkspaceItemType ** SOAP_FMAC4 soap_in_PointerTons1__DefaultWorkspaceItemType(struct soap*, const char*, ns1__DefaultWorkspaceItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DefaultWorkspaceItemType(struct soap*, ns1__DefaultWorkspaceItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DefaultWorkspaceItemType ** SOAP_FMAC4 soap_get_PointerTons1__DefaultWorkspaceItemType(struct soap*, ns1__DefaultWorkspaceItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AgentsListDataItemType_DEFINED
#define SOAP_TYPE_PointerTons1__AgentsListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AgentsListDataItemType(struct soap*, ns1__AgentsListDataItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AgentsListDataItemType(struct soap*, const char *, int, ns1__AgentsListDataItemType *const*, const char *);
SOAP_FMAC3 ns1__AgentsListDataItemType ** SOAP_FMAC4 soap_in_PointerTons1__AgentsListDataItemType(struct soap*, const char*, ns1__AgentsListDataItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AgentsListDataItemType(struct soap*, ns1__AgentsListDataItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AgentsListDataItemType ** SOAP_FMAC4 soap_get_PointerTons1__AgentsListDataItemType(struct soap*, ns1__AgentsListDataItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenListDataItemType_DEFINED
#define SOAP_TYPE_PointerTons1__GenListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenListDataItemType(struct soap*, ns1__GenListDataItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenListDataItemType(struct soap*, const char *, int, ns1__GenListDataItemType *const*, const char *);
SOAP_FMAC3 ns1__GenListDataItemType ** SOAP_FMAC4 soap_in_PointerTons1__GenListDataItemType(struct soap*, const char*, ns1__GenListDataItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenListDataItemType(struct soap*, ns1__GenListDataItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenListDataItemType ** SOAP_FMAC4 soap_get_PointerTons1__GenListDataItemType(struct soap*, ns1__GenListDataItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GroupListDataItemType_DEFINED
#define SOAP_TYPE_PointerTons1__GroupListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GroupListDataItemType(struct soap*, ns1__GroupListDataItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GroupListDataItemType(struct soap*, const char *, int, ns1__GroupListDataItemType *const*, const char *);
SOAP_FMAC3 ns1__GroupListDataItemType ** SOAP_FMAC4 soap_in_PointerTons1__GroupListDataItemType(struct soap*, const char*, ns1__GroupListDataItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GroupListDataItemType(struct soap*, ns1__GroupListDataItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GroupListDataItemType ** SOAP_FMAC4 soap_get_PointerTons1__GroupListDataItemType(struct soap*, ns1__GroupListDataItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__returnDataRowsPerSuperGroup_DEFINED
#define SOAP_TYPE_PointerTons1__returnDataRowsPerSuperGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__returnDataRowsPerSuperGroup(struct soap*, ns1__returnDataRowsPerSuperGroup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__returnDataRowsPerSuperGroup(struct soap*, const char *, int, ns1__returnDataRowsPerSuperGroup *const*, const char *);
SOAP_FMAC3 ns1__returnDataRowsPerSuperGroup ** SOAP_FMAC4 soap_in_PointerTons1__returnDataRowsPerSuperGroup(struct soap*, const char*, ns1__returnDataRowsPerSuperGroup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__returnDataRowsPerSuperGroup(struct soap*, ns1__returnDataRowsPerSuperGroup *const*, const char*, const char*);
SOAP_FMAC3 ns1__returnDataRowsPerSuperGroup ** SOAP_FMAC4 soap_get_PointerTons1__returnDataRowsPerSuperGroup(struct soap*, ns1__returnDataRowsPerSuperGroup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__returnDataRowsPerGroup_DEFINED
#define SOAP_TYPE_PointerTons1__returnDataRowsPerGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__returnDataRowsPerGroup(struct soap*, ns1__returnDataRowsPerGroup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__returnDataRowsPerGroup(struct soap*, const char *, int, ns1__returnDataRowsPerGroup *const*, const char *);
SOAP_FMAC3 ns1__returnDataRowsPerGroup ** SOAP_FMAC4 soap_in_PointerTons1__returnDataRowsPerGroup(struct soap*, const char*, ns1__returnDataRowsPerGroup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__returnDataRowsPerGroup(struct soap*, ns1__returnDataRowsPerGroup *const*, const char*, const char*);
SOAP_FMAC3 ns1__returnDataRowsPerGroup ** SOAP_FMAC4 soap_get_PointerTons1__returnDataRowsPerGroup(struct soap*, ns1__returnDataRowsPerGroup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DataItemRow_DEFINED
#define SOAP_TYPE_PointerTons1__DataItemRow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DataItemRow(struct soap*, ns1__DataItemRow *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DataItemRow(struct soap*, const char *, int, ns1__DataItemRow *const*, const char *);
SOAP_FMAC3 ns1__DataItemRow ** SOAP_FMAC4 soap_in_PointerTons1__DataItemRow(struct soap*, const char*, ns1__DataItemRow **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DataItemRow(struct soap*, ns1__DataItemRow *const*, const char*, const char*);
SOAP_FMAC3 ns1__DataItemRow ** SOAP_FMAC4 soap_get_PointerTons1__DataItemRow(struct soap*, ns1__DataItemRow **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BlockItemType_DEFINED
#define SOAP_TYPE_PointerTons1__BlockItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BlockItemType(struct soap*, ns1__BlockItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BlockItemType(struct soap*, const char *, int, ns1__BlockItemType *const*, const char *);
SOAP_FMAC3 ns1__BlockItemType ** SOAP_FMAC4 soap_in_PointerTons1__BlockItemType(struct soap*, const char*, ns1__BlockItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BlockItemType(struct soap*, ns1__BlockItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BlockItemType ** SOAP_FMAC4 soap_get_PointerTons1__BlockItemType(struct soap*, ns1__BlockItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ResponseInfoHeaderType_DEFINED
#define SOAP_TYPE_PointerTons1__ResponseInfoHeaderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ResponseInfoHeaderType(struct soap*, ns1__ResponseInfoHeaderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ResponseInfoHeaderType(struct soap*, const char *, int, ns1__ResponseInfoHeaderType *const*, const char *);
SOAP_FMAC3 ns1__ResponseInfoHeaderType ** SOAP_FMAC4 soap_in_PointerTons1__ResponseInfoHeaderType(struct soap*, const char*, ns1__ResponseInfoHeaderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ResponseInfoHeaderType(struct soap*, ns1__ResponseInfoHeaderType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ResponseInfoHeaderType ** SOAP_FMAC4 soap_get_PointerTons1__ResponseInfoHeaderType(struct soap*, ns1__ResponseInfoHeaderType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DataItemType_DEFINED
#define SOAP_TYPE_PointerTons1__DataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DataItemType(struct soap*, ns1__DataItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DataItemType(struct soap*, const char *, int, ns1__DataItemType *const*, const char *);
SOAP_FMAC3 ns1__DataItemType ** SOAP_FMAC4 soap_in_PointerTons1__DataItemType(struct soap*, const char*, ns1__DataItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DataItemType(struct soap*, ns1__DataItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DataItemType ** SOAP_FMAC4 soap_get_PointerTons1__DataItemType(struct soap*, ns1__DataItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RequestInfoHeaderType_DEFINED
#define SOAP_TYPE_PointerTons1__RequestInfoHeaderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RequestInfoHeaderType(struct soap*, ns1__RequestInfoHeaderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RequestInfoHeaderType(struct soap*, const char *, int, ns1__RequestInfoHeaderType *const*, const char *);
SOAP_FMAC3 ns1__RequestInfoHeaderType ** SOAP_FMAC4 soap_in_PointerTons1__RequestInfoHeaderType(struct soap*, const char*, ns1__RequestInfoHeaderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RequestInfoHeaderType(struct soap*, ns1__RequestInfoHeaderType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RequestInfoHeaderType ** SOAP_FMAC4 soap_get_PointerTons1__RequestInfoHeaderType(struct soap*, ns1__RequestInfoHeaderType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__StatItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__StatItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__StatItemType(struct soap*, std::vector<ns1__StatItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__StatItemType(struct soap*, const std::vector<ns1__StatItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__StatItemType(struct soap*, const char*, int, const std::vector<ns1__StatItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__StatItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__StatItemType(struct soap*, const char*, std::vector<ns1__StatItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__StatItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__StatItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__StatItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__StatItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__StatItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType(struct soap*, std::vector<ns1__SuperGroupListDataItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType(struct soap*, const std::vector<ns1__SuperGroupListDataItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType(struct soap*, const char*, int, const std::vector<ns1__SuperGroupListDataItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SuperGroupListDataItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType(struct soap*, const char*, std::vector<ns1__SuperGroupListDataItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SuperGroupListDataItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SuperGroupListDataItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__SuperGroupListDataItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DNISListDataItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DNISListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DNISListDataItemType(struct soap*, std::vector<ns1__DNISListDataItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DNISListDataItemType(struct soap*, const std::vector<ns1__DNISListDataItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DNISListDataItemType(struct soap*, const char*, int, const std::vector<ns1__DNISListDataItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DNISListDataItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DNISListDataItemType(struct soap*, const char*, std::vector<ns1__DNISListDataItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DNISListDataItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DNISListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DNISListDataItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__DNISListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DNISListDataItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ReportListDataItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ReportListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ReportListDataItemType(struct soap*, std::vector<ns1__ReportListDataItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ReportListDataItemType(struct soap*, const std::vector<ns1__ReportListDataItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ReportListDataItemType(struct soap*, const char*, int, const std::vector<ns1__ReportListDataItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ReportListDataItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ReportListDataItemType(struct soap*, const char*, std::vector<ns1__ReportListDataItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ReportListDataItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ReportListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ReportListDataItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__ReportListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ReportListDataItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType(struct soap*, std::vector<ns1__DefaultWorkspaceItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType(struct soap*, const std::vector<ns1__DefaultWorkspaceItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType(struct soap*, const char*, int, const std::vector<ns1__DefaultWorkspaceItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DefaultWorkspaceItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType(struct soap*, const char*, std::vector<ns1__DefaultWorkspaceItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DefaultWorkspaceItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DefaultWorkspaceItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DefaultWorkspaceItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__AgentsListDataItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__AgentsListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__AgentsListDataItemType(struct soap*, std::vector<ns1__AgentsListDataItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__AgentsListDataItemType(struct soap*, const std::vector<ns1__AgentsListDataItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__AgentsListDataItemType(struct soap*, const char*, int, const std::vector<ns1__AgentsListDataItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__AgentsListDataItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__AgentsListDataItemType(struct soap*, const char*, std::vector<ns1__AgentsListDataItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__AgentsListDataItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__AgentsListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__AgentsListDataItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__AgentsListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__AgentsListDataItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__GenListDataItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__GenListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__GenListDataItemType(struct soap*, std::vector<ns1__GenListDataItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__GenListDataItemType(struct soap*, const std::vector<ns1__GenListDataItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__GenListDataItemType(struct soap*, const char*, int, const std::vector<ns1__GenListDataItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__GenListDataItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__GenListDataItemType(struct soap*, const char*, std::vector<ns1__GenListDataItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__GenListDataItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__GenListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__GenListDataItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__GenListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__GenListDataItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__GroupListDataItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__GroupListDataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__GroupListDataItemType(struct soap*, std::vector<ns1__GroupListDataItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__GroupListDataItemType(struct soap*, const std::vector<ns1__GroupListDataItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__GroupListDataItemType(struct soap*, const char*, int, const std::vector<ns1__GroupListDataItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__GroupListDataItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__GroupListDataItemType(struct soap*, const char*, std::vector<ns1__GroupListDataItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__GroupListDataItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__GroupListDataItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__GroupListDataItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__GroupListDataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__GroupListDataItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup(struct soap*, std::vector<ns1__returnDataRowsPerSuperGroup *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup(struct soap*, const std::vector<ns1__returnDataRowsPerSuperGroup *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup(struct soap*, const char*, int, const std::vector<ns1__returnDataRowsPerSuperGroup *> *, const char*);
SOAP_FMAC3 std::vector<ns1__returnDataRowsPerSuperGroup *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup(struct soap*, const char*, std::vector<ns1__returnDataRowsPerSuperGroup *> *, const char*);
SOAP_FMAC1 std::vector<ns1__returnDataRowsPerSuperGroup *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__returnDataRowsPerSuperGroup *>  * soap_new_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__returnDataRowsPerSuperGroup(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup(struct soap*, std::vector<ns1__returnDataRowsPerGroup *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup(struct soap*, const std::vector<ns1__returnDataRowsPerGroup *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup(struct soap*, const char*, int, const std::vector<ns1__returnDataRowsPerGroup *> *, const char*);
SOAP_FMAC3 std::vector<ns1__returnDataRowsPerGroup *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup(struct soap*, const char*, std::vector<ns1__returnDataRowsPerGroup *> *, const char*);
SOAP_FMAC1 std::vector<ns1__returnDataRowsPerGroup *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__returnDataRowsPerGroup *>  * soap_new_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__returnDataRowsPerGroup(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DataItemRow_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DataItemRow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DataItemRow(struct soap*, std::vector<ns1__DataItemRow *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DataItemRow(struct soap*, const std::vector<ns1__DataItemRow *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DataItemRow(struct soap*, const char*, int, const std::vector<ns1__DataItemRow *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DataItemRow *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DataItemRow(struct soap*, const char*, std::vector<ns1__DataItemRow *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DataItemRow *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DataItemRow(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DataItemRow *>  * soap_new_std__vectorTemplateOfPointerTons1__DataItemRow(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DataItemRow(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__BlockItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__BlockItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__BlockItemType(struct soap*, std::vector<ns1__BlockItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__BlockItemType(struct soap*, const std::vector<ns1__BlockItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__BlockItemType(struct soap*, const char*, int, const std::vector<ns1__BlockItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__BlockItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__BlockItemType(struct soap*, const char*, std::vector<ns1__BlockItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__BlockItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__BlockItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__BlockItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__BlockItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__BlockItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DataItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DataItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DataItemType(struct soap*, std::vector<ns1__DataItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DataItemType(struct soap*, const std::vector<ns1__DataItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DataItemType(struct soap*, const char*, int, const std::vector<ns1__DataItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DataItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DataItemType(struct soap*, const char*, std::vector<ns1__DataItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DataItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DataItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DataItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__DataItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DataItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfunsignedInt_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfunsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfunsignedInt(struct soap*, std::vector<unsigned int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfunsignedInt(struct soap*, const std::vector<unsigned int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfunsignedInt(struct soap*, const char*, int, const std::vector<unsigned int> *, const char*);
SOAP_FMAC3 std::vector<unsigned int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfunsignedInt(struct soap*, const char*, std::vector<unsigned int> *, const char*);
SOAP_FMAC1 std::vector<unsigned int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfunsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<unsigned int>  * soap_new_std__vectorTemplateOfunsignedInt(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfunsignedInt(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
