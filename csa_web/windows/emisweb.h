// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* emisweb.h
   Generated by wsdl2h 2.8.52 from emisweb.wsdl and typemap.dat
   2020-12-28 13:38:49 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on emisweb.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:EMISweb                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:EMISweb"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:EMISweb"
//gsoap ns1   schema namespace:	urn:EMISweb
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__RequestInfoHeaderType.
class ns1__RequestInfoHeaderType;

//  Forward declaration of class ns1__GenInfoRequestType.
class ns1__GenInfoRequestType;

//  Forward declaration of class ns1__ACDMultiRequestType.
class ns1__ACDMultiRequestType;

//  Forward declaration of class ns1__ACDRequestType.
class ns1__ACDRequestType;

//  Forward declaration of class ns1__TFRequestType.
class ns1__TFRequestType;

//  Forward declaration of class ns1__ChatResponseType.
class ns1__ChatResponseType;

//  Forward declaration of class ns1__ResponseInfoHeaderType.
class ns1__ResponseInfoHeaderType;

//  Forward declaration of class ns1__ResponseSaveReportType.
class ns1__ResponseSaveReportType;

//  Forward declaration of class ns1__DataItemType.
class ns1__DataItemType;

//  Forward declaration of class ns1__DataItemRow.
class ns1__DataItemRow;

//  Forward declaration of class ns1__BlockItemType.
class ns1__BlockItemType;

//  Forward declaration of class ns1__ReturnArrayDataType.
class ns1__ReturnArrayDataType;

//  Forward declaration of class ns1__returnDataRowsPerGroup.
class ns1__returnDataRowsPerGroup;

//  Forward declaration of class ns1__ReturnMatrixDataTypePerGroup.
class ns1__ReturnMatrixDataTypePerGroup;

//  Forward declaration of class ns1__returnDataRowsPerSuperGroup.
class ns1__returnDataRowsPerSuperGroup;

//  Forward declaration of class ns1__ReturnMatrixDataTypePerSuperGroup.
class ns1__ReturnMatrixDataTypePerSuperGroup;

//  Forward declaration of class ns1__ReturnMatrixDataTypeBG.
class ns1__ReturnMatrixDataTypeBG;

//  Forward declaration of class ns1__LoginRequestType.
class ns1__LoginRequestType;

//  Forward declaration of class ns1__LoginReturnType.
class ns1__LoginReturnType;

//  Forward declaration of class ns1__GenRequestType.
class ns1__GenRequestType;

//  Forward declaration of class ns1__GroupListDataItemType.
class ns1__GroupListDataItemType;

//  Forward declaration of class ns1__GroupListReturnType.
class ns1__GroupListReturnType;

//  Forward declaration of class ns1__GenListDataItemType.
class ns1__GenListDataItemType;

//  Forward declaration of class ns1__GenListReturnType.
class ns1__GenListReturnType;

//  Forward declaration of class ns1__AgentsListDataItemType.
class ns1__AgentsListDataItemType;

//  Forward declaration of class ns1__AgentsListReturnType.
class ns1__AgentsListReturnType;

//  Forward declaration of class ns1__BriefInfoRequestType.
class ns1__BriefInfoRequestType;

//  Forward declaration of class ns1__DefaultWorkspaceRequestType.
class ns1__DefaultWorkspaceRequestType;

//  Forward declaration of class ns1__DefaultWorkspaceItemType.
class ns1__DefaultWorkspaceItemType;

//  Forward declaration of class ns1__DefaultWorkspaceReturnType.
class ns1__DefaultWorkspaceReturnType;

//  Forward declaration of class ns1__ReportListDataRequestType.
class ns1__ReportListDataRequestType;

//  Forward declaration of class ns1__ReportListDataItemType.
class ns1__ReportListDataItemType;

//  Forward declaration of class ns1__ReportListDataReturnType.
class ns1__ReportListDataReturnType;

//  Forward declaration of class ns1__DNISListDataItemType.
class ns1__DNISListDataItemType;

//  Forward declaration of class ns1__DNISListReturnType.
class ns1__DNISListReturnType;

//  Forward declaration of class ns1__BriefDNISInfoRequestType.
class ns1__BriefDNISInfoRequestType;

//  Forward declaration of class ns1__SuperGroupListDataItemType.
class ns1__SuperGroupListDataItemType;

//  Forward declaration of class ns1__SuperGroupListReturnType.
class ns1__SuperGroupListReturnType;

//  Forward declaration of class ns1__SaveWorkspaseRequestType.
class ns1__SaveWorkspaseRequestType;

//  Forward declaration of class ns1__RequestSaveReportType.
class ns1__RequestSaveReportType;

//  Forward declaration of class ns1__RequestDeleteReportType.
class ns1__RequestDeleteReportType;

//  Forward declaration of class ns1__LoginManagerRequestType.
class ns1__LoginManagerRequestType;

//  Forward declaration of class ns1__ApplicationRegisterRequestType.
class ns1__ApplicationRegisterRequestType;

//  Forward declaration of class ns1__ApplicationKeepAliveRequestType.
class ns1__ApplicationKeepAliveRequestType;

//  Forward declaration of class ns1__ApplicationReturnType.
class ns1__ApplicationReturnType;

//  Forward declaration of class ns1__StatRequestType.
class ns1__StatRequestType;

//  Forward declaration of class ns1__StatItemType.
class ns1__StatItemType;

//  Forward declaration of class ns1__StatReturnType.
class ns1__StatReturnType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:EMISweb                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:EMISweb                                                              *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:EMISweb":RequestInfoHeaderType is a complexType.
///
/// class ns1__RequestInfoHeaderType operations:
/// - ns1__RequestInfoHeaderType* soap_new_ns1__RequestInfoHeaderType(soap*) allocate and default initialize
/// - ns1__RequestInfoHeaderType* soap_new_ns1__RequestInfoHeaderType(soap*, int num) allocate array and default initialize values
/// - ns1__RequestInfoHeaderType* soap_new_req_ns1__RequestInfoHeaderType(soap*, ...) allocate, set required members
/// - ns1__RequestInfoHeaderType* soap_new_set_ns1__RequestInfoHeaderType(soap*, ...) allocate, set all public members
/// - ns1__RequestInfoHeaderType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RequestInfoHeaderType(soap*, ns1__RequestInfoHeaderType*) deserialize from a stream
/// - int soap_write_ns1__RequestInfoHeaderType(soap*, ns1__RequestInfoHeaderType*) serialize to a stream
/// - ns1__RequestInfoHeaderType* ns1__RequestInfoHeaderType::soap_dup(soap*) returns deep copy of ns1__RequestInfoHeaderType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RequestInfoHeaderType::soap_del() deep deletes ns1__RequestInfoHeaderType data members, use only after ns1__RequestInfoHeaderType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RequestInfoHeaderType
{ public:
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// Element "ticket" of XSD type xs:string.
    std::string                          ticket                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":GenInfoRequestType is a complexType.
///
/// class ns1__GenInfoRequestType operations:
/// - ns1__GenInfoRequestType* soap_new_ns1__GenInfoRequestType(soap*) allocate and default initialize
/// - ns1__GenInfoRequestType* soap_new_ns1__GenInfoRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GenInfoRequestType* soap_new_req_ns1__GenInfoRequestType(soap*, ...) allocate, set required members
/// - ns1__GenInfoRequestType* soap_new_set_ns1__GenInfoRequestType(soap*, ...) allocate, set all public members
/// - ns1__GenInfoRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenInfoRequestType(soap*, ns1__GenInfoRequestType*) deserialize from a stream
/// - int soap_write_ns1__GenInfoRequestType(soap*, ns1__GenInfoRequestType*) serialize to a stream
/// - ns1__GenInfoRequestType* ns1__GenInfoRequestType::soap_dup(soap*) returns deep copy of ns1__GenInfoRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenInfoRequestType::soap_del() deep deletes ns1__GenInfoRequestType data members, use only after ns1__GenInfoRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GenInfoRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Vector of unsigned int of length 1..unbounded.
    std::vector<unsigned int           > Id                             1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ACDMultiRequestType is a complexType.
///
/// class ns1__ACDMultiRequestType operations:
/// - ns1__ACDMultiRequestType* soap_new_ns1__ACDMultiRequestType(soap*) allocate and default initialize
/// - ns1__ACDMultiRequestType* soap_new_ns1__ACDMultiRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ACDMultiRequestType* soap_new_req_ns1__ACDMultiRequestType(soap*, ...) allocate, set required members
/// - ns1__ACDMultiRequestType* soap_new_set_ns1__ACDMultiRequestType(soap*, ...) allocate, set all public members
/// - ns1__ACDMultiRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ACDMultiRequestType(soap*, ns1__ACDMultiRequestType*) deserialize from a stream
/// - int soap_write_ns1__ACDMultiRequestType(soap*, ns1__ACDMultiRequestType*) serialize to a stream
/// - ns1__ACDMultiRequestType* ns1__ACDMultiRequestType::soap_dup(soap*) returns deep copy of ns1__ACDMultiRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ACDMultiRequestType::soap_del() deep deletes ns1__ACDMultiRequestType data members, use only after ns1__ACDMultiRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ACDMultiRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Element "Id" of XSD type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Vector of unsigned int of length 1..unbounded.
    std::vector<unsigned int           > multiId                        1;	///< Elements.
/// Element "Operation" of XSD type xs:string.
    std::string                          Operation                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ACDRequestType is a complexType.
///
/// class ns1__ACDRequestType operations:
/// - ns1__ACDRequestType* soap_new_ns1__ACDRequestType(soap*) allocate and default initialize
/// - ns1__ACDRequestType* soap_new_ns1__ACDRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ACDRequestType* soap_new_req_ns1__ACDRequestType(soap*, ...) allocate, set required members
/// - ns1__ACDRequestType* soap_new_set_ns1__ACDRequestType(soap*, ...) allocate, set all public members
/// - ns1__ACDRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ACDRequestType(soap*, ns1__ACDRequestType*) deserialize from a stream
/// - int soap_write_ns1__ACDRequestType(soap*, ns1__ACDRequestType*) serialize to a stream
/// - ns1__ACDRequestType* ns1__ACDRequestType::soap_dup(soap*) returns deep copy of ns1__ACDRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ACDRequestType::soap_del() deep deletes ns1__ACDRequestType data members, use only after ns1__ACDRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ACDRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Element "AgentId" of XSD type xs:unsignedInt.
    unsigned int                         AgentId                        1;	///< Required element.
/// Element "GroupId" of XSD type xs:unsignedInt.
    unsigned int                         GroupId                        1;	///< Required element.
/// Element "Operation" of XSD type xs:string.
    std::string                          Operation                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":TFRequestType is a complexType.
///
/// class ns1__TFRequestType operations:
/// - ns1__TFRequestType* soap_new_ns1__TFRequestType(soap*) allocate and default initialize
/// - ns1__TFRequestType* soap_new_ns1__TFRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__TFRequestType* soap_new_req_ns1__TFRequestType(soap*, ...) allocate, set required members
/// - ns1__TFRequestType* soap_new_set_ns1__TFRequestType(soap*, ...) allocate, set all public members
/// - ns1__TFRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TFRequestType(soap*, ns1__TFRequestType*) deserialize from a stream
/// - int soap_write_ns1__TFRequestType(soap*, ns1__TFRequestType*) serialize to a stream
/// - ns1__TFRequestType* ns1__TFRequestType::soap_dup(soap*) returns deep copy of ns1__TFRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TFRequestType::soap_del() deep deletes ns1__TFRequestType data members, use only after ns1__TFRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__TFRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Element "AgentId" of XSD type xs:unsignedInt.
    unsigned int                         AgentId                        1;	///< Required element.
/// Element "Operation" of XSD type xs:string.
    std::string                          Operation                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ChatResponseType is a complexType.
///
/// class ns1__ChatResponseType operations:
/// - ns1__ChatResponseType* soap_new_ns1__ChatResponseType(soap*) allocate and default initialize
/// - ns1__ChatResponseType* soap_new_ns1__ChatResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__ChatResponseType* soap_new_req_ns1__ChatResponseType(soap*, ...) allocate, set required members
/// - ns1__ChatResponseType* soap_new_set_ns1__ChatResponseType(soap*, ...) allocate, set all public members
/// - ns1__ChatResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ChatResponseType(soap*, ns1__ChatResponseType*) deserialize from a stream
/// - int soap_write_ns1__ChatResponseType(soap*, ns1__ChatResponseType*) serialize to a stream
/// - ns1__ChatResponseType* ns1__ChatResponseType::soap_dup(soap*) returns deep copy of ns1__ChatResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ChatResponseType::soap_del() deep deletes ns1__ChatResponseType data members, use only after ns1__ChatResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ChatResponseType
{ public:
/// Element "sessionId" of XSD type xs:string.
    std::string                          sessionId                      1;	///< Required element.
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// Element "errorCause" of XSD type xs:unsignedInt.
    unsigned int                         errorCause                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ResponseInfoHeaderType is a complexType.
///
/// class ns1__ResponseInfoHeaderType operations:
/// - ns1__ResponseInfoHeaderType* soap_new_ns1__ResponseInfoHeaderType(soap*) allocate and default initialize
/// - ns1__ResponseInfoHeaderType* soap_new_ns1__ResponseInfoHeaderType(soap*, int num) allocate array and default initialize values
/// - ns1__ResponseInfoHeaderType* soap_new_req_ns1__ResponseInfoHeaderType(soap*, ...) allocate, set required members
/// - ns1__ResponseInfoHeaderType* soap_new_set_ns1__ResponseInfoHeaderType(soap*, ...) allocate, set all public members
/// - ns1__ResponseInfoHeaderType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ResponseInfoHeaderType(soap*, ns1__ResponseInfoHeaderType*) deserialize from a stream
/// - int soap_write_ns1__ResponseInfoHeaderType(soap*, ns1__ResponseInfoHeaderType*) serialize to a stream
/// - ns1__ResponseInfoHeaderType* ns1__ResponseInfoHeaderType::soap_dup(soap*) returns deep copy of ns1__ResponseInfoHeaderType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ResponseInfoHeaderType::soap_del() deep deletes ns1__ResponseInfoHeaderType data members, use only after ns1__ResponseInfoHeaderType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ResponseInfoHeaderType
{ public:
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// Element "errorCause" of XSD type xs:unsignedInt.
    unsigned int                         errorCause                     1;	///< Required element.
/// Element "serversInfo" of XSD type xs:string.
    std::string                          serversInfo                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ResponseSaveReportType is a complexType.
///
/// class ns1__ResponseSaveReportType operations:
/// - ns1__ResponseSaveReportType* soap_new_ns1__ResponseSaveReportType(soap*) allocate and default initialize
/// - ns1__ResponseSaveReportType* soap_new_ns1__ResponseSaveReportType(soap*, int num) allocate array and default initialize values
/// - ns1__ResponseSaveReportType* soap_new_req_ns1__ResponseSaveReportType(soap*, ...) allocate, set required members
/// - ns1__ResponseSaveReportType* soap_new_set_ns1__ResponseSaveReportType(soap*, ...) allocate, set all public members
/// - ns1__ResponseSaveReportType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ResponseSaveReportType(soap*, ns1__ResponseSaveReportType*) deserialize from a stream
/// - int soap_write_ns1__ResponseSaveReportType(soap*, ns1__ResponseSaveReportType*) serialize to a stream
/// - ns1__ResponseSaveReportType* ns1__ResponseSaveReportType::soap_dup(soap*) returns deep copy of ns1__ResponseSaveReportType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ResponseSaveReportType::soap_del() deep deletes ns1__ResponseSaveReportType data members, use only after ns1__ResponseSaveReportType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ResponseSaveReportType
{ public:
/// Element "reportId" of XSD type xs:unsignedInt.
    unsigned int                         reportId                       1;	///< Required element.
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// Element "errorCause" of XSD type xs:unsignedInt.
    unsigned int                         errorCause                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":DataItemType is a complexType.
///
/// class ns1__DataItemType operations:
/// - ns1__DataItemType* soap_new_ns1__DataItemType(soap*) allocate and default initialize
/// - ns1__DataItemType* soap_new_ns1__DataItemType(soap*, int num) allocate array and default initialize values
/// - ns1__DataItemType* soap_new_req_ns1__DataItemType(soap*, ...) allocate, set required members
/// - ns1__DataItemType* soap_new_set_ns1__DataItemType(soap*, ...) allocate, set all public members
/// - ns1__DataItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DataItemType(soap*, ns1__DataItemType*) deserialize from a stream
/// - int soap_write_ns1__DataItemType(soap*, ns1__DataItemType*) serialize to a stream
/// - ns1__DataItemType* ns1__DataItemType::soap_dup(soap*) returns deep copy of ns1__DataItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DataItemType::soap_del() deep deletes ns1__DataItemType data members, use only after ns1__DataItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DataItemType
{ public:
/// Element "ersid" of XSD type xs:string.
    std::string                          ersid                          1;	///< Required element.
/// Element "value" of XSD type xs:string.
    std::string                          value                          1;	///< Required element.
/// Element "ersname" of XSD type xs:string.
    std::string                          ersname                        1;	///< Required element.
/// Element "bgcolor" of XSD type xs:unsignedInt.
    unsigned int*                        bgcolor                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":DataItemRow is a complexType.
///
/// class ns1__DataItemRow operations:
/// - ns1__DataItemRow* soap_new_ns1__DataItemRow(soap*) allocate and default initialize
/// - ns1__DataItemRow* soap_new_ns1__DataItemRow(soap*, int num) allocate array and default initialize values
/// - ns1__DataItemRow* soap_new_req_ns1__DataItemRow(soap*, ...) allocate, set required members
/// - ns1__DataItemRow* soap_new_set_ns1__DataItemRow(soap*, ...) allocate, set all public members
/// - ns1__DataItemRow::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DataItemRow(soap*, ns1__DataItemRow*) deserialize from a stream
/// - int soap_write_ns1__DataItemRow(soap*, ns1__DataItemRow*) serialize to a stream
/// - ns1__DataItemRow* ns1__DataItemRow::soap_dup(soap*) returns deep copy of ns1__DataItemRow, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DataItemRow::soap_del() deep deletes ns1__DataItemRow data members, use only after ns1__DataItemRow::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DataItemRow
{ public:
/// Vector of ns1__DataItemType* of length 1..unbounded.
    std::vector<ns1__DataItemType*     > returnArray                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":BlockItemType is a complexType.
///
/// class ns1__BlockItemType operations:
/// - ns1__BlockItemType* soap_new_ns1__BlockItemType(soap*) allocate and default initialize
/// - ns1__BlockItemType* soap_new_ns1__BlockItemType(soap*, int num) allocate array and default initialize values
/// - ns1__BlockItemType* soap_new_req_ns1__BlockItemType(soap*, ...) allocate, set required members
/// - ns1__BlockItemType* soap_new_set_ns1__BlockItemType(soap*, ...) allocate, set all public members
/// - ns1__BlockItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BlockItemType(soap*, ns1__BlockItemType*) deserialize from a stream
/// - int soap_write_ns1__BlockItemType(soap*, ns1__BlockItemType*) serialize to a stream
/// - ns1__BlockItemType* ns1__BlockItemType::soap_dup(soap*) returns deep copy of ns1__BlockItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BlockItemType::soap_del() deep deletes ns1__BlockItemType data members, use only after ns1__BlockItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BlockItemType
{ public:
/// Element "Id" of XSD type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Vector of ns1__DataItemType* of length 1..unbounded.
    std::vector<ns1__DataItemType*     > returnArray                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ReturnArrayDataType is a complexType.
///
/// class ns1__ReturnArrayDataType operations:
/// - ns1__ReturnArrayDataType* soap_new_ns1__ReturnArrayDataType(soap*) allocate and default initialize
/// - ns1__ReturnArrayDataType* soap_new_ns1__ReturnArrayDataType(soap*, int num) allocate array and default initialize values
/// - ns1__ReturnArrayDataType* soap_new_req_ns1__ReturnArrayDataType(soap*, ...) allocate, set required members
/// - ns1__ReturnArrayDataType* soap_new_set_ns1__ReturnArrayDataType(soap*, ...) allocate, set all public members
/// - ns1__ReturnArrayDataType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReturnArrayDataType(soap*, ns1__ReturnArrayDataType*) deserialize from a stream
/// - int soap_write_ns1__ReturnArrayDataType(soap*, ns1__ReturnArrayDataType*) serialize to a stream
/// - ns1__ReturnArrayDataType* ns1__ReturnArrayDataType::soap_dup(soap*) returns deep copy of ns1__ReturnArrayDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReturnArrayDataType::soap_del() deep deletes ns1__ReturnArrayDataType data members, use only after ns1__ReturnArrayDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReturnArrayDataType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__BlockItemType* of length 1..unbounded.
    std::vector<ns1__BlockItemType*    > returnArrayOfBlocks            1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":returnDataRowsPerGroup is a complexType.
///
/// class ns1__returnDataRowsPerGroup operations:
/// - ns1__returnDataRowsPerGroup* soap_new_ns1__returnDataRowsPerGroup(soap*) allocate and default initialize
/// - ns1__returnDataRowsPerGroup* soap_new_ns1__returnDataRowsPerGroup(soap*, int num) allocate array and default initialize values
/// - ns1__returnDataRowsPerGroup* soap_new_req_ns1__returnDataRowsPerGroup(soap*, ...) allocate, set required members
/// - ns1__returnDataRowsPerGroup* soap_new_set_ns1__returnDataRowsPerGroup(soap*, ...) allocate, set all public members
/// - ns1__returnDataRowsPerGroup::soap_default(soap*) default initialize members
/// - int soap_read_ns1__returnDataRowsPerGroup(soap*, ns1__returnDataRowsPerGroup*) deserialize from a stream
/// - int soap_write_ns1__returnDataRowsPerGroup(soap*, ns1__returnDataRowsPerGroup*) serialize to a stream
/// - ns1__returnDataRowsPerGroup* ns1__returnDataRowsPerGroup::soap_dup(soap*) returns deep copy of ns1__returnDataRowsPerGroup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__returnDataRowsPerGroup::soap_del() deep deletes ns1__returnDataRowsPerGroup data members, use only after ns1__returnDataRowsPerGroup::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__returnDataRowsPerGroup
{ public:
/// Element "Id" of XSD type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Vector of ns1__DataItemRow* of length 0..unbounded.
    std::vector<ns1__DataItemRow*      > returnMatrix                   0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ReturnMatrixDataTypePerGroup is a complexType.
///
/// class ns1__ReturnMatrixDataTypePerGroup operations:
/// - ns1__ReturnMatrixDataTypePerGroup* soap_new_ns1__ReturnMatrixDataTypePerGroup(soap*) allocate and default initialize
/// - ns1__ReturnMatrixDataTypePerGroup* soap_new_ns1__ReturnMatrixDataTypePerGroup(soap*, int num) allocate array and default initialize values
/// - ns1__ReturnMatrixDataTypePerGroup* soap_new_req_ns1__ReturnMatrixDataTypePerGroup(soap*, ...) allocate, set required members
/// - ns1__ReturnMatrixDataTypePerGroup* soap_new_set_ns1__ReturnMatrixDataTypePerGroup(soap*, ...) allocate, set all public members
/// - ns1__ReturnMatrixDataTypePerGroup::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReturnMatrixDataTypePerGroup(soap*, ns1__ReturnMatrixDataTypePerGroup*) deserialize from a stream
/// - int soap_write_ns1__ReturnMatrixDataTypePerGroup(soap*, ns1__ReturnMatrixDataTypePerGroup*) serialize to a stream
/// - ns1__ReturnMatrixDataTypePerGroup* ns1__ReturnMatrixDataTypePerGroup::soap_dup(soap*) returns deep copy of ns1__ReturnMatrixDataTypePerGroup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReturnMatrixDataTypePerGroup::soap_del() deep deletes ns1__ReturnMatrixDataTypePerGroup data members, use only after ns1__ReturnMatrixDataTypePerGroup::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReturnMatrixDataTypePerGroup
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__returnDataRowsPerGroup* of length 1..unbounded.
    std::vector<ns1__returnDataRowsPerGroup*> returnDataRowsPerGroup         1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":returnDataRowsPerSuperGroup is a complexType.
///
/// class ns1__returnDataRowsPerSuperGroup operations:
/// - ns1__returnDataRowsPerSuperGroup* soap_new_ns1__returnDataRowsPerSuperGroup(soap*) allocate and default initialize
/// - ns1__returnDataRowsPerSuperGroup* soap_new_ns1__returnDataRowsPerSuperGroup(soap*, int num) allocate array and default initialize values
/// - ns1__returnDataRowsPerSuperGroup* soap_new_req_ns1__returnDataRowsPerSuperGroup(soap*, ...) allocate, set required members
/// - ns1__returnDataRowsPerSuperGroup* soap_new_set_ns1__returnDataRowsPerSuperGroup(soap*, ...) allocate, set all public members
/// - ns1__returnDataRowsPerSuperGroup::soap_default(soap*) default initialize members
/// - int soap_read_ns1__returnDataRowsPerSuperGroup(soap*, ns1__returnDataRowsPerSuperGroup*) deserialize from a stream
/// - int soap_write_ns1__returnDataRowsPerSuperGroup(soap*, ns1__returnDataRowsPerSuperGroup*) serialize to a stream
/// - ns1__returnDataRowsPerSuperGroup* ns1__returnDataRowsPerSuperGroup::soap_dup(soap*) returns deep copy of ns1__returnDataRowsPerSuperGroup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__returnDataRowsPerSuperGroup::soap_del() deep deletes ns1__returnDataRowsPerSuperGroup data members, use only after ns1__returnDataRowsPerSuperGroup::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__returnDataRowsPerSuperGroup
{ public:
/// Element "Id" of XSD type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Vector of ns1__DataItemRow* of length 0..unbounded.
    std::vector<ns1__DataItemRow*      > returnMatrix                   0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ReturnMatrixDataTypePerSuperGroup is a complexType.
///
/// class ns1__ReturnMatrixDataTypePerSuperGroup operations:
/// - ns1__ReturnMatrixDataTypePerSuperGroup* soap_new_ns1__ReturnMatrixDataTypePerSuperGroup(soap*) allocate and default initialize
/// - ns1__ReturnMatrixDataTypePerSuperGroup* soap_new_ns1__ReturnMatrixDataTypePerSuperGroup(soap*, int num) allocate array and default initialize values
/// - ns1__ReturnMatrixDataTypePerSuperGroup* soap_new_req_ns1__ReturnMatrixDataTypePerSuperGroup(soap*, ...) allocate, set required members
/// - ns1__ReturnMatrixDataTypePerSuperGroup* soap_new_set_ns1__ReturnMatrixDataTypePerSuperGroup(soap*, ...) allocate, set all public members
/// - ns1__ReturnMatrixDataTypePerSuperGroup::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReturnMatrixDataTypePerSuperGroup(soap*, ns1__ReturnMatrixDataTypePerSuperGroup*) deserialize from a stream
/// - int soap_write_ns1__ReturnMatrixDataTypePerSuperGroup(soap*, ns1__ReturnMatrixDataTypePerSuperGroup*) serialize to a stream
/// - ns1__ReturnMatrixDataTypePerSuperGroup* ns1__ReturnMatrixDataTypePerSuperGroup::soap_dup(soap*) returns deep copy of ns1__ReturnMatrixDataTypePerSuperGroup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReturnMatrixDataTypePerSuperGroup::soap_del() deep deletes ns1__ReturnMatrixDataTypePerSuperGroup data members, use only after ns1__ReturnMatrixDataTypePerSuperGroup::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReturnMatrixDataTypePerSuperGroup
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__returnDataRowsPerSuperGroup* of length 1..unbounded.
    std::vector<ns1__returnDataRowsPerSuperGroup*> returnDataRowsPerSuperGroup    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ReturnMatrixDataTypeBG is a complexType.
///
/// class ns1__ReturnMatrixDataTypeBG operations:
/// - ns1__ReturnMatrixDataTypeBG* soap_new_ns1__ReturnMatrixDataTypeBG(soap*) allocate and default initialize
/// - ns1__ReturnMatrixDataTypeBG* soap_new_ns1__ReturnMatrixDataTypeBG(soap*, int num) allocate array and default initialize values
/// - ns1__ReturnMatrixDataTypeBG* soap_new_req_ns1__ReturnMatrixDataTypeBG(soap*, ...) allocate, set required members
/// - ns1__ReturnMatrixDataTypeBG* soap_new_set_ns1__ReturnMatrixDataTypeBG(soap*, ...) allocate, set all public members
/// - ns1__ReturnMatrixDataTypeBG::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReturnMatrixDataTypeBG(soap*, ns1__ReturnMatrixDataTypeBG*) deserialize from a stream
/// - int soap_write_ns1__ReturnMatrixDataTypeBG(soap*, ns1__ReturnMatrixDataTypeBG*) serialize to a stream
/// - ns1__ReturnMatrixDataTypeBG* ns1__ReturnMatrixDataTypeBG::soap_dup(soap*) returns deep copy of ns1__ReturnMatrixDataTypeBG, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReturnMatrixDataTypeBG::soap_del() deep deletes ns1__ReturnMatrixDataTypeBG data members, use only after ns1__ReturnMatrixDataTypeBG::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReturnMatrixDataTypeBG
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__DataItemRow* of length 0..unbounded.
    std::vector<ns1__DataItemRow*      > returnMatrix                   0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":LoginRequestType is a complexType.
///
/// class ns1__LoginRequestType operations:
/// - ns1__LoginRequestType* soap_new_ns1__LoginRequestType(soap*) allocate and default initialize
/// - ns1__LoginRequestType* soap_new_ns1__LoginRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__LoginRequestType* soap_new_req_ns1__LoginRequestType(soap*, ...) allocate, set required members
/// - ns1__LoginRequestType* soap_new_set_ns1__LoginRequestType(soap*, ...) allocate, set all public members
/// - ns1__LoginRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__LoginRequestType(soap*, ns1__LoginRequestType*) deserialize from a stream
/// - int soap_write_ns1__LoginRequestType(soap*, ns1__LoginRequestType*) serialize to a stream
/// - ns1__LoginRequestType* ns1__LoginRequestType::soap_dup(soap*) returns deep copy of ns1__LoginRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__LoginRequestType::soap_del() deep deletes ns1__LoginRequestType data members, use only after ns1__LoginRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__LoginRequestType
{ public:
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// Element "applicationId" of XSD type xs:string.
    std::string                          applicationId                  1;	///< Required element.
/// Element "name" of XSD type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element "pass" of XSD type xs:string.
    std::string                          pass                           1;	///< Required element.
/// Element "session_id" of XSD type xs:string.
    std::string                          session_id                     1;	///< Required element.
/// Element "ip_address" of XSD type xs:string.
    std::string                          ip_address                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":LoginReturnType is a complexType.
///
/// class ns1__LoginReturnType operations:
/// - ns1__LoginReturnType* soap_new_ns1__LoginReturnType(soap*) allocate and default initialize
/// - ns1__LoginReturnType* soap_new_ns1__LoginReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__LoginReturnType* soap_new_req_ns1__LoginReturnType(soap*, ...) allocate, set required members
/// - ns1__LoginReturnType* soap_new_set_ns1__LoginReturnType(soap*, ...) allocate, set all public members
/// - ns1__LoginReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__LoginReturnType(soap*, ns1__LoginReturnType*) deserialize from a stream
/// - int soap_write_ns1__LoginReturnType(soap*, ns1__LoginReturnType*) serialize to a stream
/// - ns1__LoginReturnType* ns1__LoginReturnType::soap_dup(soap*) returns deep copy of ns1__LoginReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__LoginReturnType::soap_del() deep deletes ns1__LoginReturnType data members, use only after ns1__LoginReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__LoginReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Element "ticket" of XSD type xs:string.
    std::string                          ticket                         1;	///< Required element.
/// Element "loginEnable" of XSD type xs:unsignedInt.
    unsigned int                         loginEnable                    1;	///< Required element.
/// Element "supLevel" of XSD type xs:unsignedInt.
    unsigned int                         supLevel                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":GenRequestType is a complexType.
///
/// class ns1__GenRequestType operations:
/// - ns1__GenRequestType* soap_new_ns1__GenRequestType(soap*) allocate and default initialize
/// - ns1__GenRequestType* soap_new_ns1__GenRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GenRequestType* soap_new_req_ns1__GenRequestType(soap*, ...) allocate, set required members
/// - ns1__GenRequestType* soap_new_set_ns1__GenRequestType(soap*, ...) allocate, set all public members
/// - ns1__GenRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenRequestType(soap*, ns1__GenRequestType*) deserialize from a stream
/// - int soap_write_ns1__GenRequestType(soap*, ns1__GenRequestType*) serialize to a stream
/// - ns1__GenRequestType* ns1__GenRequestType::soap_dup(soap*) returns deep copy of ns1__GenRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenRequestType::soap_del() deep deletes ns1__GenRequestType data members, use only after ns1__GenRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GenRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":GroupListDataItemType is a complexType.
///
/// class ns1__GroupListDataItemType operations:
/// - ns1__GroupListDataItemType* soap_new_ns1__GroupListDataItemType(soap*) allocate and default initialize
/// - ns1__GroupListDataItemType* soap_new_ns1__GroupListDataItemType(soap*, int num) allocate array and default initialize values
/// - ns1__GroupListDataItemType* soap_new_req_ns1__GroupListDataItemType(soap*, ...) allocate, set required members
/// - ns1__GroupListDataItemType* soap_new_set_ns1__GroupListDataItemType(soap*, ...) allocate, set all public members
/// - ns1__GroupListDataItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GroupListDataItemType(soap*, ns1__GroupListDataItemType*) deserialize from a stream
/// - int soap_write_ns1__GroupListDataItemType(soap*, ns1__GroupListDataItemType*) serialize to a stream
/// - ns1__GroupListDataItemType* ns1__GroupListDataItemType::soap_dup(soap*) returns deep copy of ns1__GroupListDataItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GroupListDataItemType::soap_del() deep deletes ns1__GroupListDataItemType data members, use only after ns1__GroupListDataItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GroupListDataItemType
{ public:
/// Element "grpId" of XSD type xs:unsignedInt.
    unsigned int                         grpId                          1;	///< Required element.
/// Element "grpName" of XSD type xs:string.
    std::string                          grpName                        1;	///< Required element.
/// Element "grpNumber" of XSD type xs:string.
    std::string                          grpNumber                      1;	///< Required element.
/// Element "grpEmailEnable" of XSD type xs:unsignedInt.
    unsigned int                         grpEmailEnable                 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":GroupListReturnType is a complexType.
///
/// class ns1__GroupListReturnType operations:
/// - ns1__GroupListReturnType* soap_new_ns1__GroupListReturnType(soap*) allocate and default initialize
/// - ns1__GroupListReturnType* soap_new_ns1__GroupListReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__GroupListReturnType* soap_new_req_ns1__GroupListReturnType(soap*, ...) allocate, set required members
/// - ns1__GroupListReturnType* soap_new_set_ns1__GroupListReturnType(soap*, ...) allocate, set all public members
/// - ns1__GroupListReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GroupListReturnType(soap*, ns1__GroupListReturnType*) deserialize from a stream
/// - int soap_write_ns1__GroupListReturnType(soap*, ns1__GroupListReturnType*) serialize to a stream
/// - ns1__GroupListReturnType* ns1__GroupListReturnType::soap_dup(soap*) returns deep copy of ns1__GroupListReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GroupListReturnType::soap_del() deep deletes ns1__GroupListReturnType data members, use only after ns1__GroupListReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GroupListReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__GroupListDataItemType* of length 1..unbounded.
    std::vector<ns1__GroupListDataItemType*> returnArray                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":GenListDataItemType is a complexType.
///
/// class ns1__GenListDataItemType operations:
/// - ns1__GenListDataItemType* soap_new_ns1__GenListDataItemType(soap*) allocate and default initialize
/// - ns1__GenListDataItemType* soap_new_ns1__GenListDataItemType(soap*, int num) allocate array and default initialize values
/// - ns1__GenListDataItemType* soap_new_req_ns1__GenListDataItemType(soap*, ...) allocate, set required members
/// - ns1__GenListDataItemType* soap_new_set_ns1__GenListDataItemType(soap*, ...) allocate, set all public members
/// - ns1__GenListDataItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenListDataItemType(soap*, ns1__GenListDataItemType*) deserialize from a stream
/// - int soap_write_ns1__GenListDataItemType(soap*, ns1__GenListDataItemType*) serialize to a stream
/// - ns1__GenListDataItemType* ns1__GenListDataItemType::soap_dup(soap*) returns deep copy of ns1__GenListDataItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenListDataItemType::soap_del() deep deletes ns1__GenListDataItemType data members, use only after ns1__GenListDataItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GenListDataItemType
{ public:
/// Element "Id" of XSD type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":GenListReturnType is a complexType.
///
/// class ns1__GenListReturnType operations:
/// - ns1__GenListReturnType* soap_new_ns1__GenListReturnType(soap*) allocate and default initialize
/// - ns1__GenListReturnType* soap_new_ns1__GenListReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__GenListReturnType* soap_new_req_ns1__GenListReturnType(soap*, ...) allocate, set required members
/// - ns1__GenListReturnType* soap_new_set_ns1__GenListReturnType(soap*, ...) allocate, set all public members
/// - ns1__GenListReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenListReturnType(soap*, ns1__GenListReturnType*) deserialize from a stream
/// - int soap_write_ns1__GenListReturnType(soap*, ns1__GenListReturnType*) serialize to a stream
/// - ns1__GenListReturnType* ns1__GenListReturnType::soap_dup(soap*) returns deep copy of ns1__GenListReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenListReturnType::soap_del() deep deletes ns1__GenListReturnType data members, use only after ns1__GenListReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GenListReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__GenListDataItemType* of length 0..unbounded.
    std::vector<ns1__GenListDataItemType*> returnArray                    0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":AgentsListDataItemType is a complexType.
///
/// class ns1__AgentsListDataItemType operations:
/// - ns1__AgentsListDataItemType* soap_new_ns1__AgentsListDataItemType(soap*) allocate and default initialize
/// - ns1__AgentsListDataItemType* soap_new_ns1__AgentsListDataItemType(soap*, int num) allocate array and default initialize values
/// - ns1__AgentsListDataItemType* soap_new_req_ns1__AgentsListDataItemType(soap*, ...) allocate, set required members
/// - ns1__AgentsListDataItemType* soap_new_set_ns1__AgentsListDataItemType(soap*, ...) allocate, set all public members
/// - ns1__AgentsListDataItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AgentsListDataItemType(soap*, ns1__AgentsListDataItemType*) deserialize from a stream
/// - int soap_write_ns1__AgentsListDataItemType(soap*, ns1__AgentsListDataItemType*) serialize to a stream
/// - ns1__AgentsListDataItemType* ns1__AgentsListDataItemType::soap_dup(soap*) returns deep copy of ns1__AgentsListDataItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AgentsListDataItemType::soap_del() deep deletes ns1__AgentsListDataItemType data members, use only after ns1__AgentsListDataItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__AgentsListDataItemType
{ public:
/// Element "agentId" of XSD type xs:unsignedInt.
    unsigned int                         agentId                        1;	///< Required element.
/// Element "agentName" of XSD type xs:string.
    std::string                          agentName                      1;	///< Required element.
/// Element "agentNumber" of XSD type xs:string.
    std::string                          agentNumber                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":AgentsListReturnType is a complexType.
///
/// class ns1__AgentsListReturnType operations:
/// - ns1__AgentsListReturnType* soap_new_ns1__AgentsListReturnType(soap*) allocate and default initialize
/// - ns1__AgentsListReturnType* soap_new_ns1__AgentsListReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__AgentsListReturnType* soap_new_req_ns1__AgentsListReturnType(soap*, ...) allocate, set required members
/// - ns1__AgentsListReturnType* soap_new_set_ns1__AgentsListReturnType(soap*, ...) allocate, set all public members
/// - ns1__AgentsListReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AgentsListReturnType(soap*, ns1__AgentsListReturnType*) deserialize from a stream
/// - int soap_write_ns1__AgentsListReturnType(soap*, ns1__AgentsListReturnType*) serialize to a stream
/// - ns1__AgentsListReturnType* ns1__AgentsListReturnType::soap_dup(soap*) returns deep copy of ns1__AgentsListReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AgentsListReturnType::soap_del() deep deletes ns1__AgentsListReturnType data members, use only after ns1__AgentsListReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__AgentsListReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__AgentsListDataItemType* of length 1..unbounded.
    std::vector<ns1__AgentsListDataItemType*> returnArray                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":BriefInfoRequestType is a complexType.
///
/// class ns1__BriefInfoRequestType operations:
/// - ns1__BriefInfoRequestType* soap_new_ns1__BriefInfoRequestType(soap*) allocate and default initialize
/// - ns1__BriefInfoRequestType* soap_new_ns1__BriefInfoRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BriefInfoRequestType* soap_new_req_ns1__BriefInfoRequestType(soap*, ...) allocate, set required members
/// - ns1__BriefInfoRequestType* soap_new_set_ns1__BriefInfoRequestType(soap*, ...) allocate, set all public members
/// - ns1__BriefInfoRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BriefInfoRequestType(soap*, ns1__BriefInfoRequestType*) deserialize from a stream
/// - int soap_write_ns1__BriefInfoRequestType(soap*, ns1__BriefInfoRequestType*) serialize to a stream
/// - ns1__BriefInfoRequestType* ns1__BriefInfoRequestType::soap_dup(soap*) returns deep copy of ns1__BriefInfoRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BriefInfoRequestType::soap_del() deep deletes ns1__BriefInfoRequestType data members, use only after ns1__BriefInfoRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BriefInfoRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":DefaultWorkspaceRequestType is a complexType.
///
/// class ns1__DefaultWorkspaceRequestType operations:
/// - ns1__DefaultWorkspaceRequestType* soap_new_ns1__DefaultWorkspaceRequestType(soap*) allocate and default initialize
/// - ns1__DefaultWorkspaceRequestType* soap_new_ns1__DefaultWorkspaceRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DefaultWorkspaceRequestType* soap_new_req_ns1__DefaultWorkspaceRequestType(soap*, ...) allocate, set required members
/// - ns1__DefaultWorkspaceRequestType* soap_new_set_ns1__DefaultWorkspaceRequestType(soap*, ...) allocate, set all public members
/// - ns1__DefaultWorkspaceRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DefaultWorkspaceRequestType(soap*, ns1__DefaultWorkspaceRequestType*) deserialize from a stream
/// - int soap_write_ns1__DefaultWorkspaceRequestType(soap*, ns1__DefaultWorkspaceRequestType*) serialize to a stream
/// - ns1__DefaultWorkspaceRequestType* ns1__DefaultWorkspaceRequestType::soap_dup(soap*) returns deep copy of ns1__DefaultWorkspaceRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DefaultWorkspaceRequestType::soap_del() deep deletes ns1__DefaultWorkspaceRequestType data members, use only after ns1__DefaultWorkspaceRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DefaultWorkspaceRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":DefaultWorkspaceItemType is a complexType.
///
/// class ns1__DefaultWorkspaceItemType operations:
/// - ns1__DefaultWorkspaceItemType* soap_new_ns1__DefaultWorkspaceItemType(soap*) allocate and default initialize
/// - ns1__DefaultWorkspaceItemType* soap_new_ns1__DefaultWorkspaceItemType(soap*, int num) allocate array and default initialize values
/// - ns1__DefaultWorkspaceItemType* soap_new_req_ns1__DefaultWorkspaceItemType(soap*, ...) allocate, set required members
/// - ns1__DefaultWorkspaceItemType* soap_new_set_ns1__DefaultWorkspaceItemType(soap*, ...) allocate, set all public members
/// - ns1__DefaultWorkspaceItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DefaultWorkspaceItemType(soap*, ns1__DefaultWorkspaceItemType*) deserialize from a stream
/// - int soap_write_ns1__DefaultWorkspaceItemType(soap*, ns1__DefaultWorkspaceItemType*) serialize to a stream
/// - ns1__DefaultWorkspaceItemType* ns1__DefaultWorkspaceItemType::soap_dup(soap*) returns deep copy of ns1__DefaultWorkspaceItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DefaultWorkspaceItemType::soap_del() deep deletes ns1__DefaultWorkspaceItemType data members, use only after ns1__DefaultWorkspaceItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DefaultWorkspaceItemType
{ public:
/// Element "reportId" of XSD type xs:unsignedInt.
    unsigned int                         reportId                       1;	///< Required element.
/// Element "x" of XSD type xs:short.
    short                                x                              1;	///< Required element.
/// Element "y" of XSD type xs:short.
    short                                y                              1;	///< Required element.
/// Element "width" of XSD type xs:unsignedInt.
    unsigned int                         width                          1;	///< Required element.
/// Element "height" of XSD type xs:unsignedInt.
    unsigned int                         height                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":DefaultWorkspaceReturnType is a complexType.
///
/// class ns1__DefaultWorkspaceReturnType operations:
/// - ns1__DefaultWorkspaceReturnType* soap_new_ns1__DefaultWorkspaceReturnType(soap*) allocate and default initialize
/// - ns1__DefaultWorkspaceReturnType* soap_new_ns1__DefaultWorkspaceReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__DefaultWorkspaceReturnType* soap_new_req_ns1__DefaultWorkspaceReturnType(soap*, ...) allocate, set required members
/// - ns1__DefaultWorkspaceReturnType* soap_new_set_ns1__DefaultWorkspaceReturnType(soap*, ...) allocate, set all public members
/// - ns1__DefaultWorkspaceReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DefaultWorkspaceReturnType(soap*, ns1__DefaultWorkspaceReturnType*) deserialize from a stream
/// - int soap_write_ns1__DefaultWorkspaceReturnType(soap*, ns1__DefaultWorkspaceReturnType*) serialize to a stream
/// - ns1__DefaultWorkspaceReturnType* ns1__DefaultWorkspaceReturnType::soap_dup(soap*) returns deep copy of ns1__DefaultWorkspaceReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DefaultWorkspaceReturnType::soap_del() deep deletes ns1__DefaultWorkspaceReturnType data members, use only after ns1__DefaultWorkspaceReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DefaultWorkspaceReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__DefaultWorkspaceItemType* of length 0..unbounded.
    std::vector<ns1__DefaultWorkspaceItemType*> returnArray                    0;	///< Elements.
/// Element "fontSize" of XSD type xs:string.
    std::string                          fontSize                       1;	///< Required element.
/// Element "language" of XSD type xs:string.
    std::string                          language                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ReportListDataRequestType is a complexType.
///
/// class ns1__ReportListDataRequestType operations:
/// - ns1__ReportListDataRequestType* soap_new_ns1__ReportListDataRequestType(soap*) allocate and default initialize
/// - ns1__ReportListDataRequestType* soap_new_ns1__ReportListDataRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ReportListDataRequestType* soap_new_req_ns1__ReportListDataRequestType(soap*, ...) allocate, set required members
/// - ns1__ReportListDataRequestType* soap_new_set_ns1__ReportListDataRequestType(soap*, ...) allocate, set all public members
/// - ns1__ReportListDataRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReportListDataRequestType(soap*, ns1__ReportListDataRequestType*) deserialize from a stream
/// - int soap_write_ns1__ReportListDataRequestType(soap*, ns1__ReportListDataRequestType*) serialize to a stream
/// - ns1__ReportListDataRequestType* ns1__ReportListDataRequestType::soap_dup(soap*) returns deep copy of ns1__ReportListDataRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReportListDataRequestType::soap_del() deep deletes ns1__ReportListDataRequestType data members, use only after ns1__ReportListDataRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReportListDataRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ReportListDataItemType is a complexType.
///
/// class ns1__ReportListDataItemType operations:
/// - ns1__ReportListDataItemType* soap_new_ns1__ReportListDataItemType(soap*) allocate and default initialize
/// - ns1__ReportListDataItemType* soap_new_ns1__ReportListDataItemType(soap*, int num) allocate array and default initialize values
/// - ns1__ReportListDataItemType* soap_new_req_ns1__ReportListDataItemType(soap*, ...) allocate, set required members
/// - ns1__ReportListDataItemType* soap_new_set_ns1__ReportListDataItemType(soap*, ...) allocate, set all public members
/// - ns1__ReportListDataItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReportListDataItemType(soap*, ns1__ReportListDataItemType*) deserialize from a stream
/// - int soap_write_ns1__ReportListDataItemType(soap*, ns1__ReportListDataItemType*) serialize to a stream
/// - ns1__ReportListDataItemType* ns1__ReportListDataItemType::soap_dup(soap*) returns deep copy of ns1__ReportListDataItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReportListDataItemType::soap_del() deep deletes ns1__ReportListDataItemType data members, use only after ns1__ReportListDataItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReportListDataItemType
{ public:
/// Element "reportId" of XSD type xs:unsignedInt.
    unsigned int                         reportId                       1;	///< Required element.
/// Element "isPublic" of XSD type xs:unsignedInt.
    unsigned int                         isPublic                       1;	///< Required element.
/// Element "reportName" of XSD type xs:string.
    std::string                          reportName                     1;	///< Required element.
/// Element "renderName" of XSD type xs:string.
    std::string                          renderName                     1;	///< Required element.
/// Element "params" of XSD type xs:string.
    std::string                          params                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ReportListDataReturnType is a complexType.
///
/// class ns1__ReportListDataReturnType operations:
/// - ns1__ReportListDataReturnType* soap_new_ns1__ReportListDataReturnType(soap*) allocate and default initialize
/// - ns1__ReportListDataReturnType* soap_new_ns1__ReportListDataReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__ReportListDataReturnType* soap_new_req_ns1__ReportListDataReturnType(soap*, ...) allocate, set required members
/// - ns1__ReportListDataReturnType* soap_new_set_ns1__ReportListDataReturnType(soap*, ...) allocate, set all public members
/// - ns1__ReportListDataReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReportListDataReturnType(soap*, ns1__ReportListDataReturnType*) deserialize from a stream
/// - int soap_write_ns1__ReportListDataReturnType(soap*, ns1__ReportListDataReturnType*) serialize to a stream
/// - ns1__ReportListDataReturnType* ns1__ReportListDataReturnType::soap_dup(soap*) returns deep copy of ns1__ReportListDataReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReportListDataReturnType::soap_del() deep deletes ns1__ReportListDataReturnType data members, use only after ns1__ReportListDataReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReportListDataReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__ReportListDataItemType* of length 0..unbounded.
    std::vector<ns1__ReportListDataItemType*> returnArray                    0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":DNISListDataItemType is a complexType.
///
/// class ns1__DNISListDataItemType operations:
/// - ns1__DNISListDataItemType* soap_new_ns1__DNISListDataItemType(soap*) allocate and default initialize
/// - ns1__DNISListDataItemType* soap_new_ns1__DNISListDataItemType(soap*, int num) allocate array and default initialize values
/// - ns1__DNISListDataItemType* soap_new_req_ns1__DNISListDataItemType(soap*, ...) allocate, set required members
/// - ns1__DNISListDataItemType* soap_new_set_ns1__DNISListDataItemType(soap*, ...) allocate, set all public members
/// - ns1__DNISListDataItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DNISListDataItemType(soap*, ns1__DNISListDataItemType*) deserialize from a stream
/// - int soap_write_ns1__DNISListDataItemType(soap*, ns1__DNISListDataItemType*) serialize to a stream
/// - ns1__DNISListDataItemType* ns1__DNISListDataItemType::soap_dup(soap*) returns deep copy of ns1__DNISListDataItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DNISListDataItemType::soap_del() deep deletes ns1__DNISListDataItemType data members, use only after ns1__DNISListDataItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DNISListDataItemType
{ public:
/// Element "dnisId" of XSD type xs:unsignedInt.
    unsigned int                         dnisId                         1;	///< Required element.
/// Element "dnisName" of XSD type xs:string.
    std::string                          dnisName                       1;	///< Required element.
/// Element "dnisNumber" of XSD type xs:string.
    std::string                          dnisNumber                     1;	///< Required element.
/// Element "dnisType" of XSD type xs:unsignedInt.
    unsigned int                         dnisType                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":DNISListReturnType is a complexType.
///
/// class ns1__DNISListReturnType operations:
/// - ns1__DNISListReturnType* soap_new_ns1__DNISListReturnType(soap*) allocate and default initialize
/// - ns1__DNISListReturnType* soap_new_ns1__DNISListReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__DNISListReturnType* soap_new_req_ns1__DNISListReturnType(soap*, ...) allocate, set required members
/// - ns1__DNISListReturnType* soap_new_set_ns1__DNISListReturnType(soap*, ...) allocate, set all public members
/// - ns1__DNISListReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DNISListReturnType(soap*, ns1__DNISListReturnType*) deserialize from a stream
/// - int soap_write_ns1__DNISListReturnType(soap*, ns1__DNISListReturnType*) serialize to a stream
/// - ns1__DNISListReturnType* ns1__DNISListReturnType::soap_dup(soap*) returns deep copy of ns1__DNISListReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DNISListReturnType::soap_del() deep deletes ns1__DNISListReturnType data members, use only after ns1__DNISListReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DNISListReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__DNISListDataItemType* of length 1..unbounded.
    std::vector<ns1__DNISListDataItemType*> returnArray                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":BriefDNISInfoRequestType is a complexType.
///
/// class ns1__BriefDNISInfoRequestType operations:
/// - ns1__BriefDNISInfoRequestType* soap_new_ns1__BriefDNISInfoRequestType(soap*) allocate and default initialize
/// - ns1__BriefDNISInfoRequestType* soap_new_ns1__BriefDNISInfoRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BriefDNISInfoRequestType* soap_new_req_ns1__BriefDNISInfoRequestType(soap*, ...) allocate, set required members
/// - ns1__BriefDNISInfoRequestType* soap_new_set_ns1__BriefDNISInfoRequestType(soap*, ...) allocate, set all public members
/// - ns1__BriefDNISInfoRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BriefDNISInfoRequestType(soap*, ns1__BriefDNISInfoRequestType*) deserialize from a stream
/// - int soap_write_ns1__BriefDNISInfoRequestType(soap*, ns1__BriefDNISInfoRequestType*) serialize to a stream
/// - ns1__BriefDNISInfoRequestType* ns1__BriefDNISInfoRequestType::soap_dup(soap*) returns deep copy of ns1__BriefDNISInfoRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BriefDNISInfoRequestType::soap_del() deep deletes ns1__BriefDNISInfoRequestType data members, use only after ns1__BriefDNISInfoRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BriefDNISInfoRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":SuperGroupListDataItemType is a complexType.
///
/// class ns1__SuperGroupListDataItemType operations:
/// - ns1__SuperGroupListDataItemType* soap_new_ns1__SuperGroupListDataItemType(soap*) allocate and default initialize
/// - ns1__SuperGroupListDataItemType* soap_new_ns1__SuperGroupListDataItemType(soap*, int num) allocate array and default initialize values
/// - ns1__SuperGroupListDataItemType* soap_new_req_ns1__SuperGroupListDataItemType(soap*, ...) allocate, set required members
/// - ns1__SuperGroupListDataItemType* soap_new_set_ns1__SuperGroupListDataItemType(soap*, ...) allocate, set all public members
/// - ns1__SuperGroupListDataItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SuperGroupListDataItemType(soap*, ns1__SuperGroupListDataItemType*) deserialize from a stream
/// - int soap_write_ns1__SuperGroupListDataItemType(soap*, ns1__SuperGroupListDataItemType*) serialize to a stream
/// - ns1__SuperGroupListDataItemType* ns1__SuperGroupListDataItemType::soap_dup(soap*) returns deep copy of ns1__SuperGroupListDataItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SuperGroupListDataItemType::soap_del() deep deletes ns1__SuperGroupListDataItemType data members, use only after ns1__SuperGroupListDataItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SuperGroupListDataItemType
{ public:
/// Element "superGroupId" of XSD type xs:unsignedInt.
    unsigned int                         superGroupId                   1;	///< Required element.
/// Element "superGroupName" of XSD type xs:string.
    std::string                          superGroupName                 1;	///< Required element.
/// Vector of ns1__GroupListDataItemType* of length 0..unbounded.
    std::vector<ns1__GroupListDataItemType*> returnArray                    0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":SuperGroupListReturnType is a complexType.
///
/// class ns1__SuperGroupListReturnType operations:
/// - ns1__SuperGroupListReturnType* soap_new_ns1__SuperGroupListReturnType(soap*) allocate and default initialize
/// - ns1__SuperGroupListReturnType* soap_new_ns1__SuperGroupListReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__SuperGroupListReturnType* soap_new_req_ns1__SuperGroupListReturnType(soap*, ...) allocate, set required members
/// - ns1__SuperGroupListReturnType* soap_new_set_ns1__SuperGroupListReturnType(soap*, ...) allocate, set all public members
/// - ns1__SuperGroupListReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SuperGroupListReturnType(soap*, ns1__SuperGroupListReturnType*) deserialize from a stream
/// - int soap_write_ns1__SuperGroupListReturnType(soap*, ns1__SuperGroupListReturnType*) serialize to a stream
/// - ns1__SuperGroupListReturnType* ns1__SuperGroupListReturnType::soap_dup(soap*) returns deep copy of ns1__SuperGroupListReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SuperGroupListReturnType::soap_del() deep deletes ns1__SuperGroupListReturnType data members, use only after ns1__SuperGroupListReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SuperGroupListReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__SuperGroupListDataItemType* of length 1..unbounded.
    std::vector<ns1__SuperGroupListDataItemType*> returnArray                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":SaveWorkspaseRequestType is a complexType.
///
/// class ns1__SaveWorkspaseRequestType operations:
/// - ns1__SaveWorkspaseRequestType* soap_new_ns1__SaveWorkspaseRequestType(soap*) allocate and default initialize
/// - ns1__SaveWorkspaseRequestType* soap_new_ns1__SaveWorkspaseRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__SaveWorkspaseRequestType* soap_new_req_ns1__SaveWorkspaseRequestType(soap*, ...) allocate, set required members
/// - ns1__SaveWorkspaseRequestType* soap_new_set_ns1__SaveWorkspaseRequestType(soap*, ...) allocate, set all public members
/// - ns1__SaveWorkspaseRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SaveWorkspaseRequestType(soap*, ns1__SaveWorkspaseRequestType*) deserialize from a stream
/// - int soap_write_ns1__SaveWorkspaseRequestType(soap*, ns1__SaveWorkspaseRequestType*) serialize to a stream
/// - ns1__SaveWorkspaseRequestType* ns1__SaveWorkspaseRequestType::soap_dup(soap*) returns deep copy of ns1__SaveWorkspaseRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SaveWorkspaseRequestType::soap_del() deep deletes ns1__SaveWorkspaseRequestType data members, use only after ns1__SaveWorkspaseRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SaveWorkspaseRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Vector of ns1__DefaultWorkspaceItemType* of length 0..unbounded.
    std::vector<ns1__DefaultWorkspaceItemType*> RequestArray                   0;	///< Elements.
/// Element "fontSize" of XSD type xs:string.
    std::string                          fontSize                       1;	///< Required element.
/// Element "language" of XSD type xs:string.
    std::string                          language                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":RequestSaveReportType is a complexType.
///
/// class ns1__RequestSaveReportType operations:
/// - ns1__RequestSaveReportType* soap_new_ns1__RequestSaveReportType(soap*) allocate and default initialize
/// - ns1__RequestSaveReportType* soap_new_ns1__RequestSaveReportType(soap*, int num) allocate array and default initialize values
/// - ns1__RequestSaveReportType* soap_new_req_ns1__RequestSaveReportType(soap*, ...) allocate, set required members
/// - ns1__RequestSaveReportType* soap_new_set_ns1__RequestSaveReportType(soap*, ...) allocate, set all public members
/// - ns1__RequestSaveReportType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RequestSaveReportType(soap*, ns1__RequestSaveReportType*) deserialize from a stream
/// - int soap_write_ns1__RequestSaveReportType(soap*, ns1__RequestSaveReportType*) serialize to a stream
/// - ns1__RequestSaveReportType* ns1__RequestSaveReportType::soap_dup(soap*) returns deep copy of ns1__RequestSaveReportType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RequestSaveReportType::soap_del() deep deletes ns1__RequestSaveReportType data members, use only after ns1__RequestSaveReportType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RequestSaveReportType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Element "RequestItem" of XSD type "urn:EMISweb":ReportListDataItemType.
    ns1__ReportListDataItemType*         RequestItem                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":RequestDeleteReportType is a complexType.
///
/// class ns1__RequestDeleteReportType operations:
/// - ns1__RequestDeleteReportType* soap_new_ns1__RequestDeleteReportType(soap*) allocate and default initialize
/// - ns1__RequestDeleteReportType* soap_new_ns1__RequestDeleteReportType(soap*, int num) allocate array and default initialize values
/// - ns1__RequestDeleteReportType* soap_new_req_ns1__RequestDeleteReportType(soap*, ...) allocate, set required members
/// - ns1__RequestDeleteReportType* soap_new_set_ns1__RequestDeleteReportType(soap*, ...) allocate, set all public members
/// - ns1__RequestDeleteReportType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RequestDeleteReportType(soap*, ns1__RequestDeleteReportType*) deserialize from a stream
/// - int soap_write_ns1__RequestDeleteReportType(soap*, ns1__RequestDeleteReportType*) serialize to a stream
/// - ns1__RequestDeleteReportType* ns1__RequestDeleteReportType::soap_dup(soap*) returns deep copy of ns1__RequestDeleteReportType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RequestDeleteReportType::soap_del() deep deletes ns1__RequestDeleteReportType data members, use only after ns1__RequestDeleteReportType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RequestDeleteReportType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Element "reportId" of XSD type xs:unsignedInt.
    unsigned int                         reportId                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":LoginManagerRequestType is a complexType.
///
/// class ns1__LoginManagerRequestType operations:
/// - ns1__LoginManagerRequestType* soap_new_ns1__LoginManagerRequestType(soap*) allocate and default initialize
/// - ns1__LoginManagerRequestType* soap_new_ns1__LoginManagerRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__LoginManagerRequestType* soap_new_req_ns1__LoginManagerRequestType(soap*, ...) allocate, set required members
/// - ns1__LoginManagerRequestType* soap_new_set_ns1__LoginManagerRequestType(soap*, ...) allocate, set all public members
/// - ns1__LoginManagerRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__LoginManagerRequestType(soap*, ns1__LoginManagerRequestType*) deserialize from a stream
/// - int soap_write_ns1__LoginManagerRequestType(soap*, ns1__LoginManagerRequestType*) serialize to a stream
/// - ns1__LoginManagerRequestType* ns1__LoginManagerRequestType::soap_dup(soap*) returns deep copy of ns1__LoginManagerRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__LoginManagerRequestType::soap_del() deep deletes ns1__LoginManagerRequestType data members, use only after ns1__LoginManagerRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__LoginManagerRequestType
{ public:
/// Element "requestInfoHeader" of XSD type "urn:EMISweb":RequestInfoHeaderType.
    ns1__RequestInfoHeaderType*          requestInfoHeader              1;	///< Required element.
/// Element "Id" of XSD type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ApplicationRegisterRequestType is a complexType.
///
/// class ns1__ApplicationRegisterRequestType operations:
/// - ns1__ApplicationRegisterRequestType* soap_new_ns1__ApplicationRegisterRequestType(soap*) allocate and default initialize
/// - ns1__ApplicationRegisterRequestType* soap_new_ns1__ApplicationRegisterRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ApplicationRegisterRequestType* soap_new_req_ns1__ApplicationRegisterRequestType(soap*, ...) allocate, set required members
/// - ns1__ApplicationRegisterRequestType* soap_new_set_ns1__ApplicationRegisterRequestType(soap*, ...) allocate, set all public members
/// - ns1__ApplicationRegisterRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ApplicationRegisterRequestType(soap*, ns1__ApplicationRegisterRequestType*) deserialize from a stream
/// - int soap_write_ns1__ApplicationRegisterRequestType(soap*, ns1__ApplicationRegisterRequestType*) serialize to a stream
/// - ns1__ApplicationRegisterRequestType* ns1__ApplicationRegisterRequestType::soap_dup(soap*) returns deep copy of ns1__ApplicationRegisterRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ApplicationRegisterRequestType::soap_del() deep deletes ns1__ApplicationRegisterRequestType data members, use only after ns1__ApplicationRegisterRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ApplicationRegisterRequestType
{ public:
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// Element "applicationId" of XSD type xs:string.
    std::string                          applicationId                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ApplicationKeepAliveRequestType is a complexType.
///
/// class ns1__ApplicationKeepAliveRequestType operations:
/// - ns1__ApplicationKeepAliveRequestType* soap_new_ns1__ApplicationKeepAliveRequestType(soap*) allocate and default initialize
/// - ns1__ApplicationKeepAliveRequestType* soap_new_ns1__ApplicationKeepAliveRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ApplicationKeepAliveRequestType* soap_new_req_ns1__ApplicationKeepAliveRequestType(soap*, ...) allocate, set required members
/// - ns1__ApplicationKeepAliveRequestType* soap_new_set_ns1__ApplicationKeepAliveRequestType(soap*, ...) allocate, set all public members
/// - ns1__ApplicationKeepAliveRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ApplicationKeepAliveRequestType(soap*, ns1__ApplicationKeepAliveRequestType*) deserialize from a stream
/// - int soap_write_ns1__ApplicationKeepAliveRequestType(soap*, ns1__ApplicationKeepAliveRequestType*) serialize to a stream
/// - ns1__ApplicationKeepAliveRequestType* ns1__ApplicationKeepAliveRequestType::soap_dup(soap*) returns deep copy of ns1__ApplicationKeepAliveRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ApplicationKeepAliveRequestType::soap_del() deep deletes ns1__ApplicationKeepAliveRequestType data members, use only after ns1__ApplicationKeepAliveRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ApplicationKeepAliveRequestType
{ public:
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// Element "applicationId" of XSD type xs:string.
    std::string                          applicationId                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":ApplicationReturnType is a complexType.
///
/// class ns1__ApplicationReturnType operations:
/// - ns1__ApplicationReturnType* soap_new_ns1__ApplicationReturnType(soap*) allocate and default initialize
/// - ns1__ApplicationReturnType* soap_new_ns1__ApplicationReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__ApplicationReturnType* soap_new_req_ns1__ApplicationReturnType(soap*, ...) allocate, set required members
/// - ns1__ApplicationReturnType* soap_new_set_ns1__ApplicationReturnType(soap*, ...) allocate, set all public members
/// - ns1__ApplicationReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ApplicationReturnType(soap*, ns1__ApplicationReturnType*) deserialize from a stream
/// - int soap_write_ns1__ApplicationReturnType(soap*, ns1__ApplicationReturnType*) serialize to a stream
/// - ns1__ApplicationReturnType* ns1__ApplicationReturnType::soap_dup(soap*) returns deep copy of ns1__ApplicationReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ApplicationReturnType::soap_del() deep deletes ns1__ApplicationReturnType data members, use only after ns1__ApplicationReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ApplicationReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":StatRequestType is a complexType.
///
/// class ns1__StatRequestType operations:
/// - ns1__StatRequestType* soap_new_ns1__StatRequestType(soap*) allocate and default initialize
/// - ns1__StatRequestType* soap_new_ns1__StatRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__StatRequestType* soap_new_req_ns1__StatRequestType(soap*, ...) allocate, set required members
/// - ns1__StatRequestType* soap_new_set_ns1__StatRequestType(soap*, ...) allocate, set all public members
/// - ns1__StatRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StatRequestType(soap*, ns1__StatRequestType*) deserialize from a stream
/// - int soap_write_ns1__StatRequestType(soap*, ns1__StatRequestType*) serialize to a stream
/// - ns1__StatRequestType* ns1__StatRequestType::soap_dup(soap*) returns deep copy of ns1__StatRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StatRequestType::soap_del() deep deletes ns1__StatRequestType data members, use only after ns1__StatRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StatRequestType
{ public:
/// Element "serviceReqId" of XSD type xs:unsignedInt.
    unsigned int                         serviceReqId                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":StatItemType is a complexType.
///
/// class ns1__StatItemType operations:
/// - ns1__StatItemType* soap_new_ns1__StatItemType(soap*) allocate and default initialize
/// - ns1__StatItemType* soap_new_ns1__StatItemType(soap*, int num) allocate array and default initialize values
/// - ns1__StatItemType* soap_new_req_ns1__StatItemType(soap*, ...) allocate, set required members
/// - ns1__StatItemType* soap_new_set_ns1__StatItemType(soap*, ...) allocate, set all public members
/// - ns1__StatItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StatItemType(soap*, ns1__StatItemType*) deserialize from a stream
/// - int soap_write_ns1__StatItemType(soap*, ns1__StatItemType*) serialize to a stream
/// - ns1__StatItemType* ns1__StatItemType::soap_dup(soap*) returns deep copy of ns1__StatItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StatItemType::soap_del() deep deletes ns1__StatItemType data members, use only after ns1__StatItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StatItemType
{ public:
/// Element "ipAddress" of XSD type xs:string.
    std::string                          ipAddress                      1;	///< Required element.
/// Element "applicationId" of XSD type xs:string.
    std::string                          applicationId                  1;	///< Required element.
/// Element "lastKeepAliveSecAgo" of XSD type xs:unsignedInt.
    unsigned int                         lastKeepAliveSecAgo            1;	///< Required element.
/// Element "numOfVisors" of XSD type xs:unsignedInt.
    unsigned int                         numOfVisors                    1;	///< Required element.
/// Element "numOfMonitors" of XSD type xs:unsignedInt.
    unsigned int                         numOfMonitors                  1;	///< Required element.
/// Element "numOfWebVisors" of XSD type xs:unsignedInt.
    unsigned int                         numOfWebVisors                 1;	///< Required element.
/// Element "totalNumberOfSoapConnections" of XSD type xs:unsignedInt.
    unsigned int                         totalNumberOfSoapConnections   1;	///< Required element.
/// Element "numberOfSoapConnectionsSinceLastStatRequest" of XSD type xs:unsignedInt.
    unsigned int                         numberOfSoapConnectionsSinceLastStatRequest 1;	///< Required element.
/// Element "CurrentNumberOfSoapConnections" of XSD type xs:unsignedInt.
    unsigned int                         CurrentNumberOfSoapConnections 1;	///< Required element.
/// Element "LastError" of XSD type xs:unsignedInt.
    unsigned int                         LastError                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:EMISweb":StatReturnType is a complexType.
///
/// class ns1__StatReturnType operations:
/// - ns1__StatReturnType* soap_new_ns1__StatReturnType(soap*) allocate and default initialize
/// - ns1__StatReturnType* soap_new_ns1__StatReturnType(soap*, int num) allocate array and default initialize values
/// - ns1__StatReturnType* soap_new_req_ns1__StatReturnType(soap*, ...) allocate, set required members
/// - ns1__StatReturnType* soap_new_set_ns1__StatReturnType(soap*, ...) allocate, set all public members
/// - ns1__StatReturnType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StatReturnType(soap*, ns1__StatReturnType*) deserialize from a stream
/// - int soap_write_ns1__StatReturnType(soap*, ns1__StatReturnType*) serialize to a stream
/// - ns1__StatReturnType* ns1__StatReturnType::soap_dup(soap*) returns deep copy of ns1__StatReturnType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StatReturnType::soap_del() deep deletes ns1__StatReturnType data members, use only after ns1__StatReturnType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StatReturnType
{ public:
/// Element "responseInfoHeader" of XSD type "urn:EMISweb":ResponseInfoHeaderType.
    ns1__ResponseInfoHeaderType*         responseInfoHeader             1;	///< Required element.
/// Vector of ns1__StatItemType* of length 0..unbounded.
    std::vector<ns1__StatItemType*     > returnStatArray                0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:EMISweb                                                              *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:EMISweb":RequestGroupDetailFullInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupQueInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupAgentsInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupAbndInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupIntOvfInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupShiftInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupGeneralInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupPeriodInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestIvrApplInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestIvrPortInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestIvrGrpInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestMailboxInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestSuperGroupInfo of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestSuperGroupList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestUserLogin of XSD type "urn:EMISweb":LoginRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestUserLogout of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestIvrPortGroupList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestIvrAppList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestMailAccList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestGroupAgentsMatrix of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestAgentsList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestBriefAgentsMatrix of XSD type "urn:EMISweb":BriefInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestDefaultWorkspace of XSD type "urn:EMISweb":DefaultWorkspaceRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestReportListData of XSD type "urn:EMISweb":ReportListDataRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestVoiceDNISList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestEmailDNISList of XSD type "urn:EMISweb":GenRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestBriefVoiceDNISMatrix of XSD type "urn:EMISweb":BriefInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestBriefEMailDNISMatrix of XSD type "urn:EMISweb":BriefInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginLogoutRequestAcdComandAgent of XSD type "urn:EMISweb":ACDMultiRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginLogoutRequestAcdOneAgent of XSD type "urn:EMISweb":ACDMultiRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginLogoutRequestAcdMultiAgents of XSD type "urn:EMISweb":ACDMultiRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReleaseResumeRequestAcd of XSD type "urn:EMISweb":ACDRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":StartChatRequestAcd of XSD type "urn:EMISweb":TFRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":StartRecordRequestAcd of XSD type "urn:EMISweb":TFRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestTf of XSD type "urn:EMISweb":TFRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestSaveWorkspase of XSD type "urn:EMISweb":SaveWorkspaseRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestSaveReport of XSD type "urn:EMISweb":RequestSaveReportType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":RequestDeleteReport of XSD type "urn:EMISweb":RequestDeleteReportType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginManagerRequestAgents of XSD type "urn:EMISweb":LoginManagerRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginManagerRequestGroups of XSD type "urn:EMISweb":LoginManagerRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginManagerRequestAvailableAgents of XSD type "urn:EMISweb":LoginManagerRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginManagerRequestAvailableGroups of XSD type "urn:EMISweb":LoginManagerRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ApplicationRegisterRequest of XSD type "urn:EMISweb":ApplicationRegisterRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ApplicationKeepAliveRequest of XSD type "urn:EMISweb":ApplicationKeepAliveRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":TraceInternalStatRequest of XSD type "urn:EMISweb":StatRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":AgentNeedHelpRequest of XSD type "urn:EMISweb":BriefInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":GroupHourlyInfoRequest of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":GroupDailyBriefInfoRequest of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":GroupDailyDetailedInfoRequest of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":SuperGroupHourlyInfoRequest of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":SuperGroupDailyBriefInfoRequest of XSD type "urn:EMISweb":GenInfoRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupDetailFullInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupQueInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupAgentsInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupAbndInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupIntOvfInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupShiftInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupGeneralInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupPeriodInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnIvrApplInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnIvrPortInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnIvrGrpInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnMailboxInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnSuperGroupInfo of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnSuperGroupList of XSD type "urn:EMISweb":SuperGroupListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnUserLogin of XSD type "urn:EMISweb":LoginReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupList of XSD type "urn:EMISweb":GroupListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnIvrPortGroupList of XSD type "urn:EMISweb":GenListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnIvrAppList of XSD type "urn:EMISweb":GenListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnMailAccList of XSD type "urn:EMISweb":GenListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnGroupAgentsMatrix of XSD type "urn:EMISweb":ReturnMatrixDataTypePerGroup.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnAgentsList of XSD type "urn:EMISweb":AgentsListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnBriefAgentsMatrix of XSD type "urn:EMISweb":ReturnMatrixDataTypeBG.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnDefaultWorkspace of XSD type "urn:EMISweb":DefaultWorkspaceReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnReportListData of XSD type "urn:EMISweb":ReportListDataReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnVoiceDNISList of XSD type "urn:EMISweb":DNISListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnEmailDNISList of XSD type "urn:EMISweb":DNISListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnBriefVoiceDNISMatrix of XSD type "urn:EMISweb":ReturnMatrixDataTypeBG.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ReturnBriefEMailDNISMatrix of XSD type "urn:EMISweb":ReturnMatrixDataTypeBG.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":NoDataResponse of XSD type "urn:EMISweb":ResponseInfoHeaderType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ResponseSaveReport of XSD type "urn:EMISweb":ResponseSaveReportType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":LoginManagerResponse of XSD type "urn:EMISweb":GenListReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":StartChatResponse of XSD type "urn:EMISweb":ChatResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ApplicationRegisterResponse of XSD type "urn:EMISweb":ApplicationReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":ApplicationKeepAliveResponse of XSD type "urn:EMISweb":ApplicationReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":TraceInternalStatResponse of XSD type "urn:EMISweb":StatReturnType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":AgentNeedHelpResponse of XSD type "urn:EMISweb":ReturnMatrixDataTypeBG.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":GroupHourlyInfoResponse of XSD type "urn:EMISweb":ReturnMatrixDataTypePerGroup.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":GroupDailyBriefInfoResponse of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":GroupDailyDetailedInfoResponse of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":SuperGroupHourlyInfoResponse of XSD type "urn:EMISweb":ReturnMatrixDataTypePerSuperGroup.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:EMISweb":SuperGroupDailyBriefInfoResponse of XSD type "urn:EMISweb":ReturnArrayDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:EMISweb                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	EMISwebBinding 
//gsoap ns1  service type:	EMISwebPort 
//gsoap ns1  service port:	 
//gsoap ns1  service namespace:	urn:EMISweb 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage EMISweb Definitions

@section EMISweb_bindings Service Bindings

  - @ref EMISwebBinding

@section EMISweb_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page EMISwebBinding Binding "EMISwebBinding"

@section EMISwebBinding_operations Operations of Binding "EMISwebBinding"

  - @ref __ns1__GroupDetailFullInfo

  - @ref __ns1__GroupQueInfo

  - @ref __ns1__GroupAgentsInfo

  - @ref __ns1__GroupAbndInfo

  - @ref __ns1__GroupIntOvfInfo

  - @ref __ns1__GroupShiftInfo

  - @ref __ns1__GroupGeneralInfo

  - @ref __ns1__GroupPeriodInfo

  - @ref __ns1__IvrApplInfo

  - @ref __ns1__IvrPortInfo

  - @ref __ns1__IvrGrpInfo

  - @ref __ns1__MailboxInfo

  - @ref __ns1__SuperGroupInfo

  - @ref __ns1__SuperGroupList

  - @ref __ns1__UserLogin

  - @ref __ns1__UserLogout

  - @ref __ns1__GroupList

  - @ref __ns1__IvrPortGroupList

  - @ref __ns1__IvrAppList

  - @ref __ns1__MailAccList

  - @ref __ns1__AgentsPerGroupInfo

  - @ref __ns1__AgentsList

  - @ref __ns1__BriefAgents

  - @ref __ns1__DefaultWorkspace

  - @ref __ns1__ReportListData

  - @ref __ns1__VoiceDNISList

  - @ref __ns1__EmailDNISList

  - @ref __ns1__BriefVoiceDNIS

  - @ref __ns1__BriefEmailDNIS

  - @ref __ns1__CommandAgentLoginLogout

  - @ref __ns1__CommandAgentReleaseResume

  - @ref __ns1__CommandAgentStartChat

  - @ref __ns1__CommandAgentStartRecord

  - @ref __ns1__CommandAgentTelephonyFeatures

  - @ref __ns1__SaveWorkspase

  - @ref __ns1__SaveReport

  - @ref __ns1__DeleteReport

  - @ref __ns1__LoginManagerAgentsPerGroup

  - @ref __ns1__LoginManagerGroupsPerAgent

  - @ref __ns1__LoginManagerOneAgentToMultiGroups

  - @ref __ns1__LoginManagerMultiAgentsToOneGroup

  - @ref __ns1__LoginManagerAvailableAgentsForGroup

  - @ref __ns1__LoginManagerAvailableGroupsForAgent

  - @ref __ns1__ApplicationRegister

  - @ref __ns1__ApplicationKeepAlive

  - @ref __ns1__TraceInternalStat

  - @ref __ns1__AgentNeedHelp

  - @ref __ns1__GroupHourlyInfo

  - @ref __ns1__GroupDailyBriefInfo

  - @ref __ns1__GroupDailyDetailedInfo

  - @ref __ns1__SuperGroupHourlyInfo

  - @ref __ns1__SuperGroupDailyBriefInfo

@section EMISwebBinding_ports Default endpoints of Binding "EMISwebBinding"

  - 

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   EMISwebBinding                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupDetailFullInfo                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupDetailFullInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupDetailFullInfo"

  - Addressing input action: "urn:EMISweb/GroupDetailFullInfo"

  - Addressing output action: "urn:EMISweb/GroupDetailFullInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupDetailFullInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupDetailFullInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupDetailFullInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupDetailFullInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupDetailFullInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupDetailFullInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupDetailFullInfo SOAP
//gsoap ns1  service method-style:	GroupDetailFullInfo document
//gsoap ns1  service method-encoding:	GroupDetailFullInfo literal
//gsoap ns1  service method-input-action:	GroupDetailFullInfo urn:EMISweb/GroupDetailFullInfo
//gsoap ns1  service method-output-action:	GroupDetailFullInfo urn:EMISweb/GroupDetailFullInfoResponse
int __ns1__GroupDetailFullInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupDetailFullInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupDetailFullInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupQueInfo                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupQueInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupQueInfo"

  - Addressing input action: "urn:EMISweb/GroupQueInfo"

  - Addressing output action: "urn:EMISweb/GroupQueInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupQueInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupQueInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupQueInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupQueInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupQueInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupQueInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupQueInfo SOAP
//gsoap ns1  service method-style:	GroupQueInfo document
//gsoap ns1  service method-encoding:	GroupQueInfo literal
//gsoap ns1  service method-input-action:	GroupQueInfo urn:EMISweb/GroupQueInfo
//gsoap ns1  service method-output-action:	GroupQueInfo urn:EMISweb/GroupQueInfoResponse
int __ns1__GroupQueInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupQueInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupQueInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupAgentsInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupAgentsInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupAgentsInfo"

  - Addressing input action: "urn:EMISweb/GroupAgentsInfo"

  - Addressing output action: "urn:EMISweb/GroupAgentsInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupAgentsInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupAgentsInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupAgentsInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupAgentsInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupAgentsInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupAgentsInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupAgentsInfo SOAP
//gsoap ns1  service method-style:	GroupAgentsInfo document
//gsoap ns1  service method-encoding:	GroupAgentsInfo literal
//gsoap ns1  service method-input-action:	GroupAgentsInfo urn:EMISweb/GroupAgentsInfo
//gsoap ns1  service method-output-action:	GroupAgentsInfo urn:EMISweb/GroupAgentsInfoResponse
int __ns1__GroupAgentsInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupAgentsInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupAgentsInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupAbndInfo                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupAbndInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupAbndInfo"

  - Addressing input action: "urn:EMISweb/GroupAbndInfo"

  - Addressing output action: "urn:EMISweb/GroupAbndInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupAbndInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupAbndInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupAbndInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupAbndInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupAbndInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupAbndInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupAbndInfo SOAP
//gsoap ns1  service method-style:	GroupAbndInfo document
//gsoap ns1  service method-encoding:	GroupAbndInfo literal
//gsoap ns1  service method-input-action:	GroupAbndInfo urn:EMISweb/GroupAbndInfo
//gsoap ns1  service method-output-action:	GroupAbndInfo urn:EMISweb/GroupAbndInfoResponse
int __ns1__GroupAbndInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupAbndInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupAbndInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupIntOvfInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupIntOvfInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupIntOvfInfo"

  - Addressing input action: "urn:EMISweb/GroupIntOvfInfo"

  - Addressing output action: "urn:EMISweb/GroupIntOvfInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupIntOvfInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupIntOvfInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupIntOvfInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupIntOvfInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupIntOvfInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupIntOvfInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupIntOvfInfo SOAP
//gsoap ns1  service method-style:	GroupIntOvfInfo document
//gsoap ns1  service method-encoding:	GroupIntOvfInfo literal
//gsoap ns1  service method-input-action:	GroupIntOvfInfo urn:EMISweb/GroupIntOvfInfo
//gsoap ns1  service method-output-action:	GroupIntOvfInfo urn:EMISweb/GroupIntOvfInfoResponse
int __ns1__GroupIntOvfInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupIntOvfInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupIntOvfInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupShiftInfo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupShiftInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupShiftInfo"

  - Addressing input action: "urn:EMISweb/GroupShiftInfo"

  - Addressing output action: "urn:EMISweb/GroupShiftInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupShiftInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupShiftInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupShiftInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupShiftInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupShiftInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupShiftInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupShiftInfo SOAP
//gsoap ns1  service method-style:	GroupShiftInfo document
//gsoap ns1  service method-encoding:	GroupShiftInfo literal
//gsoap ns1  service method-input-action:	GroupShiftInfo urn:EMISweb/GroupShiftInfo
//gsoap ns1  service method-output-action:	GroupShiftInfo urn:EMISweb/GroupShiftInfoResponse
int __ns1__GroupShiftInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupShiftInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupShiftInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupGeneralInfo                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupGeneralInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupGeneralInfo"

  - Addressing input action: "urn:EMISweb/GroupGeneralInfo"

  - Addressing output action: "urn:EMISweb/GroupGeneralInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupGeneralInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupGeneralInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupGeneralInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupGeneralInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupGeneralInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupGeneralInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupGeneralInfo SOAP
//gsoap ns1  service method-style:	GroupGeneralInfo document
//gsoap ns1  service method-encoding:	GroupGeneralInfo literal
//gsoap ns1  service method-input-action:	GroupGeneralInfo urn:EMISweb/GroupGeneralInfo
//gsoap ns1  service method-output-action:	GroupGeneralInfo urn:EMISweb/GroupGeneralInfoResponse
int __ns1__GroupGeneralInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupGeneralInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupGeneralInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupPeriodInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupPeriodInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupPeriodInfo"

  - Addressing input action: "urn:EMISweb/GroupPeriodInfo"

  - Addressing output action: "urn:EMISweb/GroupPeriodInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupPeriodInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupPeriodInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupPeriodInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupPeriodInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupPeriodInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnGroupPeriodInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupPeriodInfo SOAP
//gsoap ns1  service method-style:	GroupPeriodInfo document
//gsoap ns1  service method-encoding:	GroupPeriodInfo literal
//gsoap ns1  service method-input-action:	GroupPeriodInfo urn:EMISweb/GroupPeriodInfo
//gsoap ns1  service method-output-action:	GroupPeriodInfo urn:EMISweb/GroupPeriodInfoResponse
int __ns1__GroupPeriodInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupPeriodInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnGroupPeriodInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__IvrApplInfo                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__IvrApplInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/IvrApplInfo"

  - Addressing input action: "urn:EMISweb/IvrApplInfo"

  - Addressing output action: "urn:EMISweb/IvrApplInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__IvrApplInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestIvrApplInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnIvrApplInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__IvrApplInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestIvrApplInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnIvrApplInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	IvrApplInfo SOAP
//gsoap ns1  service method-style:	IvrApplInfo document
//gsoap ns1  service method-encoding:	IvrApplInfo literal
//gsoap ns1  service method-input-action:	IvrApplInfo urn:EMISweb/IvrApplInfo
//gsoap ns1  service method-output-action:	IvrApplInfo urn:EMISweb/IvrApplInfoResponse
int __ns1__IvrApplInfo(
    ns1__GenInfoRequestType*            ns1__RequestIvrApplInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnIvrApplInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__IvrPortInfo                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__IvrPortInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/IvrPortInfo"

  - Addressing input action: "urn:EMISweb/IvrPortInfo"

  - Addressing output action: "urn:EMISweb/IvrPortInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__IvrPortInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestIvrPortInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnIvrPortInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__IvrPortInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestIvrPortInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnIvrPortInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	IvrPortInfo SOAP
//gsoap ns1  service method-style:	IvrPortInfo document
//gsoap ns1  service method-encoding:	IvrPortInfo literal
//gsoap ns1  service method-input-action:	IvrPortInfo urn:EMISweb/IvrPortInfo
//gsoap ns1  service method-output-action:	IvrPortInfo urn:EMISweb/IvrPortInfoResponse
int __ns1__IvrPortInfo(
    ns1__GenInfoRequestType*            ns1__RequestIvrPortInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnIvrPortInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__IvrGrpInfo                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__IvrGrpInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/IvrGrpInfo"

  - Addressing input action: "urn:EMISweb/IvrGrpInfo"

  - Addressing output action: "urn:EMISweb/IvrGrpInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__IvrGrpInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestIvrGrpInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnIvrGrpInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__IvrGrpInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestIvrGrpInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnIvrGrpInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	IvrGrpInfo SOAP
//gsoap ns1  service method-style:	IvrGrpInfo document
//gsoap ns1  service method-encoding:	IvrGrpInfo literal
//gsoap ns1  service method-input-action:	IvrGrpInfo urn:EMISweb/IvrGrpInfo
//gsoap ns1  service method-output-action:	IvrGrpInfo urn:EMISweb/IvrGrpInfoResponse
int __ns1__IvrGrpInfo(
    ns1__GenInfoRequestType*            ns1__RequestIvrGrpInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnIvrGrpInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__MailboxInfo                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__MailboxInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/MailboxInfo"

  - Addressing input action: "urn:EMISweb/MailboxInfo"

  - Addressing output action: "urn:EMISweb/MailboxInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__MailboxInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestMailboxInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnMailboxInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__MailboxInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestMailboxInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnMailboxInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	MailboxInfo SOAP
//gsoap ns1  service method-style:	MailboxInfo document
//gsoap ns1  service method-encoding:	MailboxInfo literal
//gsoap ns1  service method-input-action:	MailboxInfo urn:EMISweb/MailboxInfo
//gsoap ns1  service method-output-action:	MailboxInfo urn:EMISweb/MailboxInfoResponse
int __ns1__MailboxInfo(
    ns1__GenInfoRequestType*            ns1__RequestMailboxInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnMailboxInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SuperGroupInfo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SuperGroupInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/SuperGroupInfo"

  - Addressing input action: "urn:EMISweb/SuperGroupInfo"

  - Addressing output action: "urn:EMISweb/SuperGroupInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SuperGroupInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestSuperGroupInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnSuperGroupInfo
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SuperGroupInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestSuperGroupInfo,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__ReturnSuperGroupInfo
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SuperGroupInfo SOAP
//gsoap ns1  service method-style:	SuperGroupInfo document
//gsoap ns1  service method-encoding:	SuperGroupInfo literal
//gsoap ns1  service method-input-action:	SuperGroupInfo urn:EMISweb/SuperGroupInfo
//gsoap ns1  service method-output-action:	SuperGroupInfo urn:EMISweb/SuperGroupInfoResponse
int __ns1__SuperGroupInfo(
    ns1__GenInfoRequestType*            ns1__RequestSuperGroupInfo,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__ReturnSuperGroupInfo	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SuperGroupList                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SuperGroupList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/SuperGroupList"

  - Addressing input action: "urn:EMISweb/SuperGroupList"

  - Addressing output action: "urn:EMISweb/SuperGroupListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SuperGroupList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestSuperGroupList,
    // output parameters:
    ns1__SuperGroupListReturnType      &ns1__ReturnSuperGroupList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SuperGroupList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestSuperGroupList,
    // output parameters:
    ns1__SuperGroupListReturnType      &ns1__ReturnSuperGroupList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SuperGroupList SOAP
//gsoap ns1  service method-style:	SuperGroupList document
//gsoap ns1  service method-encoding:	SuperGroupList literal
//gsoap ns1  service method-input-action:	SuperGroupList urn:EMISweb/SuperGroupList
//gsoap ns1  service method-output-action:	SuperGroupList urn:EMISweb/SuperGroupListResponse
int __ns1__SuperGroupList(
    ns1__GenRequestType*                ns1__RequestSuperGroupList,	///< Input parameter
    ns1__SuperGroupListReturnType      &ns1__ReturnSuperGroupList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UserLogin                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UserLogin" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/UserLogin"

  - Addressing input action: "urn:EMISweb/UserLogin"

  - Addressing output action: "urn:EMISweb/UserLoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UserLogin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__LoginRequestType*              ns1__RequestUserLogin,
    // output parameters:
    ns1__LoginReturnType               &ns1__ReturnUserLogin
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UserLogin(
    struct soap *soap,
    // input parameters:
    ns1__LoginRequestType*              ns1__RequestUserLogin,
    // output parameters:
    ns1__LoginReturnType               &ns1__ReturnUserLogin
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UserLogin SOAP
//gsoap ns1  service method-style:	UserLogin document
//gsoap ns1  service method-encoding:	UserLogin literal
//gsoap ns1  service method-input-action:	UserLogin urn:EMISweb/UserLogin
//gsoap ns1  service method-output-action:	UserLogin urn:EMISweb/UserLoginResponse
int __ns1__UserLogin(
    ns1__LoginRequestType*              ns1__RequestUserLogin,	///< Input parameter
    ns1__LoginReturnType               &ns1__ReturnUserLogin	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UserLogout                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UserLogout" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/UserLogout"

  - Addressing input action: "urn:EMISweb/UserLogout"

  - Addressing output action: "urn:EMISweb/UserLogoutResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UserLogout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestUserLogout,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UserLogout(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestUserLogout,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UserLogout SOAP
//gsoap ns1  service method-style:	UserLogout document
//gsoap ns1  service method-encoding:	UserLogout literal
//gsoap ns1  service method-input-action:	UserLogout urn:EMISweb/UserLogout
//gsoap ns1  service method-output-action:	UserLogout urn:EMISweb/UserLogoutResponse
int __ns1__UserLogout(
    ns1__GenRequestType*                ns1__RequestUserLogout,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupList                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupList"

  - Addressing input action: "urn:EMISweb/GroupList"

  - Addressing output action: "urn:EMISweb/GroupListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestGroupList,
    // output parameters:
    ns1__GroupListReturnType           &ns1__ReturnGroupList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestGroupList,
    // output parameters:
    ns1__GroupListReturnType           &ns1__ReturnGroupList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupList SOAP
//gsoap ns1  service method-style:	GroupList document
//gsoap ns1  service method-encoding:	GroupList literal
//gsoap ns1  service method-input-action:	GroupList urn:EMISweb/GroupList
//gsoap ns1  service method-output-action:	GroupList urn:EMISweb/GroupListResponse
int __ns1__GroupList(
    ns1__GenRequestType*                ns1__RequestGroupList,	///< Input parameter
    ns1__GroupListReturnType           &ns1__ReturnGroupList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__IvrPortGroupList                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__IvrPortGroupList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/IvrPortGroupList"

  - Addressing input action: "urn:EMISweb/IvrPortGroupList"

  - Addressing output action: "urn:EMISweb/IvrPortGroupListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__IvrPortGroupList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestIvrPortGroupList,
    // output parameters:
    ns1__GenListReturnType             &ns1__ReturnIvrPortGroupList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__IvrPortGroupList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestIvrPortGroupList,
    // output parameters:
    ns1__GenListReturnType             &ns1__ReturnIvrPortGroupList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	IvrPortGroupList SOAP
//gsoap ns1  service method-style:	IvrPortGroupList document
//gsoap ns1  service method-encoding:	IvrPortGroupList literal
//gsoap ns1  service method-input-action:	IvrPortGroupList urn:EMISweb/IvrPortGroupList
//gsoap ns1  service method-output-action:	IvrPortGroupList urn:EMISweb/IvrPortGroupListResponse
int __ns1__IvrPortGroupList(
    ns1__GenRequestType*                ns1__RequestIvrPortGroupList,	///< Input parameter
    ns1__GenListReturnType             &ns1__ReturnIvrPortGroupList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__IvrAppList                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__IvrAppList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/IvrAppList"

  - Addressing input action: "urn:EMISweb/IvrAppList"

  - Addressing output action: "urn:EMISweb/IvrAppListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__IvrAppList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestIvrAppList,
    // output parameters:
    ns1__GenListReturnType             &ns1__ReturnIvrAppList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__IvrAppList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestIvrAppList,
    // output parameters:
    ns1__GenListReturnType             &ns1__ReturnIvrAppList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	IvrAppList SOAP
//gsoap ns1  service method-style:	IvrAppList document
//gsoap ns1  service method-encoding:	IvrAppList literal
//gsoap ns1  service method-input-action:	IvrAppList urn:EMISweb/IvrAppList
//gsoap ns1  service method-output-action:	IvrAppList urn:EMISweb/IvrAppListResponse
int __ns1__IvrAppList(
    ns1__GenRequestType*                ns1__RequestIvrAppList,	///< Input parameter
    ns1__GenListReturnType             &ns1__ReturnIvrAppList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__MailAccList                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__MailAccList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/MailAccList"

  - Addressing input action: "urn:EMISweb/MailAccList"

  - Addressing output action: "urn:EMISweb/MailAccListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__MailAccList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestMailAccList,
    // output parameters:
    ns1__GenListReturnType             &ns1__ReturnMailAccList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__MailAccList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestMailAccList,
    // output parameters:
    ns1__GenListReturnType             &ns1__ReturnMailAccList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	MailAccList SOAP
//gsoap ns1  service method-style:	MailAccList document
//gsoap ns1  service method-encoding:	MailAccList literal
//gsoap ns1  service method-input-action:	MailAccList urn:EMISweb/MailAccList
//gsoap ns1  service method-output-action:	MailAccList urn:EMISweb/MailAccListResponse
int __ns1__MailAccList(
    ns1__GenRequestType*                ns1__RequestMailAccList,	///< Input parameter
    ns1__GenListReturnType             &ns1__ReturnMailAccList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AgentsPerGroupInfo                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AgentsPerGroupInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/AgentsPerGroupInfo"

  - Addressing input action: "urn:EMISweb/AgentsPerGroupInfo"

  - Addressing output action: "urn:EMISweb/AgentsPerGroupInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AgentsPerGroupInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupAgentsMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypePerGroup  &ns1__ReturnGroupAgentsMatrix
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AgentsPerGroupInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__RequestGroupAgentsMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypePerGroup  &ns1__ReturnGroupAgentsMatrix
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AgentsPerGroupInfo SOAP
//gsoap ns1  service method-style:	AgentsPerGroupInfo document
//gsoap ns1  service method-encoding:	AgentsPerGroupInfo literal
//gsoap ns1  service method-input-action:	AgentsPerGroupInfo urn:EMISweb/AgentsPerGroupInfo
//gsoap ns1  service method-output-action:	AgentsPerGroupInfo urn:EMISweb/AgentsPerGroupInfoResponse
int __ns1__AgentsPerGroupInfo(
    ns1__GenInfoRequestType*            ns1__RequestGroupAgentsMatrix,	///< Input parameter
    ns1__ReturnMatrixDataTypePerGroup  &ns1__ReturnGroupAgentsMatrix	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AgentsList                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AgentsList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/AgentsList"

  - Addressing input action: "urn:EMISweb/AgentsList"

  - Addressing output action: "urn:EMISweb/AgentsListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AgentsList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestAgentsList,
    // output parameters:
    ns1__AgentsListReturnType          &ns1__ReturnAgentsList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AgentsList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestAgentsList,
    // output parameters:
    ns1__AgentsListReturnType          &ns1__ReturnAgentsList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AgentsList SOAP
//gsoap ns1  service method-style:	AgentsList document
//gsoap ns1  service method-encoding:	AgentsList literal
//gsoap ns1  service method-input-action:	AgentsList urn:EMISweb/AgentsList
//gsoap ns1  service method-output-action:	AgentsList urn:EMISweb/AgentsListResponse
int __ns1__AgentsList(
    ns1__GenRequestType*                ns1__RequestAgentsList,	///< Input parameter
    ns1__AgentsListReturnType          &ns1__ReturnAgentsList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BriefAgents                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BriefAgents" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/BriefAgents"

  - Addressing input action: "urn:EMISweb/BriefAgents"

  - Addressing output action: "urn:EMISweb/BriefAgentsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BriefAgents(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__RequestBriefAgentsMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefAgentsMatrix
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BriefAgents(
    struct soap *soap,
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__RequestBriefAgentsMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefAgentsMatrix
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BriefAgents SOAP
//gsoap ns1  service method-style:	BriefAgents document
//gsoap ns1  service method-encoding:	BriefAgents literal
//gsoap ns1  service method-input-action:	BriefAgents urn:EMISweb/BriefAgents
//gsoap ns1  service method-output-action:	BriefAgents urn:EMISweb/BriefAgentsResponse
int __ns1__BriefAgents(
    ns1__BriefInfoRequestType*          ns1__RequestBriefAgentsMatrix,	///< Input parameter
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefAgentsMatrix	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DefaultWorkspace                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DefaultWorkspace" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/DefaultWorkspace"

  - Addressing input action: "urn:EMISweb/DefaultWorkspace"

  - Addressing output action: "urn:EMISweb/DefaultWorkspaceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DefaultWorkspace(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__DefaultWorkspaceRequestType*   ns1__RequestDefaultWorkspace,
    // output parameters:
    ns1__DefaultWorkspaceReturnType    &ns1__ReturnDefaultWorkspace
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DefaultWorkspace(
    struct soap *soap,
    // input parameters:
    ns1__DefaultWorkspaceRequestType*   ns1__RequestDefaultWorkspace,
    // output parameters:
    ns1__DefaultWorkspaceReturnType    &ns1__ReturnDefaultWorkspace
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DefaultWorkspace SOAP
//gsoap ns1  service method-style:	DefaultWorkspace document
//gsoap ns1  service method-encoding:	DefaultWorkspace literal
//gsoap ns1  service method-input-action:	DefaultWorkspace urn:EMISweb/DefaultWorkspace
//gsoap ns1  service method-output-action:	DefaultWorkspace urn:EMISweb/DefaultWorkspaceResponse
int __ns1__DefaultWorkspace(
    ns1__DefaultWorkspaceRequestType*   ns1__RequestDefaultWorkspace,	///< Input parameter
    ns1__DefaultWorkspaceReturnType    &ns1__ReturnDefaultWorkspace	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ReportListData                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ReportListData" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/ReportListData"

  - Addressing input action: "urn:EMISweb/ReportListData"

  - Addressing output action: "urn:EMISweb/ReportListDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ReportListData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ReportListDataRequestType*     ns1__RequestReportListData,
    // output parameters:
    ns1__ReportListDataReturnType      &ns1__ReturnReportListData
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ReportListData(
    struct soap *soap,
    // input parameters:
    ns1__ReportListDataRequestType*     ns1__RequestReportListData,
    // output parameters:
    ns1__ReportListDataReturnType      &ns1__ReturnReportListData
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ReportListData SOAP
//gsoap ns1  service method-style:	ReportListData document
//gsoap ns1  service method-encoding:	ReportListData literal
//gsoap ns1  service method-input-action:	ReportListData urn:EMISweb/ReportListData
//gsoap ns1  service method-output-action:	ReportListData urn:EMISweb/ReportListDataResponse
int __ns1__ReportListData(
    ns1__ReportListDataRequestType*     ns1__RequestReportListData,	///< Input parameter
    ns1__ReportListDataReturnType      &ns1__ReturnReportListData	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__VoiceDNISList                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__VoiceDNISList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/VoiceDNISList"

  - Addressing input action: "urn:EMISweb/VoiceDNISList"

  - Addressing output action: "urn:EMISweb/VoiceDNISListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__VoiceDNISList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestVoiceDNISList,
    // output parameters:
    ns1__DNISListReturnType            &ns1__ReturnVoiceDNISList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__VoiceDNISList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestVoiceDNISList,
    // output parameters:
    ns1__DNISListReturnType            &ns1__ReturnVoiceDNISList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	VoiceDNISList SOAP
//gsoap ns1  service method-style:	VoiceDNISList document
//gsoap ns1  service method-encoding:	VoiceDNISList literal
//gsoap ns1  service method-input-action:	VoiceDNISList urn:EMISweb/VoiceDNISList
//gsoap ns1  service method-output-action:	VoiceDNISList urn:EMISweb/VoiceDNISListResponse
int __ns1__VoiceDNISList(
    ns1__GenRequestType*                ns1__RequestVoiceDNISList,	///< Input parameter
    ns1__DNISListReturnType            &ns1__ReturnVoiceDNISList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EmailDNISList                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EmailDNISList" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/EmailDNISList"

  - Addressing input action: "urn:EMISweb/EmailDNISList"

  - Addressing output action: "urn:EMISweb/EmailDNISListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EmailDNISList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenRequestType*                ns1__RequestEmailDNISList,
    // output parameters:
    ns1__DNISListReturnType            &ns1__ReturnEmailDNISList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EmailDNISList(
    struct soap *soap,
    // input parameters:
    ns1__GenRequestType*                ns1__RequestEmailDNISList,
    // output parameters:
    ns1__DNISListReturnType            &ns1__ReturnEmailDNISList
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EmailDNISList SOAP
//gsoap ns1  service method-style:	EmailDNISList document
//gsoap ns1  service method-encoding:	EmailDNISList literal
//gsoap ns1  service method-input-action:	EmailDNISList urn:EMISweb/EmailDNISList
//gsoap ns1  service method-output-action:	EmailDNISList urn:EMISweb/EmailDNISListResponse
int __ns1__EmailDNISList(
    ns1__GenRequestType*                ns1__RequestEmailDNISList,	///< Input parameter
    ns1__DNISListReturnType            &ns1__ReturnEmailDNISList	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BriefVoiceDNIS                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BriefVoiceDNIS" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/BriefVoiceDNIS"

  - Addressing input action: "urn:EMISweb/BriefVoiceDNIS"

  - Addressing output action: "urn:EMISweb/BriefVoiceDNISResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BriefVoiceDNIS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__RequestBriefVoiceDNISMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefVoiceDNISMatrix
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BriefVoiceDNIS(
    struct soap *soap,
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__RequestBriefVoiceDNISMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefVoiceDNISMatrix
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BriefVoiceDNIS SOAP
//gsoap ns1  service method-style:	BriefVoiceDNIS document
//gsoap ns1  service method-encoding:	BriefVoiceDNIS literal
//gsoap ns1  service method-input-action:	BriefVoiceDNIS urn:EMISweb/BriefVoiceDNIS
//gsoap ns1  service method-output-action:	BriefVoiceDNIS urn:EMISweb/BriefVoiceDNISResponse
int __ns1__BriefVoiceDNIS(
    ns1__BriefInfoRequestType*          ns1__RequestBriefVoiceDNISMatrix,	///< Input parameter
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefVoiceDNISMatrix	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BriefEmailDNIS                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BriefEmailDNIS" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/BriefEmailDNIS"

  - Addressing input action: "urn:EMISweb/BriefEmailDNIS"

  - Addressing output action: "urn:EMISweb/BriefEmailDNISResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BriefEmailDNIS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__RequestBriefEMailDNISMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefEMailDNISMatrix
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BriefEmailDNIS(
    struct soap *soap,
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__RequestBriefEMailDNISMatrix,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefEMailDNISMatrix
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BriefEmailDNIS SOAP
//gsoap ns1  service method-style:	BriefEmailDNIS document
//gsoap ns1  service method-encoding:	BriefEmailDNIS literal
//gsoap ns1  service method-input-action:	BriefEmailDNIS urn:EMISweb/BriefEmailDNIS
//gsoap ns1  service method-output-action:	BriefEmailDNIS urn:EMISweb/BriefEmailDNISResponse
int __ns1__BriefEmailDNIS(
    ns1__BriefInfoRequestType*          ns1__RequestBriefEMailDNISMatrix,	///< Input parameter
    ns1__ReturnMatrixDataTypeBG        &ns1__ReturnBriefEMailDNISMatrix	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CommandAgentLoginLogout                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CommandAgentLoginLogout" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/CommandAgentLoginLogout"

  - Addressing input action: "urn:EMISweb/CommandAgentLoginLogout"

  - Addressing output action: "urn:EMISweb/CommandAgentLoginLogoutResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CommandAgentLoginLogout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdComandAgent,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CommandAgentLoginLogout(
    struct soap *soap,
    // input parameters:
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdComandAgent,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CommandAgentLoginLogout SOAP
//gsoap ns1  service method-style:	CommandAgentLoginLogout document
//gsoap ns1  service method-encoding:	CommandAgentLoginLogout literal
//gsoap ns1  service method-input-action:	CommandAgentLoginLogout urn:EMISweb/CommandAgentLoginLogout
//gsoap ns1  service method-output-action:	CommandAgentLoginLogout urn:EMISweb/CommandAgentLoginLogoutResponse
int __ns1__CommandAgentLoginLogout(
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdComandAgent,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CommandAgentReleaseResume                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CommandAgentReleaseResume" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/CommandAgentReleaseResume"

  - Addressing input action: "urn:EMISweb/CommandAgentReleaseResume"

  - Addressing output action: "urn:EMISweb/CommandAgentReleaseResumeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CommandAgentReleaseResume(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ACDRequestType*                ns1__ReleaseResumeRequestAcd,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CommandAgentReleaseResume(
    struct soap *soap,
    // input parameters:
    ns1__ACDRequestType*                ns1__ReleaseResumeRequestAcd,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CommandAgentReleaseResume SOAP
//gsoap ns1  service method-style:	CommandAgentReleaseResume document
//gsoap ns1  service method-encoding:	CommandAgentReleaseResume literal
//gsoap ns1  service method-input-action:	CommandAgentReleaseResume urn:EMISweb/CommandAgentReleaseResume
//gsoap ns1  service method-output-action:	CommandAgentReleaseResume urn:EMISweb/CommandAgentReleaseResumeResponse
int __ns1__CommandAgentReleaseResume(
    ns1__ACDRequestType*                ns1__ReleaseResumeRequestAcd,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CommandAgentStartChat                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CommandAgentStartChat" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/CommandAgentStartChat"

  - Addressing input action: "urn:EMISweb/CommandAgentStartChat"

  - Addressing output action: "urn:EMISweb/CommandAgentStartChatResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CommandAgentStartChat(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__TFRequestType*                 ns1__StartChatRequestAcd,
    // output parameters:
    ns1__ChatResponseType              &ns1__StartChatResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CommandAgentStartChat(
    struct soap *soap,
    // input parameters:
    ns1__TFRequestType*                 ns1__StartChatRequestAcd,
    // output parameters:
    ns1__ChatResponseType              &ns1__StartChatResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CommandAgentStartChat SOAP
//gsoap ns1  service method-style:	CommandAgentStartChat document
//gsoap ns1  service method-encoding:	CommandAgentStartChat literal
//gsoap ns1  service method-input-action:	CommandAgentStartChat urn:EMISweb/CommandAgentStartChat
//gsoap ns1  service method-output-action:	CommandAgentStartChat urn:EMISweb/CommandAgentStartChatResponse
int __ns1__CommandAgentStartChat(
    ns1__TFRequestType*                 ns1__StartChatRequestAcd,	///< Input parameter
    ns1__ChatResponseType              &ns1__StartChatResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CommandAgentStartRecord                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CommandAgentStartRecord" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/CommandAgentStartRecord"

  - Addressing input action: "urn:EMISweb/CommandAgentStartRecord"

  - Addressing output action: "urn:EMISweb/CommandAgentStartRecordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CommandAgentStartRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__TFRequestType*                 ns1__StartRecordRequestAcd,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CommandAgentStartRecord(
    struct soap *soap,
    // input parameters:
    ns1__TFRequestType*                 ns1__StartRecordRequestAcd,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CommandAgentStartRecord SOAP
//gsoap ns1  service method-style:	CommandAgentStartRecord document
//gsoap ns1  service method-encoding:	CommandAgentStartRecord literal
//gsoap ns1  service method-input-action:	CommandAgentStartRecord urn:EMISweb/CommandAgentStartRecord
//gsoap ns1  service method-output-action:	CommandAgentStartRecord urn:EMISweb/CommandAgentStartRecordResponse
int __ns1__CommandAgentStartRecord(
    ns1__TFRequestType*                 ns1__StartRecordRequestAcd,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CommandAgentTelephonyFeatures                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CommandAgentTelephonyFeatures" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/CommandAgentTelephonyFeatures"

  - Addressing input action: "urn:EMISweb/CommandAgentTelephonyFeatures"

  - Addressing output action: "urn:EMISweb/CommandAgentTelephonyFeaturesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CommandAgentTelephonyFeatures(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__TFRequestType*                 ns1__RequestTf,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CommandAgentTelephonyFeatures(
    struct soap *soap,
    // input parameters:
    ns1__TFRequestType*                 ns1__RequestTf,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CommandAgentTelephonyFeatures SOAP
//gsoap ns1  service method-style:	CommandAgentTelephonyFeatures document
//gsoap ns1  service method-encoding:	CommandAgentTelephonyFeatures literal
//gsoap ns1  service method-input-action:	CommandAgentTelephonyFeatures urn:EMISweb/CommandAgentTelephonyFeatures
//gsoap ns1  service method-output-action:	CommandAgentTelephonyFeatures urn:EMISweb/CommandAgentTelephonyFeaturesResponse
int __ns1__CommandAgentTelephonyFeatures(
    ns1__TFRequestType*                 ns1__RequestTf,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveWorkspase                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveWorkspase" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/SaveWorkspase"

  - Addressing input action: "urn:EMISweb/SaveWorkspase"

  - Addressing output action: "urn:EMISweb/SaveWorkspaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveWorkspase(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__SaveWorkspaseRequestType*      ns1__RequestSaveWorkspase,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveWorkspase(
    struct soap *soap,
    // input parameters:
    ns1__SaveWorkspaseRequestType*      ns1__RequestSaveWorkspase,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveWorkspase SOAP
//gsoap ns1  service method-style:	SaveWorkspase document
//gsoap ns1  service method-encoding:	SaveWorkspase literal
//gsoap ns1  service method-input-action:	SaveWorkspase urn:EMISweb/SaveWorkspase
//gsoap ns1  service method-output-action:	SaveWorkspase urn:EMISweb/SaveWorkspaseResponse
int __ns1__SaveWorkspase(
    ns1__SaveWorkspaseRequestType*      ns1__RequestSaveWorkspase,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveReport                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveReport" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/SaveReport"

  - Addressing input action: "urn:EMISweb/SaveReport"

  - Addressing output action: "urn:EMISweb/SaveReportResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveReport(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__RequestSaveReportType*         ns1__RequestSaveReport,
    // output parameters:
    ns1__ResponseSaveReportType        &ns1__ResponseSaveReport
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveReport(
    struct soap *soap,
    // input parameters:
    ns1__RequestSaveReportType*         ns1__RequestSaveReport,
    // output parameters:
    ns1__ResponseSaveReportType        &ns1__ResponseSaveReport
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveReport SOAP
//gsoap ns1  service method-style:	SaveReport document
//gsoap ns1  service method-encoding:	SaveReport literal
//gsoap ns1  service method-input-action:	SaveReport urn:EMISweb/SaveReport
//gsoap ns1  service method-output-action:	SaveReport urn:EMISweb/SaveReportResponse
int __ns1__SaveReport(
    ns1__RequestSaveReportType*         ns1__RequestSaveReport,	///< Input parameter
    ns1__ResponseSaveReportType        &ns1__ResponseSaveReport	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DeleteReport                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DeleteReport" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/SaveReport"

  - Addressing input action: "urn:EMISweb/SaveReport"

  - Addressing output action: "urn:EMISweb/SaveReportResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DeleteReport(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__RequestDeleteReportType*       ns1__RequestDeleteReport,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DeleteReport(
    struct soap *soap,
    // input parameters:
    ns1__RequestDeleteReportType*       ns1__RequestDeleteReport,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteReport SOAP
//gsoap ns1  service method-style:	DeleteReport document
//gsoap ns1  service method-encoding:	DeleteReport literal
//gsoap ns1  service method-input-action:	DeleteReport urn:EMISweb/SaveReport
//gsoap ns1  service method-output-action:	DeleteReport urn:EMISweb/SaveReportResponse
int __ns1__DeleteReport(
    ns1__RequestDeleteReportType*       ns1__RequestDeleteReport,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginManagerAgentsPerGroup                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginManagerAgentsPerGroup" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/LoginManagerAgentsPerGroup"

  - Addressing input action: "urn:EMISweb/LoginManagerAgentsPerGroup"

  - Addressing output action: "urn:EMISweb/LoginManagerAgentsPerGroupResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginManagerAgentsPerGroup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAgents,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginManagerAgentsPerGroup(
    struct soap *soap,
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAgents,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginManagerAgentsPerGroup SOAP
//gsoap ns1  service method-style:	LoginManagerAgentsPerGroup document
//gsoap ns1  service method-encoding:	LoginManagerAgentsPerGroup literal
//gsoap ns1  service method-input-action:	LoginManagerAgentsPerGroup urn:EMISweb/LoginManagerAgentsPerGroup
//gsoap ns1  service method-output-action:	LoginManagerAgentsPerGroup urn:EMISweb/LoginManagerAgentsPerGroupResponse
int __ns1__LoginManagerAgentsPerGroup(
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAgents,	///< Input parameter
    ns1__GenListReturnType             &ns1__LoginManagerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginManagerGroupsPerAgent                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginManagerGroupsPerAgent" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/LoginManagerGroupsPerAgent"

  - Addressing input action: "urn:EMISweb/LoginManagerGroupsPerAgent"

  - Addressing output action: "urn:EMISweb/LoginManagerGroupsPerAgentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginManagerGroupsPerAgent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestGroups,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginManagerGroupsPerAgent(
    struct soap *soap,
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestGroups,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginManagerGroupsPerAgent SOAP
//gsoap ns1  service method-style:	LoginManagerGroupsPerAgent document
//gsoap ns1  service method-encoding:	LoginManagerGroupsPerAgent literal
//gsoap ns1  service method-input-action:	LoginManagerGroupsPerAgent urn:EMISweb/LoginManagerGroupsPerAgent
//gsoap ns1  service method-output-action:	LoginManagerGroupsPerAgent urn:EMISweb/LoginManagerGroupsPerAgentResponse
int __ns1__LoginManagerGroupsPerAgent(
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestGroups,	///< Input parameter
    ns1__GenListReturnType             &ns1__LoginManagerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginManagerOneAgentToMultiGroups                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginManagerOneAgentToMultiGroups" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/LoginManagerOneAgentToMultiGroups"

  - Addressing input action: "urn:EMISweb/LoginManagerOneAgentToMultiGroups"

  - Addressing output action: "urn:EMISweb/LoginManagerOneAgentToMultiGroupsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginManagerOneAgentToMultiGroups(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdOneAgent,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginManagerOneAgentToMultiGroups(
    struct soap *soap,
    // input parameters:
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdOneAgent,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginManagerOneAgentToMultiGroups SOAP
//gsoap ns1  service method-style:	LoginManagerOneAgentToMultiGroups document
//gsoap ns1  service method-encoding:	LoginManagerOneAgentToMultiGroups literal
//gsoap ns1  service method-input-action:	LoginManagerOneAgentToMultiGroups urn:EMISweb/LoginManagerOneAgentToMultiGroups
//gsoap ns1  service method-output-action:	LoginManagerOneAgentToMultiGroups urn:EMISweb/LoginManagerOneAgentToMultiGroupsResponse
int __ns1__LoginManagerOneAgentToMultiGroups(
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdOneAgent,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginManagerMultiAgentsToOneGroup                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginManagerMultiAgentsToOneGroup" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/LoginManagerMultiAgentsToOneGroup"

  - Addressing input action: "urn:EMISweb/LoginManagerMultiAgentsToOneGroup"

  - Addressing output action: "urn:EMISweb/LoginManagerMultiAgentsToOneGroupResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginManagerMultiAgentsToOneGroup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdMultiAgents,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginManagerMultiAgentsToOneGroup(
    struct soap *soap,
    // input parameters:
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdMultiAgents,
    // output parameters:
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginManagerMultiAgentsToOneGroup SOAP
//gsoap ns1  service method-style:	LoginManagerMultiAgentsToOneGroup document
//gsoap ns1  service method-encoding:	LoginManagerMultiAgentsToOneGroup literal
//gsoap ns1  service method-input-action:	LoginManagerMultiAgentsToOneGroup urn:EMISweb/LoginManagerMultiAgentsToOneGroup
//gsoap ns1  service method-output-action:	LoginManagerMultiAgentsToOneGroup urn:EMISweb/LoginManagerMultiAgentsToOneGroupResponse
int __ns1__LoginManagerMultiAgentsToOneGroup(
    ns1__ACDMultiRequestType*           ns1__LoginLogoutRequestAcdMultiAgents,	///< Input parameter
    ns1__ResponseInfoHeaderType        &ns1__NoDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginManagerAvailableAgentsForGroup                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginManagerAvailableAgentsForGroup" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/LoginManagerAvailableAgentsForGroup"

  - Addressing input action: "urn:EMISweb/LoginManagerAvailableAgentsForGroup"

  - Addressing output action: "urn:EMISweb/LoginManagerAvailableAgentsForGroupResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginManagerAvailableAgentsForGroup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAvailableAgents,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginManagerAvailableAgentsForGroup(
    struct soap *soap,
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAvailableAgents,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginManagerAvailableAgentsForGroup SOAP
//gsoap ns1  service method-style:	LoginManagerAvailableAgentsForGroup document
//gsoap ns1  service method-encoding:	LoginManagerAvailableAgentsForGroup literal
//gsoap ns1  service method-input-action:	LoginManagerAvailableAgentsForGroup urn:EMISweb/LoginManagerAvailableAgentsForGroup
//gsoap ns1  service method-output-action:	LoginManagerAvailableAgentsForGroup urn:EMISweb/LoginManagerAvailableAgentsForGroupResponse
int __ns1__LoginManagerAvailableAgentsForGroup(
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAvailableAgents,	///< Input parameter
    ns1__GenListReturnType             &ns1__LoginManagerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginManagerAvailableGroupsForAgent                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginManagerAvailableGroupsForAgent" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/LoginManagerAvailableGroupsForAgent"

  - Addressing input action: "urn:EMISweb/LoginManagerAvailableGroupsForAgent"

  - Addressing output action: "urn:EMISweb/LoginManagerAvailableGroupsForAgentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginManagerAvailableGroupsForAgent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAvailableGroups,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginManagerAvailableGroupsForAgent(
    struct soap *soap,
    // input parameters:
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAvailableGroups,
    // output parameters:
    ns1__GenListReturnType             &ns1__LoginManagerResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginManagerAvailableGroupsForAgent SOAP
//gsoap ns1  service method-style:	LoginManagerAvailableGroupsForAgent document
//gsoap ns1  service method-encoding:	LoginManagerAvailableGroupsForAgent literal
//gsoap ns1  service method-input-action:	LoginManagerAvailableGroupsForAgent urn:EMISweb/LoginManagerAvailableGroupsForAgent
//gsoap ns1  service method-output-action:	LoginManagerAvailableGroupsForAgent urn:EMISweb/LoginManagerAvailableGroupsForAgentResponse
int __ns1__LoginManagerAvailableGroupsForAgent(
    ns1__LoginManagerRequestType*       ns1__LoginManagerRequestAvailableGroups,	///< Input parameter
    ns1__GenListReturnType             &ns1__LoginManagerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ApplicationRegister                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ApplicationRegister" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/ApplicationRegister"

  - Addressing input action: "urn:EMISweb/ApplicationRegister"

  - Addressing output action: "urn:EMISweb/ApplicationRegisterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ApplicationRegister(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ApplicationRegisterRequestType* ns1__ApplicationRegisterRequest,
    // output parameters:
    ns1__ApplicationReturnType         &ns1__ApplicationRegisterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ApplicationRegister(
    struct soap *soap,
    // input parameters:
    ns1__ApplicationRegisterRequestType* ns1__ApplicationRegisterRequest,
    // output parameters:
    ns1__ApplicationReturnType         &ns1__ApplicationRegisterResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ApplicationRegister SOAP
//gsoap ns1  service method-style:	ApplicationRegister document
//gsoap ns1  service method-encoding:	ApplicationRegister literal
//gsoap ns1  service method-input-action:	ApplicationRegister urn:EMISweb/ApplicationRegister
//gsoap ns1  service method-output-action:	ApplicationRegister urn:EMISweb/ApplicationRegisterResponse
int __ns1__ApplicationRegister(
    ns1__ApplicationRegisterRequestType* ns1__ApplicationRegisterRequest,	///< Input parameter
    ns1__ApplicationReturnType         &ns1__ApplicationRegisterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ApplicationKeepAlive                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ApplicationKeepAlive" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/ApplicationKeepAlive"

  - Addressing input action: "urn:EMISweb/ApplicationKeepAlive"

  - Addressing output action: "urn:EMISweb/ApplicationKeepAliveResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ApplicationKeepAlive(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ApplicationKeepAliveRequestType* ns1__ApplicationKeepAliveRequest,
    // output parameters:
    ns1__ApplicationReturnType         &ns1__ApplicationKeepAliveResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ApplicationKeepAlive(
    struct soap *soap,
    // input parameters:
    ns1__ApplicationKeepAliveRequestType* ns1__ApplicationKeepAliveRequest,
    // output parameters:
    ns1__ApplicationReturnType         &ns1__ApplicationKeepAliveResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ApplicationKeepAlive SOAP
//gsoap ns1  service method-style:	ApplicationKeepAlive document
//gsoap ns1  service method-encoding:	ApplicationKeepAlive literal
//gsoap ns1  service method-input-action:	ApplicationKeepAlive urn:EMISweb/ApplicationKeepAlive
//gsoap ns1  service method-output-action:	ApplicationKeepAlive urn:EMISweb/ApplicationKeepAliveResponse
int __ns1__ApplicationKeepAlive(
    ns1__ApplicationKeepAliveRequestType* ns1__ApplicationKeepAliveRequest,	///< Input parameter
    ns1__ApplicationReturnType         &ns1__ApplicationKeepAliveResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TraceInternalStat                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TraceInternalStat" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/TraceInternalStat"

  - Addressing input action: "urn:EMISweb/TraceInternalStat"

  - Addressing output action: "urn:EMISweb/TraceInternalStatResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TraceInternalStat(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__StatRequestType*               ns1__TraceInternalStatRequest,
    // output parameters:
    ns1__StatReturnType                &ns1__TraceInternalStatResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TraceInternalStat(
    struct soap *soap,
    // input parameters:
    ns1__StatRequestType*               ns1__TraceInternalStatRequest,
    // output parameters:
    ns1__StatReturnType                &ns1__TraceInternalStatResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TraceInternalStat SOAP
//gsoap ns1  service method-style:	TraceInternalStat document
//gsoap ns1  service method-encoding:	TraceInternalStat literal
//gsoap ns1  service method-input-action:	TraceInternalStat urn:EMISweb/TraceInternalStat
//gsoap ns1  service method-output-action:	TraceInternalStat urn:EMISweb/TraceInternalStatResponse
int __ns1__TraceInternalStat(
    ns1__StatRequestType*               ns1__TraceInternalStatRequest,	///< Input parameter
    ns1__StatReturnType                &ns1__TraceInternalStatResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AgentNeedHelp                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AgentNeedHelp" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/AgentNeedHelp"

  - Addressing input action: "urn:EMISweb/AgentNeedHelp"

  - Addressing output action: "urn:EMISweb/AgentNeedHelpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AgentNeedHelp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__AgentNeedHelpRequest,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__AgentNeedHelpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AgentNeedHelp(
    struct soap *soap,
    // input parameters:
    ns1__BriefInfoRequestType*          ns1__AgentNeedHelpRequest,
    // output parameters:
    ns1__ReturnMatrixDataTypeBG        &ns1__AgentNeedHelpResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AgentNeedHelp SOAP
//gsoap ns1  service method-style:	AgentNeedHelp document
//gsoap ns1  service method-encoding:	AgentNeedHelp literal
//gsoap ns1  service method-input-action:	AgentNeedHelp urn:EMISweb/AgentNeedHelp
//gsoap ns1  service method-output-action:	AgentNeedHelp urn:EMISweb/AgentNeedHelpResponse
int __ns1__AgentNeedHelp(
    ns1__BriefInfoRequestType*          ns1__AgentNeedHelpRequest,	///< Input parameter
    ns1__ReturnMatrixDataTypeBG        &ns1__AgentNeedHelpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupHourlyInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupHourlyInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupHourlyInfo"

  - Addressing input action: "urn:EMISweb/GroupHourlyInfo"

  - Addressing output action: "urn:EMISweb/GroupHourlyInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupHourlyInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__GroupHourlyInfoRequest,
    // output parameters:
    ns1__ReturnMatrixDataTypePerGroup  &ns1__GroupHourlyInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupHourlyInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__GroupHourlyInfoRequest,
    // output parameters:
    ns1__ReturnMatrixDataTypePerGroup  &ns1__GroupHourlyInfoResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupHourlyInfo SOAP
//gsoap ns1  service method-style:	GroupHourlyInfo document
//gsoap ns1  service method-encoding:	GroupHourlyInfo literal
//gsoap ns1  service method-input-action:	GroupHourlyInfo urn:EMISweb/GroupHourlyInfo
//gsoap ns1  service method-output-action:	GroupHourlyInfo urn:EMISweb/GroupHourlyInfoResponse
int __ns1__GroupHourlyInfo(
    ns1__GenInfoRequestType*            ns1__GroupHourlyInfoRequest,	///< Input parameter
    ns1__ReturnMatrixDataTypePerGroup  &ns1__GroupHourlyInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupDailyBriefInfo                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupDailyBriefInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupDailyBriefInfo"

  - Addressing input action: "urn:EMISweb/GroupDailyBriefInfo"

  - Addressing output action: "urn:EMISweb/GroupDailyBriefInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupDailyBriefInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__GroupDailyBriefInfoRequest,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__GroupDailyBriefInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupDailyBriefInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__GroupDailyBriefInfoRequest,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__GroupDailyBriefInfoResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupDailyBriefInfo SOAP
//gsoap ns1  service method-style:	GroupDailyBriefInfo document
//gsoap ns1  service method-encoding:	GroupDailyBriefInfo literal
//gsoap ns1  service method-input-action:	GroupDailyBriefInfo urn:EMISweb/GroupDailyBriefInfo
//gsoap ns1  service method-output-action:	GroupDailyBriefInfo urn:EMISweb/GroupDailyBriefInfoResponse
int __ns1__GroupDailyBriefInfo(
    ns1__GenInfoRequestType*            ns1__GroupDailyBriefInfoRequest,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__GroupDailyBriefInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GroupDailyDetailedInfo                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GroupDailyDetailedInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/GroupDailyDetailedInfo"

  - Addressing input action: "urn:EMISweb/GroupDailyDetailedInfo"

  - Addressing output action: "urn:EMISweb/GroupDailyDetailedInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GroupDailyDetailedInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__GroupDailyDetailedInfoRequest,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__GroupDailyDetailedInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GroupDailyDetailedInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__GroupDailyDetailedInfoRequest,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__GroupDailyDetailedInfoResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GroupDailyDetailedInfo SOAP
//gsoap ns1  service method-style:	GroupDailyDetailedInfo document
//gsoap ns1  service method-encoding:	GroupDailyDetailedInfo literal
//gsoap ns1  service method-input-action:	GroupDailyDetailedInfo urn:EMISweb/GroupDailyDetailedInfo
//gsoap ns1  service method-output-action:	GroupDailyDetailedInfo urn:EMISweb/GroupDailyDetailedInfoResponse
int __ns1__GroupDailyDetailedInfo(
    ns1__GenInfoRequestType*            ns1__GroupDailyDetailedInfoRequest,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__GroupDailyDetailedInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SuperGroupHourlyInfo                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SuperGroupHourlyInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/SuperGroupHourlyInfo"

  - Addressing input action: "urn:EMISweb/SuperGroupHourlyInfo"

  - Addressing output action: "urn:EMISweb/SuperGroupHourlyInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SuperGroupHourlyInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__SuperGroupHourlyInfoRequest,
    // output parameters:
    ns1__ReturnMatrixDataTypePerSuperGroup&ns1__SuperGroupHourlyInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SuperGroupHourlyInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__SuperGroupHourlyInfoRequest,
    // output parameters:
    ns1__ReturnMatrixDataTypePerSuperGroup&ns1__SuperGroupHourlyInfoResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SuperGroupHourlyInfo SOAP
//gsoap ns1  service method-style:	SuperGroupHourlyInfo document
//gsoap ns1  service method-encoding:	SuperGroupHourlyInfo literal
//gsoap ns1  service method-input-action:	SuperGroupHourlyInfo urn:EMISweb/SuperGroupHourlyInfo
//gsoap ns1  service method-output-action:	SuperGroupHourlyInfo urn:EMISweb/SuperGroupHourlyInfoResponse
int __ns1__SuperGroupHourlyInfo(
    ns1__GenInfoRequestType*            ns1__SuperGroupHourlyInfoRequest,	///< Input parameter
    ns1__ReturnMatrixDataTypePerSuperGroup&ns1__SuperGroupHourlyInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SuperGroupDailyBriefInfo                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SuperGroupDailyBriefInfo" of service binding "EMISwebBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - 

  - Default SOAP action or REST location path:
    - "urn:EMISweb/SuperGroupDailyBriefInfo"

  - Addressing input action: "urn:EMISweb/SuperGroupDailyBriefInfo"

  - Addressing output action: "urn:EMISweb/SuperGroupDailyBriefInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SuperGroupDailyBriefInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GenInfoRequestType*            ns1__SuperGroupDailyBriefInfoRequest,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__SuperGroupDailyBriefInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SuperGroupDailyBriefInfo(
    struct soap *soap,
    // input parameters:
    ns1__GenInfoRequestType*            ns1__SuperGroupDailyBriefInfoRequest,
    // output parameters:
    ns1__ReturnArrayDataType           &ns1__SuperGroupDailyBriefInfoResponse
  );
@endcode

C++ proxy class (defined in soapEMISwebBindingProxy.h generated with soapcpp2):
@code
  class EMISwebBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEMISwebBindingService.h generated with soapcpp2):
@code
  class EMISwebBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SuperGroupDailyBriefInfo SOAP
//gsoap ns1  service method-style:	SuperGroupDailyBriefInfo document
//gsoap ns1  service method-encoding:	SuperGroupDailyBriefInfo literal
//gsoap ns1  service method-input-action:	SuperGroupDailyBriefInfo urn:EMISweb/SuperGroupDailyBriefInfo
//gsoap ns1  service method-output-action:	SuperGroupDailyBriefInfo urn:EMISweb/SuperGroupDailyBriefInfoResponse
int __ns1__SuperGroupDailyBriefInfo(
    ns1__GenInfoRequestType*            ns1__SuperGroupDailyBriefInfoRequest,	///< Input parameter
    ns1__ReturnArrayDataType           &ns1__SuperGroupDailyBriefInfoResponse	///< Output parameter
);

/**

@page EMISwebBinding Binding "EMISwebBinding"

@section EMISwebBinding_policy_enablers Policy Enablers of Binding "EMISwebBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "urn:EMISweb"

  - <ns1:RequestGroupDetailFullInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupDetailFullInfo)

  - <ns1:RequestGroupQueInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupQueInfo)

  - <ns1:RequestGroupAgentsInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupAgentsInfo)

  - <ns1:RequestGroupAbndInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupAbndInfo)

  - <ns1:RequestGroupIntOvfInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupIntOvfInfo)

  - <ns1:RequestGroupShiftInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupShiftInfo)

  - <ns1:RequestGroupGeneralInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupGeneralInfo)

  - <ns1:RequestGroupPeriodInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupPeriodInfo)

  - <ns1:RequestIvrApplInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestIvrApplInfo)

  - <ns1:RequestIvrPortInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestIvrPortInfo)

  - <ns1:RequestIvrGrpInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestIvrGrpInfo)

  - <ns1:RequestMailboxInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestMailboxInfo)

  - <ns1:RequestSuperGroupInfo> (use wsdl2h option -g to auto-generate type _ns1__RequestSuperGroupInfo)

  - <ns1:RequestSuperGroupList> (use wsdl2h option -g to auto-generate type _ns1__RequestSuperGroupList)

  - <ns1:RequestUserLogin> (use wsdl2h option -g to auto-generate type _ns1__RequestUserLogin)

  - <ns1:RequestUserLogout> (use wsdl2h option -g to auto-generate type _ns1__RequestUserLogout)

  - <ns1:RequestGroupList> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupList)

  - <ns1:RequestIvrPortGroupList> (use wsdl2h option -g to auto-generate type _ns1__RequestIvrPortGroupList)

  - <ns1:RequestIvrAppList> (use wsdl2h option -g to auto-generate type _ns1__RequestIvrAppList)

  - <ns1:RequestMailAccList> (use wsdl2h option -g to auto-generate type _ns1__RequestMailAccList)

  - <ns1:RequestGroupAgentsMatrix> (use wsdl2h option -g to auto-generate type _ns1__RequestGroupAgentsMatrix)

  - <ns1:RequestAgentsList> (use wsdl2h option -g to auto-generate type _ns1__RequestAgentsList)

  - <ns1:RequestBriefAgentsMatrix> (use wsdl2h option -g to auto-generate type _ns1__RequestBriefAgentsMatrix)

  - <ns1:RequestDefaultWorkspace> (use wsdl2h option -g to auto-generate type _ns1__RequestDefaultWorkspace)

  - <ns1:RequestReportListData> (use wsdl2h option -g to auto-generate type _ns1__RequestReportListData)

  - <ns1:RequestVoiceDNISList> (use wsdl2h option -g to auto-generate type _ns1__RequestVoiceDNISList)

  - <ns1:RequestEmailDNISList> (use wsdl2h option -g to auto-generate type _ns1__RequestEmailDNISList)

  - <ns1:RequestBriefVoiceDNISMatrix> (use wsdl2h option -g to auto-generate type _ns1__RequestBriefVoiceDNISMatrix)

  - <ns1:RequestBriefEMailDNISMatrix> (use wsdl2h option -g to auto-generate type _ns1__RequestBriefEMailDNISMatrix)

  - <ns1:LoginLogoutRequestAcdComandAgent> (use wsdl2h option -g to auto-generate type _ns1__LoginLogoutRequestAcdComandAgent)

  - <ns1:LoginLogoutRequestAcdOneAgent> (use wsdl2h option -g to auto-generate type _ns1__LoginLogoutRequestAcdOneAgent)

  - <ns1:LoginLogoutRequestAcdMultiAgents> (use wsdl2h option -g to auto-generate type _ns1__LoginLogoutRequestAcdMultiAgents)

  - <ns1:ReleaseResumeRequestAcd> (use wsdl2h option -g to auto-generate type _ns1__ReleaseResumeRequestAcd)

  - <ns1:StartChatRequestAcd> (use wsdl2h option -g to auto-generate type _ns1__StartChatRequestAcd)

  - <ns1:StartRecordRequestAcd> (use wsdl2h option -g to auto-generate type _ns1__StartRecordRequestAcd)

  - <ns1:RequestTf> (use wsdl2h option -g to auto-generate type _ns1__RequestTf)

  - <ns1:RequestSaveWorkspase> (use wsdl2h option -g to auto-generate type _ns1__RequestSaveWorkspase)

  - <ns1:RequestSaveReport> (use wsdl2h option -g to auto-generate type _ns1__RequestSaveReport)

  - <ns1:RequestDeleteReport> (use wsdl2h option -g to auto-generate type _ns1__RequestDeleteReport)

  - <ns1:LoginManagerRequestAgents> (use wsdl2h option -g to auto-generate type _ns1__LoginManagerRequestAgents)

  - <ns1:LoginManagerRequestGroups> (use wsdl2h option -g to auto-generate type _ns1__LoginManagerRequestGroups)

  - <ns1:LoginManagerRequestAvailableAgents> (use wsdl2h option -g to auto-generate type _ns1__LoginManagerRequestAvailableAgents)

  - <ns1:LoginManagerRequestAvailableGroups> (use wsdl2h option -g to auto-generate type _ns1__LoginManagerRequestAvailableGroups)

  - <ns1:ApplicationRegisterRequest> (use wsdl2h option -g to auto-generate type _ns1__ApplicationRegisterRequest)

  - <ns1:ApplicationKeepAliveRequest> (use wsdl2h option -g to auto-generate type _ns1__ApplicationKeepAliveRequest)

  - <ns1:TraceInternalStatRequest> (use wsdl2h option -g to auto-generate type _ns1__TraceInternalStatRequest)

  - <ns1:AgentNeedHelpRequest> (use wsdl2h option -g to auto-generate type _ns1__AgentNeedHelpRequest)

  - <ns1:GroupHourlyInfoRequest> (use wsdl2h option -g to auto-generate type _ns1__GroupHourlyInfoRequest)

  - <ns1:GroupDailyBriefInfoRequest> (use wsdl2h option -g to auto-generate type _ns1__GroupDailyBriefInfoRequest)

  - <ns1:GroupDailyDetailedInfoRequest> (use wsdl2h option -g to auto-generate type _ns1__GroupDailyDetailedInfoRequest)

  - <ns1:SuperGroupHourlyInfoRequest> (use wsdl2h option -g to auto-generate type _ns1__SuperGroupHourlyInfoRequest)

  - <ns1:SuperGroupDailyBriefInfoRequest> (use wsdl2h option -g to auto-generate type _ns1__SuperGroupDailyBriefInfoRequest)

  - <ns1:ReturnGroupDetailFullInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupDetailFullInfo)

  - <ns1:ReturnGroupQueInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupQueInfo)

  - <ns1:ReturnGroupAgentsInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupAgentsInfo)

  - <ns1:ReturnGroupAbndInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupAbndInfo)

  - <ns1:ReturnGroupIntOvfInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupIntOvfInfo)

  - <ns1:ReturnGroupShiftInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupShiftInfo)

  - <ns1:ReturnGroupGeneralInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupGeneralInfo)

  - <ns1:ReturnGroupPeriodInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupPeriodInfo)

  - <ns1:ReturnIvrApplInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnIvrApplInfo)

  - <ns1:ReturnIvrPortInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnIvrPortInfo)

  - <ns1:ReturnIvrGrpInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnIvrGrpInfo)

  - <ns1:ReturnMailboxInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnMailboxInfo)

  - <ns1:ReturnSuperGroupInfo> (use wsdl2h option -g to auto-generate type _ns1__ReturnSuperGroupInfo)

  - <ns1:ReturnSuperGroupList> (use wsdl2h option -g to auto-generate type _ns1__ReturnSuperGroupList)

  - <ns1:ReturnUserLogin> (use wsdl2h option -g to auto-generate type _ns1__ReturnUserLogin)

  - <ns1:ReturnGroupList> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupList)

  - <ns1:ReturnIvrPortGroupList> (use wsdl2h option -g to auto-generate type _ns1__ReturnIvrPortGroupList)

  - <ns1:ReturnIvrAppList> (use wsdl2h option -g to auto-generate type _ns1__ReturnIvrAppList)

  - <ns1:ReturnMailAccList> (use wsdl2h option -g to auto-generate type _ns1__ReturnMailAccList)

  - <ns1:ReturnGroupAgentsMatrix> (use wsdl2h option -g to auto-generate type _ns1__ReturnGroupAgentsMatrix)

  - <ns1:ReturnAgentsList> (use wsdl2h option -g to auto-generate type _ns1__ReturnAgentsList)

  - <ns1:ReturnBriefAgentsMatrix> (use wsdl2h option -g to auto-generate type _ns1__ReturnBriefAgentsMatrix)

  - <ns1:ReturnDefaultWorkspace> (use wsdl2h option -g to auto-generate type _ns1__ReturnDefaultWorkspace)

  - <ns1:ReturnReportListData> (use wsdl2h option -g to auto-generate type _ns1__ReturnReportListData)

  - <ns1:ReturnVoiceDNISList> (use wsdl2h option -g to auto-generate type _ns1__ReturnVoiceDNISList)

  - <ns1:ReturnEmailDNISList> (use wsdl2h option -g to auto-generate type _ns1__ReturnEmailDNISList)

  - <ns1:ReturnBriefVoiceDNISMatrix> (use wsdl2h option -g to auto-generate type _ns1__ReturnBriefVoiceDNISMatrix)

  - <ns1:ReturnBriefEMailDNISMatrix> (use wsdl2h option -g to auto-generate type _ns1__ReturnBriefEMailDNISMatrix)

  - <ns1:NoDataResponse> (use wsdl2h option -g to auto-generate type _ns1__NoDataResponse)

  - <ns1:ResponseSaveReport> (use wsdl2h option -g to auto-generate type _ns1__ResponseSaveReport)

  - <ns1:LoginManagerResponse> (use wsdl2h option -g to auto-generate type _ns1__LoginManagerResponse)

  - <ns1:StartChatResponse> (use wsdl2h option -g to auto-generate type _ns1__StartChatResponse)

  - <ns1:ApplicationRegisterResponse> (use wsdl2h option -g to auto-generate type _ns1__ApplicationRegisterResponse)

  - <ns1:ApplicationKeepAliveResponse> (use wsdl2h option -g to auto-generate type _ns1__ApplicationKeepAliveResponse)

  - <ns1:TraceInternalStatResponse> (use wsdl2h option -g to auto-generate type _ns1__TraceInternalStatResponse)

  - <ns1:AgentNeedHelpResponse> (use wsdl2h option -g to auto-generate type _ns1__AgentNeedHelpResponse)

  - <ns1:GroupHourlyInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__GroupHourlyInfoResponse)

  - <ns1:GroupDailyBriefInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__GroupDailyBriefInfoResponse)

  - <ns1:GroupDailyDetailedInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__GroupDailyDetailedInfoResponse)

  - <ns1:SuperGroupHourlyInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__SuperGroupHourlyInfoResponse)

  - <ns1:SuperGroupDailyBriefInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__SuperGroupDailyBriefInfoResponse)

*/

/* End of emisweb.h */
